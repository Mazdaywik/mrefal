$MODULE Compiler;

/*******************************************************************************
	Модуль реализует трансляцию отдельных модулей исходного текста Модульного
Рефала. Точки входа в модуль -- функции CompileByModuleName и CompileByFileName
выполняют компиляцию указанного модуля по заданному имени файла (имя в файло-
вой системе) или модуля (указанного после директивы $MODULE). Сигнатуры этих
функций следующие:
	<CompileBy***Name t.Context e.***Name> == t.UpdatedContext
	В процессе компиляции функции возвращают контекст с обновлённой информацией
о скомпилированных модулях или завершают выполнение программы аварийно вызовом
функции из модуля Error. Функции также при необходимости рекурсивно перекомпи-
лируют модули указанные в директивах $IMPORT указанных модулей.
	Для простоты потребуем в данной версии, чтобы имя модуля совпадало с именем
файла. Поиск исходных файлов осуществляется в текущей директории, поиск библио-
течных файлов осуществляется сначала в текущей директории, затем по алгоритму,
находящемуся в модуле Modules вызовом Modules::LookupLibrary.
*******************************************************************************/

$IMPORT Context;
$IMPORT MBackEnd;
$IMPORT MError;
$IMPORT MFrontEnd;
$IMPORT MLocation;
$IMPORT Modules;
$IMPORT MOutModuleStatus;
$IMPORT MResolver;
$IMPORT MSelfDiag;
$IMPORT MSymModule;


$ENTRY CompileByModuleName
	t.Context e.ModuleName =
		<Lookup-Dummy t.Context e.ModuleName>;

$ENTRY CompileByFileName {
	t.Context e.FileName s.Dot s.M s.R s.E s.F =
		<Lookup-Dummy t.Context e.FileName >;
}

// Функция-затычка
Lookup-Dummy
	t.Context e.ModuleName =
		<ParseAndCompile
			<MLocation::LookupModule-T
				t.Context () e.ModuleName
			>
		>;

ParseAndCompile {
	t.Context NotKnown ModuleNotFound
	t.SymName t.OutName t.SrcName (e.Directory) e.ModuleName =
		<MError::Fatal 'Module `' e.ModuleName '` not found'>;

	t.Context
	s.Known s.Status
	(Sym e.SymName) (Out e.OutName) (Src e.SrcName)
	(e.Directory) e.Name =
		<MOutModuleStatus::Compiling e.SrcName>
		<Compile
			(File e.SrcName)
			t.Context
			<MFrontEnd::LoadModule
				e.SrcName
			>
		>
 		<MOutModuleStatus::Compiled e.SrcName>;
}

/**
	<CompileModule
		t.Context
		(e.Directory)
		e.ModuleName
	> == t.UpdatedContext
*/
$ENTRY CompileModule {
	t.Context (e.Directory) e.ModuleName =
		<CheckCompileIfNeed
			<MLocation::LookupModule-T
				t.Context (e.Directory) e.ModuleName
			>
		>;
}

CheckCompileIfNeed {
	t.Context s.Known s.Status
	(Sym e.SymFile) (Out e.OutFile) (Src e.SrcFile)
	(e.Directory) e.Module =
		;
}

Compile {
	t.FileName t.Context t.Module Success t.ErrorList =
		<MError::DestroyErrList t.ErrorList>
		<Compile0 t.FileName t.Context t.Module>;

	t.FileName t.Context t.Module Warnings t.ErrorList =
		<MError::PrintErrors t.ErrorList>
		<Compile0 t.FileName t.Context t.Module>;

	t.FileName t.Context t.Module Errors t.ErrorList =
		<MError::PrintErrorsAndStop t.ErrorList>;
}

Compile0 {
	(File e.FileName)
	t.Context
	t.Module =
		<Compile1
			(File e.FileName)
			t.Context
			<MFrontEnd::SymInfo-Old t.Module>
		>;
}

Compile1 {
	(File e.FileName)
	t.Context
	t.Module
	( Module () e.ModuleName ) t.Functions t.Imports =
		<Context::LastModule
			<Compile2
				(Module e.ModuleName)
				(File e.FileName)
				(Sym <Modules::SymName e.ModuleName>)
				(Out <Modules::OutName e.ModuleName>)
				t.Context
				t.Module
				( Module () e.ModuleName ) t.Functions t.Imports
			>
			e.ModuleName
		>;
}

ImportInfoToOldSymTable {
	( Module () e.ModuleName )
	( Functions e.FnList )
	( Imports e.ImportList ) =
		( ( CurModule e.ModuleName )
			( Modules <ImportToModule e.ImportList> )
			( Functions <AddEntry e.FnList> )
		);
}

ImportToModule {
	( () e.Name ) e.Tail =
		( e.Name ) <ImportToModule e.Tail>;

	= ;
}

AddEntry {
	( e.FnName ) e.Tail =
		( Entry e.FnName ) <AddEntry e.Tail>;

	= ;
}

Compile2 {
	(Module e.ModuleName)
	(File e.FileName) 
	(Sym e.SymName)
	(Out e.OutName)
	t.Context
	t.Module
	e.SymInfo =
		<Generate
			(e.ModuleName)
			(Out e.OutName)
			(Sym e.SymName)
			<CheckFnCalls
				<LoadImportInfo
					<Context::UpdateModuleInfo
						t.Context
						(e.ModuleName)
						(Sym e.SymName)
						(Out e.OutName)
						(Src e.FileName)
						(Status InCompiling)
					>
					<ImportInfoToOldSymTable
						e.SymInfo
					>
				>
				t.Module
			>
		>;
}

* <LoadImportInfo t.Context t.SymTable-Old>
*	== t.UpdatedContext t.UpdatedSymTable-Old'
LoadImportInfo {
	t.Context ( t.CurModule t.Modules t.Functions ) =
		<LoadImportInfo-SwapArgs
			( t.CurModule t.Modules t.Functions )
			<LoadQualifiedFunctions
				t.Context t.Modules
			>
		>;
}

LoadImportInfo-SwapArgs {
	(t.CurModule t.Modules t.Functions)
	t.Context e.QualifiedList =
		t.Context
		((Idents) t.CurModule t.Modules t.Functions
			(Qualified e.QualifiedList)
		);
}

* <LoadQualifiedFunctions t.Context (Modules e.Modules)>
*	== t.Context e.QualifiedList
LoadQualifiedFunctions {
	t.Context (Modules e.ModulesList) =
		<DoLoadQFunc t.Context () e.ModulesList>;
}

DoLoadQFunc {
	t.Context (e.QList) = t.Context e.QList;

	t.Context (e.QList) t.NextModule e.RestModules =
		<DoLoadQFunc-SwapArgs
			<LoadFromOneModule
				t.Context t.NextModule
			>
			(e.QList) e.RestModules
		>;
}

DoLoadQFunc-SwapArgs {
	t.Context (e.QListFromNextModule) (e.CommonQList) e.RestModules =
		<DoLoadQFunc
			t.Context
			(e.CommonQList e.QListFromNextModule)
			e.RestModules
		>;
}

/*
	Функция LoadFromOneModule подгружает из модуля список экспортируемых функций
в виде квалифицированного списка (для удобства дальнейшей работы). Если модуль необходимо
перекомпилировать, то модуль перекомпилируется перед загрузкой. Перекомпиляцию при необ-
ходимости осуществляет функция <CompileIfNeed>. В результате перекомпиляции функция
устанавливает в контексте статус модуля в одно из: Recompiled, Updated, Library.
Первое устанавливается в том случае, если исходный файл обновлён относительно выходных
файлов или обновлены модули, от которых он зависит, и в итоге был перекомпилирован.
Второе устанавливается, если файл перекомпилирован не был, поскольку выходные файлы
были изменены позже _и_ не были перекомпилированы зависимые модули. Последнее устанавли-
вается, если исходный файл не найден, но найдены выходные файлы. В том случае, если
модуль, который должен быть при необходимости перекомпилирован внутри CompileIfNeed
не найден, то программа завершается выдачей сообщения об ошибке.
	Функции LoadFromOneModule глубоко пофиг, что устанавливает CompileIfNeed, поскольку
все три результата говорят о том, что файл перекомпилирован, т.е. можно подгружать
информацию из sym-файла и связывать out-файл.
	Проверка на необходимость перекомпиляции осуществляется только если информация
о модуле отсутствует в контексте.
	^ Комментарий кривой, при первой же необходимости переписать.
*/

* <LoadFromOneModule t.Context (e.ModuleName)>
*	== t.Context (e.QualifiedList)
LoadFromOneModule
	t.Context (e.ModuleName) =
		<SwLoadFromOneModule
			(e.ModuleName)
			<Context::ExtractOption t.Context Status e.ModuleName>
		>;

SwLoadFromOneModule {
	(e.ModuleName) t.Context ModuleInfoNotFound =
		/* Перекомпиляция модуля и повторная попытка загрузки информации */
		<LoadFromOneModule
			<CompileIfNeed-Old t.Context e.ModuleName>
			(e.ModuleName)
		>;

	(e.ModuleName) t.Context Found Recompiled =
		<FunctionsFromSym
			<ReadSym t.Context e.ModuleName>
		>;

	(e.ModuleName) t.Context Found Library =
		<FunctionsFromSym
			<ReadSym t.Context e.ModuleName>
		>;

	(e.ModuleName) t.Context Found Updated =
		<FunctionsFromSym
			<ReadSym t.Context e.ModuleName>
		>;

	(e.ModuleName) t.Context Found InCompiling =
		<MError::Fatal
			'Cyclic dependencies in module ' e.ModuleName
		>;
}

* <CompileIfNeed t.Context e.ModuleName>
*	== t.UpdatedContext
CompileIfNeed-Old {
	t.Context e.ModuleName =
		<SwCompileIfNeed-Old
			t.Context
			<Modules::LookupModule-T
				e.ModuleName
			>
		>;
}

SwCompileIfNeed-Old {
	t.Context ModuleNotFound
	(Sym None) (Out None) (Src None)
	e.ModuleName =
		<MError::Fatal
			'Module ' e.ModuleName ' not found'
		>;

	t.Context Library
	(Sym e.SymFile) (Out e.OutFile) (Src None)
	e.ModuleName =
		<MOutModuleStatus::Library e.ModuleName>
		<CheckCompileIfNeed-Old
			<Context::UpdateModuleInfo
				t.Context
				(e.ModuleName)
				(Sym e.SymFile) (Out e.OutFile) (Src None)
				(Status Library)
			> e.ModuleName
		>;

	t.Context SystemLibrary
	(Sym e.SymFile) (Out e.OutFile) (Src None)
	e.ModuleName =
		<MOutModuleStatus::SystemLibrary e.ModuleName>
		<CheckCompileIfNeed-Old
			<Context::UpdateModuleInfo
				t.Context
				(e.ModuleName)
				(Sym e.SymFile) (Out e.OutFile) (Src None)
				(Status Library)
			> e.ModuleName
		>;

	t.Context NeedRecompile
	(Sym e.SymFile) (Out e.OutFile) (Src e.SrcFile)
	e.ModuleName =
		<Context::UpdateModuleInfo
			<CompileByModuleName t.Context e.ModuleName>
			(e.ModuleName)
			(Sym e.SymFile) (Out e.OutFile) (Src e.SrcFile)
			(Status Recompiled)
		>;


	t.Context SrcNotUpdated
	(Sym e.SymFile) (Out e.OutFile) (Src e.SrcFile)
	e.ModuleName =
		<CheckCompileIfNeed-Old
			<Context::UpdateModuleInfo
				t.Context
				(e.ModuleName)
				(Sym e.SymFile) (Out e.OutFile) (Src e.SrcFile)
				(Status Updated)
			>
			e.ModuleName
		>;
}

* <CheckCompileIfNeed t.Context e.ModuleName>
*	== t.UpdatedContext
CheckCompileIfNeed-Old {
	t.Context e.ModuleName =
		<SwCheckCompileIfNeed-Old
			(e.ModuleName)
			<Context::ExtractOption
				t.Context
				Status
				e.ModuleName
			>
		>;
}

SwCheckCompileIfNeed-Old {
	(e.ModuleName) t.Context Found s.Status =
		<DoCheckCompileIfNeed-Old
			(e.ModuleName)
			s.Status
			<ImportsFromSym
				<ReadSym t.Context e.ModuleName>
			>
		>;

	(e.ModuleName) t.Context ModuleInfoNotFound =
		<DoCheckCompileIfNeed-Old
			(e.ModuleName)
			Updated
			<ImportsFromSym
				<ReadSym t.Context e.ModuleName>
			>
		>;
}

DoCheckCompileIfNeed-Old {
	t.ModuleName s.Status t.Context (e.NextName) e.Tail =
		<DoCheckCompileIfNeed-Old
			<SwDoCheckCompileIfNeed-Old
				t.ModuleName
				s.Status
				<Context::ExtractOption
					t.Context
					Status
					e.NextName
				>
				(e.NextName)
			>
			e.Tail
		>;

	(e.ModuleName) Updated t.Context =
		<MOutModuleStatus::Updated e.ModuleName>
		<Context::UpdateModuleInfo
			t.Context
			(e.ModuleName)
			(Sym <Modules::SymName e.ModuleName>)
			(Out <Modules::OutName e.ModuleName>)
			(Status Updated)
		>;

	(e.ModuleName) Recompiled t.Context =
		<Context::UpdateModuleInfo
			<CompileByModuleName t.Context e.ModuleName>
			(e.ModuleName)
			(Sym <Modules::SymName e.ModuleName>)
			(Out <Modules::OutName e.ModuleName>)
			(Status Recompiled)
		>;

	(e.ModuleName) Library t.Context =
		t.Context;
}

SwDoCheckCompileIfNeed-Old {
	t.ModuleName s.Status t.Context ModuleInfoNotFound (e.NextName) =
		<SwDoCheckCompileIfNeed-Old
			t.ModuleName s.Status
			<Context::ExtractOption
				<CompileIfNeed-Old t.Context e.NextName>
				Status
				e.NextName
			>
			(e.NextName)
		>;

	t.ModuleName Library t.Context Found Library (e.NextName) =
		t.ModuleName Library t.Context;

	t.ModuleName Library t.Context Found s.Other (e.NextName) =
		<MError::Fatal
			'Modules, dependeds from library, must be library modules '
			'(library module may be redefined)'
		>;

	t.ModuleName s.Status t.Context Found Recompiled (e.NextName) =
		t.ModuleName Recompiled t.Context;

	t.ModuleName s.Status t.Context Found Library (e.NextName) =
		t.ModuleName s.Status t.Context;

	t.ModuleName s.Status t.Context Found Updated (e.NextName) =
		t.ModuleName s.Status t.Context;
}

ReadSym
	t.Context e.ModuleName =
		<MSymModule::LoadInfo1 t.Context e.ModuleName>;

FunctionList {
	( t.Idents t.CurModule t.Modules (Functions e.FnList) t.Variables ) =
		e.FnList;
}

* <FunctionsFromSym t.Context t.FnList t.ImportList>
*	== t.Context ( ((e.Module) (e.FnName))* )
FunctionsFromSym {
	t.Context (Functions e.QualifiedList) t.ImportList =
		t.Context (e.QualifiedList);
}


* <ImportsFromSym t.Context t.FnList t.ImportList>
*	== t.Context (e.ImportName)*
ImportsFromSym {
	t.Context t.FnList (Imports e.ImportList) =
		t.Context e.ImportList;
}

/* Разрешает вызовы функций. */

* <CheckFnCalls t.Context t.SymTable-Old t.Module>
*	== t.Context t.ConvertedModule
CheckFnCalls
	t.Context t.SymTable-Old t.Module =
		t.Context
		<PrintUnresolved
			<MResolver::Resolve
				t.Module
				<MError::CreateErrList>
				<OldSymTableToQualifiedList t.SymTable-Old>
			>
		>;

OldSymTableToQualifiedList
	( t.Idents t.CurModule t.Imports t.Functions
		(Qualified e.QualifiedList-Old)
	) = <ConvertQualified e.QualifiedList-Old>;

ConvertQualified {
	((e.ModuleName) (e.FnName)) e.Tail =
		( (() e.ModuleName) (e.FnName) )
		<ConvertQualified e.Tail>;

	= ;
}

PrintUnresolved {
	t.ResolvedModule Success t.ErrorList =
		<MError::DestroyErrList t.ErrorList>
		t.ResolvedModule;

	t.ResolvedModule Warnings t.ErrorList =
		<MError::PrintErrors t.ErrorList>
		t.ResolvedModule;

	t.ResolvedModule Errors t.ErrorList =
		<MError::PrintErrorsAndStop t.ErrorList>;
}


*-------------------------------------------------------------------------------
* Выполняет генерацию выходного и символического файлов
*-------------------------------------------------------------------------------

* <Generate (e.ModuleName) t.OutName t.FSym t.Context t.Module>
*	== t.UpdatedContext
Generate {
	(e.ModuleName) (Out e.OutName) (Sym e.SymName)
	t.Context (t.SymTable e.ModuleContent) =
		<UpdateContext
			<GenerateOut
				(Out e.OutName)
				<GenerateSym
					t.Context
					t.SymTable
				>
				e.ModuleContent
			>
			e.ModuleName
		>;
}

* <UpdateContext t.Context t.ModuleName>
*	== t.UpdatedContext
UpdateContext {
	t.Context e.ModuleName =
		<Context::UpdateModuleInfo
			t.Context
			(e.ModuleName)
			(Status Recompiled)
		>;
}

* <GenerateSym t.Context t.SymTable>
*	== t.UpdatedContext t.SymTable
GenerateSym {
	t.Context t.SymTable =
		<GuardResult
			<MSymModule::SaveInfo-T1 t.Context t.SymTable>
		>;
}

GuardResult
	t.Context t.SymTable s.Result =
		t.Context t.SymTable
		<MSelfDiag::Assert-Eq
			(s.Result) (Success)
			'MSymModule::SaveInfo-T1 fails'
		>;

* <GenerateOut (Out e.OutName) t.Context t.SymTable t.Module>
*	== t.UpdatedContext
GenerateOut
	(Out e.OutName) t.Context t.SymTable e.Elements =
		t.Context
		<CheckGenerateResult
			<MBackEnd::Generate
				(t.SymTable e.Elements)
				<MError::CreateErrList>
				e.OutName
			>
		>;

CheckGenerateResult {
	Success t.ErrorList =
		<MError::DestroyErrList t.ErrorList>;

	s.Other t.ErrorList =
		<MError::PrintErrorsAndStop t.ErrorList>;
}

$END Compiler.
