//FROM Driver
$EXTERN CompileFile;

//FROM LibraryEx
$EXTERN Map, ArgList;

//FROM Library
$EXTERN Success, Fails, WriteLine, System;

//------------------------------------------------------------------------------

$FORWARD Main;

$ENTRY Go {
  = <Main <ArgList>>;
}

$FORWARD Compile-And-Link, FindFiles-Compilers;

//FROM ParseCmdLine
$EXTERN ParseCommandLine, NoCompile, CompileCommand, CmdLineError;

//FROM LibraryEx
$EXTERN LoadFile;

Main {
  (e.ProgName) ('@' e.Config) =
    <Main (e.ProgName) <LoadFile e.Config>>;

  (e.ProgName) e.Arguments =
    <Compile-And-Link
      <FindFiles-Compilers
        <ParseCommandLine e.Arguments>
      >
    >;
}

//FROM FindFile
$EXTERN FindFiles;

FindFiles-Compilers {
  t.Compilers (e.Folders) e.Files =
    t.Compilers <FindFiles (e.Folders) e.Files>;
}

//FROM FindFile
$EXTERN Source, Output, NotFound;

$FORWARD PrintNotFound, CompileEachFile, Link;

$FORWARD ScanCollisions, GetFileName;

Compile-And-Link {
  (CmdLineError e.Message) =
    <WriteLine 'COMMAND LINE ERROR: ' e.Message>;

  t.Compiler e.Files-B (NotFound e.FileName) e.Files-E =
    <Map PrintNotFound (NotFound e.FileName) e.Files-E>;

  t.Compiler e.Files =
    <ScanCollisions
      t.Compiler <Map GetFileName e.Files>
    >;
}

PrintNotFound {
  (NotFound e.FileName) =
    <WriteLine 'COMMAND LINE ERROR: file ' e.FileName ' not found'>;

  (Output e.FileName) = ;

  (Source (e.Source) e.Output) = ;
}


$FORWARD GetFileName-Aux, DoGetFileName;

GetFileName {
  (Output e.FileName) =
    (
      <GetFileName-Aux e.FileName> 0 (Output e.FileName)
    );

  (Source (e.Source) e.Output) =
    (
      <GetFileName-Aux e.Output> 0
      (Source (e.Source) e.Output)
    );
}

GetFileName-Aux {
  e.FileName '.cpp' = <DoGetFileName e.FileName>;
}

$FORWARD Lower;

DoGetFileName {
  e.FileName '/' = ;
  e.FileName '\\' = ;
  e.FileName s.Last =
    <DoGetFileName e.FileName>
    <Lower s.Last>;
  = ;
}

$FORWARD DoLower;

Lower {
  s.Char =
    <DoLower
      s.Char 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'
    >;
}

DoLower {
  s.Upper s.Upper s.Lower e.Tail = s.Lower;

  s.Char s.Upper s.Lower e.Tail = <DoLower s.Char e.Tail>;

  s.Char = s.Char;
}

$FORWARD Renumerate;

//FROM LibraryEx
$EXTERN DelAccummulator, MapReduce;

ScanCollisions {
  t.Compiler
  e.Files-B (e.FileName 0 (Output e.Output1)) e.Files-M
  (e.FileName 0 (Output e.Output2)) e.Files-E =
    <WriteLine
      'COMMAND LINE ERROR: output files ' e.Output1 ' and '
      e.Output2 ' has some filename ' e.FileName
    >;

  t.Compiler
  e.Files-B (e.FileName 0 t.Location) e.Files-M
  (e.FileName 0 (Output e.Output)) e.Files-E =
    <ScanCollisions
      t.Compiler
      e.Files-B (e.FileName 1 t.Location) e.Files-M
      (e.FileName 0 (Output e.Output))
      <DelAccummulator
        <MapReduce
          (Renumerate e.FileName) 2 e.Files-E
        >
      >
    >;

  t.Compiler
  e.Files-B (e.FileName 0 (Output e.Output)) e.Files-M
  (e.FileName 0 t.Location) e.Files-E =
    <ScanCollisions
      t.Compiler
      e.Files-B (e.FileName 0 (Output e.Output)) e.Files-M
      (e.FileName 1 t.Location)
      <DelAccummulator
        <MapReduce
          (Renumerate e.FileName) 2 e.Files-E
        >
      >
    >;

  t.Compiler
  e.Files-B (e.FileName 0 t.Location1) e.Files-M
  (e.FileName 0 t.Location2) e.Files-E =
    <ScanCollisions
      t.Compiler
      e.Files-B (e.FileName 0 t.Location1)
      e.Files-M (e.FileName 1 t.Location2)
      <DelAccummulator
        <MapReduce
          (Renumerate e.FileName) 2 e.Files-E
        >
      >
    >;

  t.Compiler e.Files =
    <Link t.Compiler <Map CompileEachFile e.Files>>;
}

//FROM LibraryEx
$EXTERN Inc;

Renumerate {
  e.FileName s.NextNumber
  (e.FileName 0 (Source (e.Source) e.Output)) =
    <Inc s.NextNumber>
    (e.FileName s.NextNumber (Source (e.Source) e.Output));

  e.FileName s.NextNumber t.NextFile =
    s.NextNumber t.NextFile;
}

$FORWARD SwCompiled, FileNum;

CompileEachFile {
  (e.FileName s.Num (Output e.OutputName)) =
    <WriteLine '+Linking ' e.OutputName> (e.OutputName);

  (e.FileName s.Num (Source (e.Source) e.Output)) =
    <SwCompiled
      <WriteLine '*Compiling ' e.Source ':'>
      <CompileFile (e.Source) <FileNum s.Num e.Output>>
    >;
}

//FROM Library
$EXTERN StrFromInt;

FileNum {
  0 e.File = e.File;

  s.Number e.File '.cpp' =
    e.File '@' <StrFromInt s.Number> '.cpp';
}

SwCompiled {
  Success e.OutputName = (e.OutputName);

  Fails = Fails;
}

UnBracketSpace {
  (e.FileName) = ' "' e.FileName '"';
}

Link {
  (NoCompile) e.Files = ;

  (CompileCommand e.Command) e.Outputs-B Fails e.Outputs-E = ;

  (CompileCommand e.Command) e.Outputs =
    <System e.Command <Map UnBracketSpace e.Outputs>>
    <WriteLine '** Compilation successed **'>;
}

