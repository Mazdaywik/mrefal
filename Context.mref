$MODULE Context;

$IMPORT MContext;
$IMPORT MSelfDiag;
$IMPORT MQualifiedName;
$IMPORT MQualifiedSupport;

/**
  <UpdateModuleInfo t.Context (e.ModName) e.NewOptionsList>
    == t.UpdatedContext
*/
$ENTRY UpdateModuleInfo {
  t.Context (e.ModName) e.NewOptions =
    <UpdateInfo-Guard
      <MContext::UpdateInfo
        t.Context
        <MQualifiedName::Create (e.ModName)>
        e.NewOptions
      >
    >;
}

UpdateInfo-Guard {
  t.Context Success =
    t.Context;

  t.Context Fails s.Error =
    <MSelfDiag::Error
      'Invalid options in Context::UpdateModuleInfo, error '
      <UpdateError s.Error>
    >;
}

UpdateError {
  UnknownOption = 'unknown option';

  MismatchCase = 'mismatch case';
}

$ENTRY LastModule
  t.hContext e.Name = t.hContext;

/**
  <ExtractOption t.Context s.Option e.ModName>
    == t.Context Found e.Option
    == t.Context ModuleInfoNotFound
    !fail abort!
*/
$ENTRY ExtractOption
  t.Context s.Option e.ModName =
    <ExtractOption-Guard
      <MContext::ExtractOption
        t.Context
        <MQualifiedName::Create (e.ModName)>
        s.Option
      >
    >;

ExtractOption-Guard {
  t.Context Found e.Option =
    t.Context Found e.Option;

  t.Context OptionNotFound =
    <MSelfDiag::Error 'Option not found in Context::ExtractOption'>;

  t.Context ModuleNotFound =
    t.Context ModuleInfoNotFound;

  t.Context MismatchCase =
    t.Context ModuleInfoNotFound;
}

$END Context.
