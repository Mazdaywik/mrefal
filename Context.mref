$MODULE Context;

$IMPORT MContext;
$IMPORT MSelfDiag;
$IMPORT MQualifiedName;
$IMPORT MQualifiedSupport;

/**
  <UpdateModuleInfo t.Context (e.ModName) e.NewOptionsList>
    == t.UpdatedContext
*/
$ENTRY UpdateModuleInfo {
  t.Context (e.ModName) e.NewOptions =
    <UpdateInfo-Guard
      <MContext::UpdateInfo
        t.Context
        <MQualifiedName::Create (e.ModName)>
        e.NewOptions
      >
    >;
}

UpdateInfo-Guard {
  t.Context Success =
    t.Context;

  t.Context Fails s.Error =
    <MSelfDiag::Error
      'Invalid options in Context::UpdateModuleInfo, error '
      <UpdateError s.Error>
    >;
}

UpdateError {
  UnknownOption = 'unknown option';

  MismatchCase = 'mismatch case';
}

$ENTRY LastModule
  t.Context e.Name =
    <LastModule-Guard
      <MContext::LastModule
        t.Context
        <MQualifiedName::Create (e.Name)>
      >
    >;

LastModule-Guard {
  t.Context Success =
    t.Context;

  t.Context Fails =
    <MSelfDiag::Error 'Context::LastModule: module name not found'>;
}

/**
  <ExtractOption t.Context s.Option e.ModName>
    == t.Context Found e.Option
    == t.Context ModuleInfoNotFound
    !fail abort!
*/
$ENTRY ExtractOption
  t.Context s.Option e.ModName =
    <ExtractOption-Guard
      <MContext::ExtractOption
        t.Context
        <MQualifiedName::Create (e.ModName)>
        s.Option
      >
    >;

ExtractOption-Guard {
  t.Context Found e.Option =
    t.Context Found e.Option;

  t.Context OptionNotFound =
    <MSelfDiag::Error 'Option not found in Context::ExtractOption'>;

  t.Context ModuleNotFound =
    t.Context ModuleInfoNotFound;

  t.Context MismatchCase =
    t.Context ModuleInfoNotFound;
}

$ENTRY GetProgName
  t.Context =
    <GetProgName-AsNoQualified
      <MContext::GetProgName t.Context>
    >;

GetProgName-AsNoQualified
  t.Context t.ProgName =
    t.Context <MQualifiedSupport::UnQualify t.ProgName>;

/**
  <ExtractModulesList t.Context>
    == t.Context (e.ModuleName)*
*/
$ENTRY ExtractModulesList
  t.Context =
    <ExtractList-UnQualify
      <MContext::ExtractModulesList t.Context>
    >;

ExtractList-UnQualify
  t.Context e.List =
    t.Context
    <DoUnQualify e.List>;

DoUnQualify {
  t.Qualified e.Tail =
    ( <MQualifiedSupport::UnQualify t.Qualified> )
    <DoUnQualify e.Tail>;

  = ;
}

$END Context.
