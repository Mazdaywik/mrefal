Y {
  s.Func =
    {
      e.Arg = <s.Func <Y s.Func> e.Arg>;
    };
}

Fact-Aux {
  s.Loop 0 = 1;

  s.Loop s.Count = <Mul s.Count <s.Loop <Dec s.Count>>>;
}

Fact {
  s.Count = <<Y Fact-Aux> s.Count>;
}

<Fact 2>
<<Y Fact-Aux> 2>
<{ e.Arg = <Fact-Aux <Y Fact-Aux> e.Arg>; } 2>
<Fact-Aux <Y Fact-Aux> 2>
<Fact-Aux { e.Arg = <Fact-Aux <Y Fact-Aux> e.Arg>;} 2>
<Mul 2 <{ e.Arg = <Fact-Aux <Y Fact-Aux> e.Arg>;} <Dec 2>>>
<Mul 2 <{ e.Arg = <Fact-Aux <Y Fact-Aux> e.Arg>;} 1>>
<Mul 2 <Fact-Aux <Y Fact-Aux> 1>>
<Mul 2 <Fact-Aux { e.Arg = <Fact-Aux <Y Fact-Aux> e.Arg>;} 1>>
<Mul 2 <Mul 1 <Fact-Aux <Y Fact-Aux> <Dec 1>>>>
<Mul 2 <Mul 1 <Fact-Aux { e.Arg = <Fact-Aux <Y Fact-Aux> e.Arg>;} <Dec 1>>>>
<Mul 2 <Mul 1 <Fact-Aux { e.Arg = <Fact-Aux <Y Fact-Aux> e.Arg>;} 0>>>
<Mul 2 <Mul 1 1>>
<Mul 2 1>
2

Y {
  s.Func = <bind-left lambda1 s.Func>;
}

lambda1 {
  s.Func e.Arg = <s.Func <Y s.Func> e.Arg>;
}

<Fact 2>
<Y Fact-Aux 2>
<<bind-left labmda1 Fact-Aux> 2>
<lambda1{ Fact-Aux } 2>
<lambda1 Fact-Aux 2>
<Fact-Aux <Y Fact-Aux> 2>
<Fact-Aux <bind-left lambda1 Fact-Aux> 2>
<Fact-Aux lambda1{ Fact-Aux } 2>
<Mul 2 <lambda1{ Fact-Aux } <Dec 2>>>
<Mul 2 <lambda1{ Fact-Aux } 1>>
<Mul 2 <lambda1 Fact-Aux 1>>
<Mul 2 <Fact-Aux <Y Fact-Aux> 1>>
<Mul 2 <Fact-Aux <bind-left lambda1 Func-Aux> 1>>
<Mul 2 <Fact-Aux lambda1{ Fact-Aux } 1>>
<Mul 2 <Mul 1 <lambda1{ Fact-Aux } <Dec 1>>>>
<Mul 2 <Mul 1 <lambda1{ Faxt-Aux } 0>>>
<Mul 2 <Mul 1 <lambda1 Fact-Aux 0>>>
<Mul 2 <Mul 1 <Fact-Aux <Y Fact-Aux> 0>>>
<Mul 2 <Mul 1 <Fact-Aux <bind-left lambda1 Fact-Aux> 0>>>
<Mul 2 <Mul 1 <Fact-Aux lambda1{ Fact-Aux } 0>>>
<Mul 2 <Mul 1 1>>
<Mul 2 1>
2


Y {
  s.Func =
    {
      e.Arg = <s.Func <Y s.Func> e.Arg>;
    };
}

Fact {
  0 = 1;

  s.Number =
    <
      <Y {
        s.Loop s.Product s.Number =
          <Mul s.Product s.Number>;

        s.Loop s.Product s.Iter =
          <s.Loop
            <Mul s.Product s.Iter> <Inc s.Iter>
          >;
      }>
      1 1
    >;
}

Y {
  s.Func = <bind-left lambda1 s.Func>;
}

lambda1 {
  s.Func e.Arg = <s.Func <Y s.Func> e.Arg>;
}

Fact {
  0 = 1;

  s.Number =
    <<Y <bind-left lambda2 s.Number>> 1 1>;
}

lambda2 {
  s.Number s.Loop s.Product s.Number =
    <Mul s.Product s.Number>;

  s.Number s.Loop s.Product s.Iter =
    <s.Loop
      <Mul s.Product s.Iter> <Inc s.Iter>
    >;
}

<Fact 3>
<<Y <bind-left lambda2 3>> 1 1>
<<Y lambda2{ 3 }> 1>
<<bind-left lambda1 lambda2{ 3 }> 1 1>
<lambda1{ lambda2 { 3 } } 1 1>
<lambda1 lambda2{ 3 } 1 1>
<lambda2{ 3 } <Y lambda2{ 3 }> 1 1>
<lambda2{ 3 } <bind-left lambda1 lambda2{ 3 }> 1 1>
<lambda2{ 3 } lambda1{ lambda2{ 3 } } 1 1>
<lambda2 3 lambda1{ lambda2{ 3 } } 1 1>
<lambda1{ lambda2{ 3 } } <Mul 1 1> <Inc 1>>
<lambda1{ lambda2{ 3 } } 1 2>
<lambda1 lambda2{ 3 } 1 2>
<lambda2{ 3 } <Y lambda2{ 3 }> 1 2>
<lambda2{ 3 } <bind-left lambda1 lambda2{ 3 }> 1 2>
<lambda2{ 3 } lambda1{ lambda2{ 3 } } 1 2>
<lambda2 3 lambda1{ lambda2{ 3 } } 1 2>
<lambda1{ lambda2{ 3 } } <Mul 1 2> <Inc 2>>
<lambda1{ lambda2{ 3 } } 2 3>
<lambda1 lambda2{ 3 } 2 3>
<lambda2{ 3 } <Y lambda2{ 3 }> 2 3>
<lambda2{ 3 } <bind-left lambda1 lambda2{ 3 }> 2 3>
<lambda2{ 3 } lambda1{ lambda2{ 3 } } 2 3>
<lambda2 3 lambda1{ lambda2{ 3 } } 2 3>
<Mul 2 3>
6


---------------------------------------------------------------------

  Y-i {
    s.Func = { e.Arg = <<s.Func <Y-i s.Func>> e.Arg>; };
  }

  Fetch-Y {
    e.Argument s.Function = <<Y-i s.Function> e.Argument>;
  }

  Fact {
    0 = 1;

    s.N =
      <Fetch-Y
        1 1 {
          s.Loop = {
            s.Prod s.N = <Mul s.Prod s.N>;
            s.Prod s.K = <s.Loop <s.Prod s.K> <Inc s.K>>;
          };
        }
      >;
  }

--------------------------------------------------------------------------------
/**
  <Y { s.Loop = { тело }; }> == s.Loop
*/

Y {
  s.Func = { e.Arg = <<s.Func <Y s.Func>> e.Arg>; };
}

/**
  <Y2 { s.Loop1 s.Loop2 = { тело1 } { тело2 }; }> == s.Loop1 s.Loop2
*/
Y2 {
  s.Func =
    { e.Arg1 = <Y2-1 <s.Func <Y2 s.Func>> e.Arg1>; }
    { e.Arg2 = <Y2-2 <s.Func <Y2 s.Func>> e.Arg2>; };
}

Y2-1 { s.Loop1 s.Loop2 e.Arg = <s.Loop1 e.Arg>;
Y2-2 { s.Loop1 s.Loop2 e.Arg = <s.Loop2 e.Arg>;

(define (Y func)
  (lambda arg
    (apply (func (Y func)) arg)
  )
)

(define (Y2 func)
  (list
    (lambda arg
      (Y2-1 (Y2 func) arg)
    )
    (lambda arg
      (Y2-2 (Y2 func) arg)
    )
  )
)

(define (Y2-1 funcs arg) (apply (car funcs) arg))
(define (Y2-2 funcs arg) (apply (car (cdr funcs)) arg))

(define (fact n)
  ((Y
    (lambda (loop)
      (lambda (x acc) (loop (- x 1) (* acc x)))
    )
  )
  n 1)
)

ChAB-Q-G {
  s.A s.B s.Q e.Expr =
    <
      { s.Loop1 s.Loop2 e.Arg = <s.Loop1 e.Arg>; }
      <Y2 {
        s.ChAB s.Quotted =
          {
            s.A e.Tail = s.B <s.ChAB e.Tail>;
            s.Q e.Tail = s.Q <s.Quotted e.Tail>;
            s.Other e.Tail = s.Other <s.ChAB e.Tail>;
            = ;
          }
          {
            s.Q e.Tail = <s.ChAB e.Tail>;
            s.Other e.Tail = <s.Quotted e.Tail>;
            = ;
          };
      }>
      e.Expr
    >;
}

(define (chAB-Q-G a b q list)
  ((car (Y2
      (lambda (chAB-Q quotted)
        (lambda (list)
          (if (null? list)
            '()
            (if (eq? (car list) q)
              (cons q (quotted (cdr list)))
              (if (eq? (car lst) a)
                (cons b (chAB-Q (cdr list)))
                (cons (car list) (chAB-Q (cdr list)))))))
        (lambda (list)
          (if (null? list)
            '()
            (if (eq? (car list) q)
              (cons q (chAB-Q (cdr list)))
              (cons (car list) (quotted (cdr list)))))))))))

Yn {
  s.N =
    {
      s.Func =
        <
          <Y
            {
              s.Next-K =
                {
                  s.N = /* пусто */;

                  s.K =
                    {
                      e.Arg-K =
                        <Select-K (s.K <s.Func <<Yn s.N> s.Func>>) e.Arg>
                    }
                    <s.Next-K <Inc s.K>>;
                };
            }
          >
          0
        >;
    };
}

Select-K {
  (0 s.Func e.OtherFuncs) e.Arg = <s.Func e.Arg>;

  (s.K s.Func e.OtherFuncs) e.Arg =
    <Select-K (<Dec s.K> e.OtherFuncs) e.Arg>;
}

(define (Yn N)
 (lambda (func)
  (
   (Y
    (lambda (next-k)
     (lambda (k)
      (if (eq? N k)
       '()
       (cons
        (lambda arg-k
         (select-k k (func ((Yn N) func)) arg-k))
        (next-k (+ k 1)))))))
   0)))

(define (select-k k funcs arg)
 (if (eq? k 0)
   (apply (car funcs) arg)
   (select-k (- k 1) (cdr funcs) arg)
 )
)

