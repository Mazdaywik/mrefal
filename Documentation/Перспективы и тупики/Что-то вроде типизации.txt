$FORMAT* Map
	s< t.Left => e<t.Right> > e<t.Left> => e<t.Right>;
$BODY
	s.FnConv e.Elems
		= e.Elems =>
		$func Loop {
			t.Next e.Tail =
				<s.FnConv t.Next> <Loop e.Tail>;

			= ;
		}

$FORMAT* Reduce
	s< t.Acc t.Elem => t.Acc > t.Acc e<t.Elem> => t.Acc;
$BODY
	s.Conv t.Acc e.Elems
		= t.Acc e.Elems =>
		$func Loop {
			t.Acc = t.Acc;

			t.Acc t.Next e.Tail =
				<Loop <s.Conv t.Acc t.Next> e.Tail>;
		}


$FORMAT Create e.FileName => t<Lexer>;

$FORMAT Destroy t<Lexer> => ;

$FORMAT NextToken
	t<Lexer> => t<Lexer> t<(s.TokType t<StrPos> e.TokInfo)>;

$FORMAT* Tokens
	(e<char>.FileName) e< (e<char>) >.Lines =>
		e< (s.TokType t<StrPos> e.Info) >.Tokens;
$BODY
	(e.FileName) e.Lines =
		<MakeEOF
			<Map
				{ (s.Type s<num>.LnNum e.Info) =
					(s.Type <MakeSrcPos s.LnNum e.FileName> e.Info);
				}
				<Map &TokLine
					<NumerateLines e.Lines>
				>
			>
		>;

MakeEOF
	e.Tokens (EOF t.SrcPos) =
	e.Tokens =>
		$func UnEOL {
			e.Tokens-B (EOL t.ScrPos) e.Tokens-E =
				e.Tokens-B <UnEOL e.Tokens-E>;

			e.Tokens = e.Tokens;
		}

$FORMAT TokLine
	(s<num>.LnNumber e<char>.Line) =>
		e< (s.TokType s<num>.LnNumber e.Info) >;
$BODY
	(s.LnNum e.Line) =
		<Map
			{ (s.TokType e.Info) = (s.TokType s.LnNum e.Info); }
			<ParseLine e.Line>
		>;

$FORMAT NumerateLines e< (e<char>) > => e< (s<num> e<char>) >;

$FORMAT ParseLine e<char> => e<(s.TokType e.Info)>;
$BODY {
	'<' e.Tail = (OpenCall) <ParseLine e.Tail>;
	...
	v.Other =
		(<Digits>) v.Other =>
		{
			(e.Dig-B s.Dig e.Dig-E) s.Dig e.Tail =
				(<Digits>) (s.Dig) e.Tail =>
				$func MakeNumber {
					(e s.Dig e) (e.Found) s.Dig e.Tail =
						<MakeNumber (e.Digits) (e.Found s.Dig) e.Tail>;

					(e) (e.Found) e.Tail =
						(Number <MStrings::Num e.Found>)
						<ParseLine e.Tail>;
				};

			(e.Digits) v^Other = (<UpLetters> '?!') v.Other =>
			{
				(e s.Init e) s.Init e.Tail = (<NameChars>) (s.Init) e.Tail =>
				и т.д.
			}
		}

	= (EOL);
}

Digits = '0123456789';


$DATA* MaybeX[e.FmtValid,e.FmtError] {
	Success* e.Fmt;
	Error* e.FmtError
}

$DATA* SymTable {
	[SymTable
		e<(
			(e<char>.Name)
			e<( s<name>.Attrib e.Value )
		)>
	];
}

/**
	<GetAttrib t.SymTable e.Name s.Attrib>
		== t.SymTable [Success e.Value]
		== t.SymTable [Error s.Error]

	s.Error ::= NoName | NoAttrib
*/
$FORMAT GetAttrib
	t<SymTable> e<char>.Name e<name>.Attrib =>
		t<SymTable> t< MaybeX[e.Value, s<name>.Error] >;
$BODY {
	t.SymTable e.Name s.Attrib = t.SymTable =>
	{
		[SymTable
			e.Names-B
			( (e.Name) e.Att-B (s.Attrib e.Value) e.Att-E )
			e.Names-E
		] =
			[Success e.Value];

		[SymTable e.Names-B ( (e.Name) e.Attribs ) e.Names-E ] =
			[Error NoAttrib];

		t^SymTable = [Error NoName];
	} :: t.Result = t.SymTable t.Result;
		
}

$FORMAT UpdateAttrib
	t<SymTable> (e<chars>.Name) s<name>.Attrib e.NewValue =>
		t<SymTable>;
$BODY
	t.SymTable (e.Name) s.Attrib e.NewValue = t.SymTable =>
	{
		[SymTable e.Names-B ((e.Name) e.Attribs) e.Names-E] =
			e.Attribs =>
			{
				e.Attribs-B (s.Attrib e.OldValue) e.Attribs-E =
					e.Attribs-B (s.Attrib e.NewValue) e.Attribs-E;

				e.Attribs = e.Attribs (s.Attrib e.NewValue);
			} :: e.NewAttribs =
				[SymTable e.Names-B ((e.Name) e.NewAttribs) e.Names-E];

		[SymTable e.Names] =
			[SymTable e.Names ((e.Name) (s.Attrib e.NewValue))];
	}

$INTERFACE Number {
	Add t<Number> t<Number> => t<Number>;
	Sub t<Number> t<Number> => t<Number>;
	Mul t<Number> t<Number> => t<Number>;
}

$INSTANCE num :: Number {
	$CONST Add = Math.Add;
	$CONST Sub = Math.Sub
	$CONST Mul = Math.Mul;
}

$DATA Complex[ t<Number>.Base ] =
	[Cplx
		t.Base // Real
		t.Base // Image
	];

$INSTANCE Complex :: Number {
	Add {
		[Cplx t.Real1 t.Imag1] [Cplx t.Real2 t.Imag2] =
			[Cplx <Add t.Real1 t.Real2> <Add t.Imag1 t.Imag2];
	}

	Mul {
		[Cplx t.Real1 t.Imag1] [Cplx t.Real2 t.Imag2] =
			[Cplx
				<Sub <Mul t.Real1 t.Real2> <Mul t.Imag1 t.Imag2>>
				<Add <Mul t.Real1 t.Imag2> <Mul t.Imag1 t.Real2>>
			];
	}
}

$FORMAT Adds e<Number> => t<Number>;
$BODY {
	t.X = t.X
	t.X t.Y = <Add t.X t.Y>;
	t.X t.Y e.Tail =
		<Reduce &Add <Add t.X t.Y> e.Tail>;
}

$FORMAT Polynom
	t<Number>.A t<Number>.B t<Number>.C t<Number>.X =
		t<Number>.Y;
$BODY
	t.A t.B t.C t.X =
		<Adds <Mul <Mul t.A t.X> t.X> <Mul t.B t.X> t.C>;

Calc1 = <Polynom 1 2 3 4>;

C s.X s.Y = [Cplx s.X s.Y];

Calc2 = <Polynom <C 1 2> <C 3 4> <C 5 6> <C 7 8>>;

$INIT <G_Handles 1 2 3 4 5 6>;

$DATA* AssocAttTable[e.Indexer] =
	[AAT
		e<( (e.Indexer) e<(s<name>.Attrib e.Value)>.Attribs )>.Info
	];
