    Добавление АТД в Модульный Рефал.

  Мотивация. При программировании на Рефале я активно использую идиому абстрактного типа данных:
некоторые сущности, мыслимые как самостоятельный объект с чётко определёнными операциями (табли-
ца символов, файл ввода/вывода, контекст, список ошибок) реализуются в виде скобочных термов, внутрен-
нее представление которых известно только одному модулю. Остальные модули для работы с этими сущнос-
тями вызывают соответствующие "методы" доступа. Например, существует модуль, отвечающий за таблицу
символов. Модуль, реализующий таблицу символов, имеет функцию Create для создания этого терма, AddName
для добавления имени в эту таблицу, Destroy для уничтожения этого терма (в принципе, особо он не
нужен, но теоретически может отловить ошибки (ещё ни одной таким образом не отловилось, но всё таки)
и позволяет явно документировать уничтожение сущности -- когда она уже не нужна).
  Для надёжности можно в подобные термы добавлять "тег типа", типа (SymTable e.Content). Это отлав-
ливает ошибки, возникающие вследствие неверных данных (были случаи).
  Использование идиомы АТД позволяет (1) упростить отладку, т.к. обратить в неверное состояние могут
только методы доступа к содержимому и (2) упростить модификацию программы, т.к. для изменения внутрен-
него представления структуры данных требуется модификация только одного модуля.

  Языковая поддерка может быть осуществлена с помощью АТД-термов. АТД-терм в Модульном Рефале --
это скобочный терм специального вида, доступ к содержимому которого возможен только из модуля, его
породившего. Таким образом, содержимое терма инкапсулировано в модуле. Возможный синтаксис для этого:

  $MODULE MSymTable;

  $IMPORT MError;

  $DATA SymTable;

  /**
    <Create> == t.SymTable
  */
  $ENTRY Create
    = [ SymTable ];

  /*
    <Destroy t.SymTable> == empty
  */
  $ENTRY Destroy
    [ SymTable e.Names ] = ;

  /*
    <AddName t.SymTable e.Name>
      == t.UpdatedSymTable
  */
  $ENTRY AddName {
    [ SymTable e.Names-B (e.Name) e.Names-E ] e.Name =
      <MError::Error e.Name ' -- identifier redeclared'>;

    [ SymTable e.Names ] e.Name =
      [ SymTable e.Names (e.Name) ];
  }

  $END MSymTable.

  $MODULE MOtherModule;

  $IMPORT MSymTable, MError;

  $ENTRY F0 = <F2 ('Some bracket term')>;

  $ENTRY F1 = <F2 <MSymTable::Create> >;

  F2 {
    t[MSymTable::SymTable]SymTable =
    // t:MSymTable::SymTable.SymTable =
      <MSymTable::AddName t.SymTable 'Name'>;

    t.OtherTerm = <MError::Error 'Expected symtable term'>;
  }

  $ENTRY F3 = <F4 <MSymTable::Create> >;

  $ENTRY F5 = <F4 ('Some bracket term')>;

  F4 t.SymTable = <MSymTable::AddName t.SymTable 'May be error'>;

  $END MOtherModule.

  Т.е. для использования АТД-терма, нужно объявить абстрактный тип данных (использована в примере
директива $DATA, хотя можно использовать и любую другую). Синтаксис доступа к содержимому абстрактно-
го терма из "родного" модуля:

  [ Имя-АТД-типа e.Content ]

  В образцовом выражении это интерпретируется как сопоставление терма с образцом, в результатном
выражении -- как порождение нового терма.
  Для работы с абстрактным термом вне "родного" модуля следует использовать t-переменную. Можно
организовать проверку типа со следующим синтаксисом: t[ тип ]имя-переменной. Или же в стиле диалекта
Refal Java: t:тип.имя-переменной. Но и тот, и другой синтаксис выглядит некрасиво. Можно было бы
организовать форматы функций, как это сделано в Refal+, но для этого необходимо реализовать поддержку
форматов функций. При сопоставлении с переменной t[тип]имя тип терма должен совпадать с типом, ука-
занным в скобках. В противном случае считается сопоставление неуспешным, и управление переходит к
следующему выражению.

  Возможная реализация в рамках конвертера в Рефал-5. Доступ к содержимому в виде

  [ ИмяТипа e.Content ]

можно компилировать в

  ( ИмяМодуля::ИмяТипа::ATD e.Content )

При этом в ходе компоновки ИмяМодуля::ИмяТипа::ATD должно заменяться в некоторый уникальный иденти-
фикатор вроде A73. Проверку терма на соответствие типу можно компилировать аналогичным путём:

  t[ ModuleName::TypeName ]VariableName

компилируется в

  ( ModuleName::TypeName::ATD e.VariableName )

которое аналогичным образом преобразуется в процессе линковки.