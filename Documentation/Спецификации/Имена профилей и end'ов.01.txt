  Данная спецификация описывает общую структуру исходных текстов и детали архитектуры Модульного
Рефала в аспекте использования нескольких front- и back-end'ов и объединения последних в профили.
  Этот текстовый файл содержит определения понятий, общую схему наименования и некоторые особен-
ности структуры исходных текстов. Конкретные имена профилей и end'ов, а также их свойства (папки
и расширения файлов) перечислены в отдельном файле "Имена профилей и end'ов — списки.txt".

  Как описано в спецификации "Поиск исходников.txt", модуль с точки зрения компилятора представля-
ет собой не более чем один исходный файл и весь набор выходных (промежуточных) файлов. Если файл
исходного текста отсутствует, то модуль считается библиотечным. В случае наличия файла исходного
текста, он должен быть загружен и на его основе должны быть созданы выходные (промежуточные) фай-
лы. Существует ряд эмпирических правил, позволяющих не обновлять промежуточные файлы. В дальней-
шем на основе промежуточных файлов создаются (но могут и не создаваться) один или несколько целе-
вых файлов. Для вышеописанного процесса введём несколько определений. Ряд понятий, например, по-
нятие модуля и проекта, здесь не определяются. Их определения следует смотреть в спецификации
"Концепция модулей для Модульного Рефала.txt".

  Целевыми файлами называются файлы, создаваемые компилятором в результате обработки проекта. Как
правило, это исполнимые файлы (самостоятельные исполнимые файлы или динамические библиотеки), со-
держащие как двоичный машинный код целевой платформы, так и интерпретируемый код. Поскольку целью
запуска компилятора является получение исполнимой программы, эти файлы называются целевыми. Но как
целевые файлы могут создаваться и неисполняемые файлы, содержащие некоторую информацию обо всём
проекте. Например, это может быть таблица перекрёстных связей, список нескомпонованных функций
(если в этом списке присутствуют библиотечные функции, то не страшно, а если пользовательские, то
это или старый нерелевантный код или ошибка в программе) или любой другой файл, содержащий инфор-
мацию обо всём проекте (например, какая-нибудь таблица символов для отладчика).

  Промежуточными (выходными) файлами называются те файлы, представляющие модуль, на основе которых
создаётся целевой файл. Это могут быть объектные файлы, файлы исходного текста, написанные на импе-
ративном языке, файлы с информацией о межмодульных связях, содержащие сведения об экспортируемых
программных сущностях и список импортируемых модулей (чтобы можно было на основе модуля сформиро-
вать гроздь без анализа файла исходного текста, например если это библиотечный модуль не содержащий
последнего или на основе эвристических признаков известно, что анализировать файл исходного текста
не нужно), а также файлы, аккумулирующие информацию о модуле, чтобы затем на их основе создать це-
левой файл с информацией обо всём проекте (например, таблицу перекрёстных связей).
  В этом документе такие файлы будут называться промежуточными, в спецификации "Поиск исходников\
.txt" они называются выходными.

  Процесс построения целевого файла из промежуточных здесь называется компоновкой (линковкой), при
этом предполагается, что каждый целевой файл (иногда набор целевых файлов) строится на основе набо-
ра однородных (имеющих одинаковое расширение и находящихся в подпапках MP-каталогов с одинаковыми
именами). Компоновка не обязательно должна выполняться средствами одного только Модульного Рефала,
в процессе компоновки могут вызываться и сторонние компоновщики и компиляторы. Например, если про-
межуточными файлами являются файлы на языке Си++, то для получения целевого файла будет вызываться
компилятор Си++.

  Файлом исходного текста называется один из файлов, представляющих собой модуль, на основе которо-
го можно создать остальные (выходные, промежуточные) файлы, представляющие собой модуль. Непосред-
ственно из исходных файлов невозможно создать целевой файл.

  Процесс преобразования файла исходного текста в промежуточный файл здесь называется компиляцией.
Из соображений модульности архитектуры компиляция разделена на две фазы: анализ, в результате кото-
рого на основе файла исходного текста формируется промежуточное представление в памяти компилятора
и синтез, в результате которого на основе промежуточного представления формируется промежуточный
файл. Если в результате анализа (который включает не только лексический и синтаксический анализ, но
и проверку межмодульных связей) в исходном тексте обнаружены ошибки, то синтез, а также компоновка
не выполняется.

  Front-end'ом называется часть компилятора, формирующая на основе файла исходного текста на кон-
кретном входном языке промежуточное представление. С каждым front-end'ом ассоциируется расширение
исходных текстов, написанных на этом языке, что позволяет различать разные входные языки и выбирать
для них соответствующий front-end (см. "Поиск исходников.txt").

  Back-end'ом называется совокупность из двух частей компилятора. Первая часть осуществляет генера-
цию промежуточного файла из промежуточного представления, вторая — из набора промежуточных файлов,
формируемых первой частью или написанных вручную (для некоторых библиотечных модулей) создаёт один
или несколько целевых файлов. С каждым back-end'ом ассоциируется подкаталог, в котором располагают-
ся промежуточные файлы и расширение этих промежуточных файлов (см. "Поиск исходников.txt"). Исполь-
зование не только расширений, но и каталогов, выполняет две задачи: (а) позволяет не путать проме-
жуточные файлы, если расширение строго фиксировано, например, если целевые файлы на Си++ создаются
разными способами и несовместимы между собой, (б) позволяет не засорять каталог с исходными текста-
ми промежуточными файлами, что облегчает работу программиста.
  Примечание. Создание файлов межмодульных связей осуществляется при помощи специального back-
end'а. Особенностью этого back-end'а является то, что важностью обладают только промежуточные фай-
лы, построение целевого файла не имеет смысла. Поэтому данный back-end не порождает целевой файл.

  Профилем называется совокупность back-end'ов, используемая во время работы компилятора. Профиль
формирует тот набор выходных (промежуточных) файлов, который формирует модуль. Дело в том, что соз-
дание файлов межмодульных связей, необходимых для проведения компиляции осуществляется соответству-
ющим back-end'ом. Кроме того, часто удобно параллельно с созданием исполнимого файла, создавать и
таблицу перекрёстных связей. Однако, совмещать можно не любые наборы back-end'ов, при компиляции
разными back-end'ами могут требоваться различные наборы библиотек и в результате компиляция завер-
шится неудачей (например, некоторые модули могут быть не найдены или не найдены экспортируемые фун-
кции некоторых модулей). Более того, возможна разработка, например, способа создания исполнимых
файлов с использованием компилятора Си++, построенного на двух back-end'ах: для генерации .cpp и
.h-файлов. Очевидно, использовать их врозь бессмысленно (без генерации заголовочных файлов могут
не компилироваться файлы реализации, генерация одних только заголовочных файлов вообще бессмыслен-
на).
  Поэтому в пользовательском интерфейсе присутствует только возможность выбрать профиль и в некото-
рых пределах сконфигурировать его (например, включить и выключить генерацию таблиц перекрёстных
ссылок).
  В профиле как правило выделяется один back-end, используемый для создания целевого исполнимого
файла
  (конец определений)

  Текущая реализация требует приписывать внутренние имена (идентификаторы) отдельным профилям и
back-end'ам, чтобы обращаясь по ним, извлекать из объекта конфигурации требуемые сведения. Ниже
приводятся правила, определяющие внутренние имена (для краткости названы "именами"), внешние имена
(доступные через пользовательский интерфейс), каталоги промежуточных файлов и расширения промежу-
точных и исходных файлов. Написаны они из соображения упорядочивания и систематизации внутренней
структуры проекта.

  1. Имена front-end'ов имеют префикс FE-, имена back-end'ов — BE-.
  2. Имена профилей определяются именами основных back-end'ов, только вместо префикса BE- исполь-
зуется префикс Pr-.
  3. Каталоги промежуточных файлов определяются именем back-end'а, но без префикса BE-, но допуска-
ются исключения.
  4. Расширения для каждого back-end'а определяются индивидуально.
  5. Внешние имена end'ов и профилей (указываемые в командной строке) совпадают с внутренними име-
нами с тем отличием, что они не содержат префиксов. Внешние имена профилей могут содержать псевдо-
нимы (как и раньше).
  6. В журнале для называния end'ов и профилей следует использовать внутреннее имя. Префикс можно
опускать, если по контексту понятно, о чём идёт речь: о back-end'е или профиле. Кроме того, в свод-
ной таблице end'ов приведена графа синонимов. Синонимы могут совпадать с другими понятиями, поэтому
их можно и следует использовать в таком контексте, когда понятно, что речь идёт об end'е или профи-
ле. Например, back-end и профиль Простого Рефала (порождающий исходные тексты на этом диалекте)
не следует путать с компилятором Простого Рефала, который вызывается на стадии компоновки в упомя-
нутом профиле. Если же фразу не удаётся построить однозначным образом, то следует использовать
внутреннее имя, в данном примере SimRef (BE-SimRef или Pr-SimRef).
  7. В структуре исходных текстов каждому end'у соответствует отдельный пакет, совпадающий с его
внутренним именем с префиксом (префиксы, в отличие от суффиксов, способствуют тому, что при сорти-
ровке имён файлов по имени по умолчанию пакеты back- и front-end'ов не будут перемешаны между со-
бой и другими пакетами). Внутри пакета должен обязательно присутствовать модуль MInit, содержащий
функцию регистрации end'а в объекте конфигурации.
  7а. Если реализация back-end'а содержит отдельные модули, производящие генерацию промежуточных и
целевых файлов (точнее, содержащие эти функции, регистрируемые в MInit), то они должны иметь имена
MCompiler и MLinker. Если указанный функционал совмещается в одном модуле, то он должен иметь имя
MBackEnd.
  7б. Рекомендуется, чтобы модули верхнего уровня front-end'а, реализующие лексический и синтакси-
ческий анализ, имели имена MLexer и MParser. Под верхним уровнем синтаксического анализа здесь под-
разумевается построение промежуточного представления.