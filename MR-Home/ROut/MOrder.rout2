MOrder::SwMerge::Local {
	'>' ( Structure e.Series1 ) ( Structure t.First2 e.Series2 ) =
		t.First2 <MOrder::Merge::Local ( Structure e.Series1 ) ( Structure e.Series2 ) > ;
	s.Other ( Structure t.First1 e.Series1 ) ( Structure e.Series2 ) =
		t.First1 <MOrder::Merge::Local ( Structure e.Series1 ) ( Structure e.Series2 ) > ;
}

MOrder::Merge::Local {
	( Structure t.First1 e.Series1 ) ( Structure t.First2 e.Series2 ) =
		<MOrder::SwMerge::Local <MOrder::Compare::Entry t.First1 t.First2 > ( Structure t.First1 e.Series1 ) ( Structure t.First2 e.Series2 ) > ;
	( Structure e.Series1 ) ( Structure e.Series2 ) =
		e.Series1 e.Series2 ;
}

MOrder::MergeAdjacentPairs::Local {
	( Structure e.Series1 ) ( Structure e.Series2 ) e.Tail =
		( Structure <MOrder::Merge::Local ( Structure e.Series1 ) ( Structure e.Series2 ) > ) <MOrder::MergeAdjacentPairs::Local e.Tail > ;
	( Structure e.Series ) =
		( Structure e.Series ) ;
	=
		;
}

MOrder::MergePairs::Local {
	( Structure e.Series ) =
		e.Series ;
	e.Series =
		<MOrder::MergePairs::Local <MOrder::MergeAdjacentPairs::Local e.Series > > ;
}

MOrder::CreateSeries::Local {
	t.Elem e.Tail =
		( Structure t.Elem ) <MOrder::CreateSeries::Local e.Tail > ;
	=
		;
}

MOrder::Sort::Entry {
	e.Sequence =
		<MOrder::MergePairs::Local <MOrder::CreateSeries::Local e.Sequence > > ;
}

MOrder::Lexicon::Local {
	( Structure t.First e.Expr1 ) ( Structure t.First e.Expr2 ) =
		<MOrder::Lexicon::Local ( Structure e.Expr1 ) ( Structure e.Expr2 ) > ;
	( Structure t.First1 e.Expr1 ) ( Structure t.First2 e.Expr2 ) =
		<MOrder::Compare::Entry t.First1 t.First2 > ;
	( Structure ) ( Structure t.First2 e.Expr2 ) =
		'<' ;
	( Structure t.First1 e.Expr1 ) ( Structure ) =
		'>' ;
	( Structure ) ( Structure ) =
		'=' ;
}

MOrder::SwSymbCompare::Local {
	( Structure Char s.Chr1 s.Ord1 ) ( Structure Char s.Chr2 s.Ord2 ) =
		<Math::Compare::Entry s.Ord1 s.Ord2 > ;
	( Structure Macro s.Num1 ) ( Structure Macro s.Num2 ) =
		<Math::Compare::Entry s.Num1 s.Num2 > ;
	( Structure Other s.Symb1 ) ( Structure Other s.Symb2 ) =
		'=' ;
	( Structure Macro s.Val ) t.Other =
		'>' ;
	t.Other ( Structure Macro s.Val ) =
		'<' ;
	( Structure Char s.Chr s.Ord ) t.Other =
		'>' ;
	t.Other ( Structure Char s.Chr s.Ord ) =
		'<' ;
}

MOrder::CheckMacro::Local {
	s.Symb s.Symb =
		( Structure Other s.Symb ) ;
	s.Symb s.Value =
		( Structure Macro s.Symb ) ;
}

MOrder::CheckChar::Local {
	s.Symb s.Symb =
		<MOrder::CheckMacro::Local s.Symb <Refal5::Chr::Entry s.Symb > > ;
	s.Symb s.Numb =
		( Structure Char s.Symb s.Numb ) ;
}

MOrder::Type-T::Local {
	s.Symb =
		<MOrder::CheckChar::Local s.Symb <Refal5::Ord::Entry s.Symb > > ;
}

MOrder::SymbCompare::Local {
	s.Left s.Right =
		<MOrder::SwSymbCompare::Local <MOrder::Type-T::Local s.Left > <MOrder::Type-T::Local s.Right > > ;
}

MOrder::Compare::Entry {
	t.Val t.Val =
		'=' ;
	s.Left s.Right =
		<MOrder::SymbCompare::Local s.Left s.Right > ;
	( Structure e.Left ) s.Right =
		'>' ;
	s.Left ( Structure e.Right ) =
		'<' ;
	( Structure e.Left ) ( Structure e.Right ) =
		<MOrder::Lexicon::Local ( Structure e.Left ) ( Structure e.Right ) > ;
}

MOrder::Compare-T::Entry {
	t.Left t.Right =
		<MOrder::Compare::Entry t.Left t.Right > t.Left t.Right ;
}

