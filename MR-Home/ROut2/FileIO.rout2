FileIO::G_Handles::Swap {
	e.NewValue =
		<Dg ('FileIO::G_Handles')>
		<Br ('FileIO::G_Handles') '=' e.NewValue >;
}

FileIO::DoSave::Local {
	t.File ( Structure e.NextLine ) e.Tail =
		<FileIO::DoSave::Local <FileIO::WriteLine::Entry t.File e.NextLine > e.Tail > ;
	t.File =
		<FileIO::NulClose::Entry t.File > ;
}

FileIO::Save::Entry {
	( Structure e.FileName ) e.Content =
		<FileIO::DoSave::Local <FileIO::Open::Entry 'w' e.FileName > e.Content > ;
}

FileIO::DoLoad::Local {
	t.File 0 =
		<FileIO::NulClose::Entry t.File > ;
	t.File e.Line 0 =
		( Structure e.Line ) <FileIO::NulClose::Entry t.File > ;
	t.File e.Line =
		( Structure e.Line ) <FileIO::DoLoad::Local <FileIO::ReadLine::Entry t.File > > ;
}

FileIO::Load::Entry {
	e.FileName =
		<FileIO::DoLoad::Local <FileIO::ReadLine::Entry <FileIO::Open::Entry 'r' e.FileName > > > ;
}

FileIO::ExtractFileName::Entry {
	( Structure s.Handle e.FileName ) =
		( Structure s.Handle e.FileName ) e.FileName ;
}

FileIO::WriteLine-T::Entry {
	( Structure s.Handle e.FileName ) e.Line =
		( Structure s.Handle e.FileName ) <MRefalRTS::Putout::Entry s.Handle e.Line > e.Line ;
}

FileIO::WriteLine::Entry {
	( Structure s.Handle e.FileName ) e.Line =
		( Structure s.Handle e.FileName ) <MRefalRTS::Putout::Entry s.Handle e.Line > ;
}

FileIO::ReadLine::Entry {
	( Structure s.Handle e.FileName ) =
		( Structure s.Handle e.FileName ) <MRefalRTS::Get::Entry s.Handle > ;
}

FileIO::NulClose::Entry {
	( Structure s.Handle e.FileName ) =
		<MRefalRTS::Open::Entry 'r' s.Handle 'nul' > <FileIO::ReleaseHandle::Local s.Handle > ;
}

FileIO::Close::Entry {
	( Structure s.Handle e.FileName ) =
		<MRefalRTS::Open::Entry 'r' s.Handle e.FileName > <FileIO::ReleaseHandle::Local s.Handle > ;
}

FileIO::SwOpen::Local {
	None s.Mode e.FileName =
		<MSelfDiag::Error::Entry 'Can\'t open file ' e.FileName ': no free handles' > ;
	s.Handle s.Mode e.FileName =
		( Structure s.Handle e.FileName ) <MRefalRTS::Open::Entry s.Mode s.Handle e.FileName > ;
}

FileIO::CheckExistAndOpenForRead::Local {
	True e.FileName =
		<FileIO::SwOpen::Local <FileIO::GetHandle::Local > 'r' e.FileName > ;
	False e.FileName =
		<MSelfDiag::Error::Entry 'Can\'t open file \'' e.FileName '\' for reading' > ;
}

FileIO::Open::Entry {
	'r' e.FileName =
		<FileIO::CheckExistAndOpenForRead::Local <MRefalRTS::ExistFile::Entry e.FileName > e.FileName > ;
	'w' e.FileName =
		<FileIO::SwOpen::Local <FileIO::GetHandle::Local > 'w' e.FileName > ;
	s.OtherMode e.FileName =
		<MSelfDiag::Error::Entry s.OtherMode ' -- unknown open file mode (' 'file \'' e.FileName '\')' > ;
}

FileIO::ReleaseHandle::Local {
	s.Handle =
		<FileIO::G_Handles::Swap <FileIO::G_Handles::Swap > s.Handle > ;
}

FileIO::SwGetHandle::Local {
	=
		None ;
	s.Handle e.OtherHandles =
		s.Handle <FileIO::G_Handles::Swap e.OtherHandles > ;
}

FileIO::GetHandle::Local {
	=
		<FileIO::SwGetHandle::Local <FileIO::G_Handles::Swap > > ;
}

FileIO::Init::Entry {
	=
		<FileIO::G_Handles::Swap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 > ;
}

FileIO::FnPtr::Local {
	G_Handles =
		$FileIO::G_Handles::Swap$ ;
	Init =
		$FileIO::Init::Entry$ ;
	GetHandle =
		$FileIO::GetHandle::Local$ ;
	SwGetHandle =
		$FileIO::SwGetHandle::Local$ ;
	ReleaseHandle =
		$FileIO::ReleaseHandle::Local$ ;
	Open =
		$FileIO::Open::Entry$ ;
	CheckExistAndOpenForRead =
		$FileIO::CheckExistAndOpenForRead::Local$ ;
	SwOpen =
		$FileIO::SwOpen::Local$ ;
	Close =
		$FileIO::Close::Entry$ ;
	NulClose =
		$FileIO::NulClose::Entry$ ;
	ReadLine =
		$FileIO::ReadLine::Entry$ ;
	WriteLine =
		$FileIO::WriteLine::Entry$ ;
	WriteLine-T =
		$FileIO::WriteLine-T::Entry$ ;
	ExtractFileName =
		$FileIO::ExtractFileName::Entry$ ;
	Load =
		$FileIO::Load::Entry$ ;
	DoLoad =
		$FileIO::DoLoad::Local$ ;
	Save =
		$FileIO::Save::Entry$ ;
	DoSave =
		$FileIO::DoSave::Local$ ;
	FnPtr =
		$FileIO::FnPtr::Local$ ;
	MSelfDiag Error =
		$MSelfDiag::Error::Entry$ ;
	MSelfDiag Log =
		$MSelfDiag::Log::Entry$ ;
	MSelfDiag Log-T =
		$MSelfDiag::Log-T::Entry$ ;
	MSelfDiag Assert-Eq-T =
		$MSelfDiag::Assert-Eq-T::Entry$ ;
	MSelfDiag Assert-NE-T =
		$MSelfDiag::Assert-NE-T::Entry$ ;
	MSelfDiag Assert-Eq =
		$MSelfDiag::Assert-Eq::Entry$ ;
	MSelfDiag Assert-NE =
		$MSelfDiag::Assert-NE::Entry$ ;
	MRefalRTS Prout =
		$MRefalRTS::Prout::Entry$ ;
	MRefalRTS Card =
		$MRefalRTS::Card::Entry$ ;
	MRefalRTS Open =
		$MRefalRTS::Open::Entry$ ;
	MRefalRTS Get =
		$MRefalRTS::Get::Entry$ ;
	MRefalRTS Put =
		$MRefalRTS::Put::Entry$ ;
	MRefalRTS Putout =
		$MRefalRTS::Putout::Entry$ ;
	MRefalRTS Arg =
		$MRefalRTS::Arg::Entry$ ;
	MRefalRTS Exit =
		$MRefalRTS::Exit::Entry$ ;
	MRefalRTS ExistFile =
		$MRefalRTS::ExistFile::Entry$ ;
	MRefalRTS ExistFile-T =
		$MRefalRTS::ExistFile-T::Entry$ ;
	MRefalRTS System =
		$MRefalRTS::System::Entry$ ;
	MRefalRTS Env =
		$MRefalRTS::Env::Entry$ ;
	MRefalRTS Upper =
		$MRefalRTS::Upper::Entry$ ;
	MRefalRTS Lower =
		$MRefalRTS::Lower::Entry$ ;
	MRefalRTS Lenw =
		$MRefalRTS::Lenw::Entry$ ;
	MRefalRTS Numb =
		$MRefalRTS::Numb::Entry$ ;
	MRefalRTS Symb =
		$MRefalRTS::Symb::Entry$ ;
	MRefalRTS Ord =
		$MRefalRTS::Ord::Entry$ ;
	MRefalRTS Chr =
		$MRefalRTS::Chr::Entry$ ;
	MRefalRTS Add =
		$MRefalRTS::Add::Entry$ ;
	MRefalRTS Sub =
		$MRefalRTS::Sub::Entry$ ;
	MRefalRTS Compare =
		$MRefalRTS::Compare::Entry$ ;
}

