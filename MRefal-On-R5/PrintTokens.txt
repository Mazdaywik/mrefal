PrintTokens {
	t.Lexer =
		<DoPrintTokens ()()<NextToken t.Lexer>>;
}

DoPrintTokens {
	(e.Out) (e.Tabs) t.Lexer (EndOfText (LineNumber e.LineNumber)) =	
		<CloseLexer t.Lexer>
		<Prout e.Tabs e.Out>
		<Prout '/* End of text at ' e.LineNumber '*/'>;

	(e.Out) (e.Tabs) t.Lexer
	(EVar (LineNumber e.LineNumber) e.VarName) = 
		<DoPrintTokens
			(e.Out 'e' e.VarName ' ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>
		>;

	(e.Out) (e.Tabs) t.Lexer
	(SVar (LineNumber e.LineNumber) e.VarName) = 
		<DoPrintTokens
			(e.Out 's' e.VarName ' ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>
		>;

	(e.Out) (e.Tabs) t.Lexer
	(TVar (LineNumber e.LineNumber) e.VarName) = 
		<DoPrintTokens
			(e.Out 't' e.VarName ' ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>
		>;

	(e.Out) (e.Tabs) t.Lexer
	(Directive (LineNumber e.LineNumber) Entry) = 
		<DoPrintTokens (e.Out '$ENTRY ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Directive (LineNumber e.LineNumber) External) = 
		<DoPrintTokens (e.Out '$EXTERN ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Directive (LineNumber e.LineNumber) Module) = 
		<DoPrintTokens (e.Out '$MODULE ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Directive (LineNumber e.LineNumber) End) = 
		<DoPrintTokens (e.Out '$END ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Directive (LineNumber e.LineNumber) Import) = 
		<DoPrintTokens (e.Out '$IMPORT ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Literal (LineNumber e.LineNumber) e.Content) = 
		<DoPrintTokens
			(e.Out '\'' <Text e.Content> '\' ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>
		>;

	(e.Out) (e.Tabs) t.Lexer
	(DQWord (LineNumber e.LineNumber) e.Content) = 
		<DoPrintTokens
			(e.Out '\"' <Text e.Content> '\" ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>
		>;

	(e.Out) (e.Tabs) t.Lexer
	(LeftBrac (LineNumber e.LineNumber)) = 
		<DoPrintTokens (e.Out '(' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(RigthBrac (LineNumber e.LineNumber)) = 
		<DoPrintTokens (e.Out ') ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(OpenBlock (LineNumber e.LineNumber)) = 
		<Prout e.Tabs e.Out ' {' '/*' e.LineNumber '*/ '>
		<DoPrintTokens () (e.Tabs '\t') <NextToken t.Lexer>>;

	(e.Out) (e.Tabs '\t') t.Lexer
	(CloseBlock (LineNumber e.LineNumber)) = 
		<Prout e.Tabs e.Out '}' '/*' e.LineNumber '*/ '>
		<Prout>
		<DoPrintTokens () (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(OpenFnCall (LineNumber e.LineNumber)) = 
		<DoPrintTokens (e.Out '<' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(CloseFnCall (LineNumber e.LineNumber)) = 
		<DoPrintTokens (e.Out '> ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Replaces (LineNumber e.LineNumber)) = 
		<Prout e.Tabs e.Out '=' '/*' e.LineNumber '*/ '>
		<DoPrintTokens () (e.Tabs '\t') <NextToken t.Lexer>>;

	(e.Out) (e.Tabs '\t') t.Lexer
	(EndSent (LineNumber e.LineNumber)) = 
		<Prout e.Tabs '\t' e.Out ';' '/*' e.LineNumber '*/ '>
		<DoPrintTokens () (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(EndSent (LineNumber e.LineNumber)) = 
		<Prout e.Tabs e.Out ';' '/*' e.LineNumber '*/ '>
		<DoPrintTokens () (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Comma (LineNumber e.LineNumber)) = 
		<DoPrintTokens (e.Out ', ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Ampersand (LineNumber e.LineNumber)) = 
		<DoPrintTokens (e.Out '& ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Colon (LineNumber e.LineNumber)) = 
		<DoPrintTokens (e.Out ':' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(DoubleColon (LineNumber e.LineNumber)) = 
		<DoPrintTokens (e.Out '::' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Dot (LineNumber e.LineNumber)) = 
		<DoPrintTokens (e.Out '.' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Identifier (LineNumber e.LineNumber) e.Ident) = 
		<DoPrintTokens (e.Out e.Ident ' ' '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;

	(e.Out) (e.Tabs) t.Lexer
	(Macro (LineNumber e.LineNumber) s.Macro) = 
		<DoPrintTokens (e.Out s.Macro '/*' e.LineNumber '*/ ' ) (e.Tabs) <NextToken t.Lexer>>;
	(e.Out) (e.Tabs) t.Lexer (s.Name (LineNumber e.LineNumber) e.Content) =
		<Prout e.Tabs e.Out '/*' e.LineNumber '*/ '>
		<Prout '#Unknown term ' (s.Name e.Content) '#'>
		<DoPrintTokens () (e.Tabs) <NextToken t.Lexer>>;
}

Text {
	'\'' e.Tail =
		'\\' '\'' <Text e.Tail>;
	'\"' e.Tail =
		'\\' '\"' <Text e.Tail>;
	'\n' e.Tail =
		'\\n' <Text e.Tail>;
	'\t' e.Tail =
		'\\t' <Text e.Tail>;
	'\\' e.Tail =
		'\\\\' <Text e.Tail>;
	s.Char e.Tail =
		s.Char <Text e.Tail>;
	= ;
}
