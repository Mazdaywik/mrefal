$PROGRAM MRefal;

// Эти модули используются
$IMPORT Compiler;
$IMPORT MContext;
$IMPORT MError;
$IMPORT MLinker;
$IMPORT Modules;
$IMPORT MModules;
$IMPORT MOS;
$IMPORT Math;
$IMPORT MStrings;
$IMPORT MVersion;

$IMPORT MSelfDiag;

// Эти модули должны быть инициализированы
$IMPORT MBackEnd_Refal5_init;
$IMPORT MFrontEnd_MRefal;

$ENTRY Go =
  <MVersion::Show>
  <StartCompiling>;

StartCompiling {
  = <Results
      <MLinker::LinkAll
        <CompileList <MContext::Create> <LoadModuleList> >
      >
    >;
}

Results {
  t.Context Success =
    <MContext::Destroy t.Context>;

  t.Context Fails =
    <MContext::Destroy t.Context>
    <MError::Fatal 'Unknown error'>;
}

LoadModuleList {
  = <DoLoadModuleList () 2 <MOS::Arg 1>>;
}

DoLoadModuleList {
  () 2 =
    <MError::Fatal 'Command line error: use MRefal module1 module2 ...'>;

  (e.Modules) s.NextNumArg =
    e.Modules;

  (e.Modules) s.NextNumArg e.ModuleOrFile =
    <DoLoadModuleList
      (e.Modules <ModuleOrFile e.ModuleOrFile>)
      <Math::Add s.NextNumArg 1>
      <MOS::Arg s.NextNumArg>
    >;
}

ModuleOrFile {
  e.Name = <SwModuleOrFile (<MStrings::Lower e.Name>) e.Name>;
}

SwModuleOrFile {
  ( e.FnameName '.mref' ) e.FnameNameExtCase s.Dot s.M s.R s.E s.F =
    (Module e.FnameNameExtCase);

  ( e.ModNameLower ) e.ModNameCase =
    (Module <Modules::CanonicalModuleName e.ModNameCase>);
}

CompileList {
  t.Context e.Modules
  (Module 'Test+++') (Module e.ModulePath) e.Tests =
    <CompileList
      <Test t.Context (<PrepareMP e.ModulePath>) e.Tests>
      e.Modules
    >;

  t.Context e.Modules =
    <CompileModulesFromList t.Context e.Modules>;
}

PrepareMP
  e.ModulePath =
    <DeleteEmpty
      <DoPrepareMP e.ModulePath>
    >;

DoPrepareMP {
  e.Part ';' e.Tail = (e.Part) <DoPrepareMP e.Tail>;

  e.Part = (e.Part);
}

DeleteEmpty {
  e.Begin () e.End = e.Begin <DeleteEmpty e.End>;

  e.NotEmpty = e.NotEmpty;
}

Test {
  t.hContext (e.ModulePath) (Module e.NextModule) e.Tail =
    <Test
      <ContextOnly
        <MModules::LookupCmdLineModule
          t.hContext (e.ModulePath) e.NextModule
        >
      >
      (e.ModulePath) e.Tail
    >;

  t.hContext (e.ModulePath) = t.hContext;
}

ContextOnly {
  t.hContext NotFound = t.hContext;
}

CompileModulesFromList {
  t.Context (Module e.ModName) e.Modules =
    <CompileModulesFromList
      <Compiler::CompileByModuleName t.Context e.ModName> e.Modules
    >;

  t.Context =
    t.Context;
}

$END MRefal.
