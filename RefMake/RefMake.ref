*$FROM Dir
$EXTERN FileDateTime, CompareDateTime, LongFileName;

$ENTRY Go {
	= <GenerateBats
		<GetModuleList
			<GetStartModuleList>
		>
	>;
}

Nil {
	e.X = ;
}

GenerateBats {
	e.Modules =
		<GenerateCompiler e.Modules>
		<GenerateStarter e.Modules>;
}

GenerateCompiler {
	e.Modules =
		<DoGenerateCompiler e.Modules>;
}

DoGenerateCompiler {
	t.Module e.Tail =
		<CompileIfNeed t.Module>
		<DoGenerateCompiler e.Tail>;
	= ;
}

CompileIfNeed {
	(t.ModName (Source e.SrcName) (Output e.RaslName)) =
		<SwCompileIfNeed-ExistRasl
			<ExistFile e.RaslName>
			(Source e.SrcName)
			(Output e.RaslName)
		>;
}

SwCompileIfNeed-ExistRasl {
	True (Source e.SrcName) (Output e.RaslName) =
		<SwCompileIfNeed-NewSrc
			<CompareDateTime
				<FileDateTime e.SrcName>
				<FileDateTime e.RaslName>
			>
			(Source e.SrcName)
			(Output e.RaslName)
		>;
	False (Source e.SrcName) (Output e.RaslName) =
		<Compile (Source e.SrcName) (Output e.RaslName)>;
}

SwCompileIfNeed-NewSrc {
	'<' (Source e.SrcName) (Output e.RaslName) =
		<Prout '*** No compile ' e.SrcName>;
	s.Other (Source e.SrcName) (Output e.RaslName) =
		<Compile (Source e.SrcName) (Output e.RaslName)>;
}

Compile {
	(Source e.SrcName) (Output e.RaslName) =
		<Prout '*** Compile 'e.SrcName>
		<Nil <System 'refc ' e.SrcName>>
		<Prout '*** 'e.SrcName ' compiled'>;
}

GenerateStarter {
	t.First e.Modules =
		<Open 'w' 1 <AppName t.First>>
		<Write 1
			'@refgo ' <DoGenerateStarter t.First e.Modules>
			' %1 %2 %3 %4 %5 %6 %7 %8 %9'
		>;
}

DoGenerateStarter {
	(e.Info (Output e.RaslName)) =
		e.RaslName;
	(e.Info (Output e.RaslName)) e.Tail =
		e.RaslName '+' <DoGenerateStarter e.Tail>;
	(e.ModInfo) e.Tail =
		<DoGenerateStarter e.Tail>;
	= ;
}

AppName {
	(t.ModName t.SrcName (Output e.RaslName '.' s.R s.S s.L)) =
		e.RaslName '.bat';
}

GetModuleList {
	= <Prout 'Commandline error. Use RefMake reffile...'>
		<Exit 1>;
	e.StartModules = <DoGetModuleList () e.StartModules>;
}

DoGetModuleList {
	/* Следующий модуль отсканирован */
	(e.Scanned-B (t.ModName e.ModInfo1) e.Scanned-E)
	(t.ModName e.ModInfo2) e.NotScanned =
		<DoGetModuleList
			(e.Scanned-B
				(t.ModName e.ModInfo1)
				e.Scanned-E
			) e.NotScanned
		>;

	/* Все модули отсканированы */
	(e.Scanned) = e.Scanned;

	/* Следующий модуль не сканирован */
	(e.Scanned) (e.Next) e.NotScanned =
		<DoGetModuleList
			(e.Scanned (e.Next)) <ScanModule e.Next> e.NotScanned
		>;
}

ScanModule {
	t.ModName (Source e.FileName) e.OtherInfo =
		<Open 'r' 1 e.FileName>
		<DoScanModule () <Get 1> >;
}

ModInfo {
	e.ModName =
		((<Lower e.ModName>)
			(Source e.ModName '.ref')
			(Output e.ModName '.rsl')
		);
}

DoScanModule {
	(e.Found) '*$FROM ' e.ModName =
		<DoScanModule
			(e.Found <ModInfo e.ModName>) <Get 1>
		>;
	(e.Found) e.Line 0 =
		e.Found;
	(e.Found) e.OtherLine =
		<DoScanModule (e.Found) <Get 1>>;
}

GetStartModuleList {
	= <DoGetModuleStartList 2 <Arg 1>>;
}

CheckSrcName {
	e.FileName =
		<SwCheckSrcName
			<ExistFile e.FileName>
			( <Lower e.FileName> )
			e.FileName
		>;
}

SwCheckSrcName {
	True (e.LowName '.ref') e.FileName =
		((e.LowName)
			/* Стремимся сохранить оригинальный регистр букв */
			(Source <LongFileName e.FileName>)
			(Output
				<RaslName <LongFileName e.FileName> >
			)
		);
	False (e.LowName '.ref') e.FileName =
		<Prout 'WARNING: file ' e.FileName ' not found'>;
	s.Result (e.LowName ) e.FileName =
		<CheckSrcName e.FileName '.ref'>;
}

RaslName {
	e.FileName s.dot s.R s.E s.F = e.FileName '.rsl';
}

DoGetModuleStartList {
	s.NextArg = ;
	s.NextArg e.CurArg =
		<CheckSrcName e.CurArg>
		<DoGetModuleStartList <Add s.NextArg 1> <Arg s.NextArg>>;
}