/**
  В данном модуле описывается контекст -- обобщение понятия таблицы
  переменных. Контекст позволяет отслеживать как правильность использования
  переменных (объявленность переменных, используемых в результатном выражении,
  уникальность переменной с данным именем и режимом (s, t или e)), так и
  отслеживать свободные и связанные переменные в данной функции -- собственно
  контекст, передаваемый в замыкания.
*/

$ENUM Context, FreeVarsSent, FreeVarsFunc;
/*
  Внутренняя структура контекста:
  [Context
    e.Variables1 (FreeVarsSent e.FreeSent1) (FreeVarsFunc e.FreeFunc1)
    e.Variables2 (FreeVarsSent e.FreeSent1) (FreeVarsFunc e.FreeFunc2)
    ...
    e.VariablesN (FreeVarsSent) (FreeVarsFunc)
  ]
  e.VariablesK, e.FreeSentK, e.FreeFuncK ::= (s.Mode e.Index)*

  e.VariablesK представляет собой набор связанных переменных -- переменных,
  упоминаемых в образце данного предложения K-го по вложенности тела функции.

  e.Free***K представляет собой набор свободных переменных K-го по вложенности
  тела функции (эти переменные являются повторными для образцового выражения,
  присутсвуют во внешних функциях).

  e.FreeSentK представляет собой список свободных переменных, обнаруженных
  в образцовом выражении данного предложения.

  e.FreeFuncK представляет собой список свободных переменных, обнаруженных
  во всех предыдущих предложениях включительно. По завершении анализа предло-
  жения в e.FreeFuncK должны быть добавлены e.FreeSentK.

  e.Variables1 и e.Free***1 соответствуют самой вложенной функции,
  e.VariablesN -- глобальной функции (для глобальной функции отсутствует
  понятие свободных переменных).
*/

/**
  <Cntx-Create> == t.Context
*/
$ENTRY Cntx-Create {
  = [Context];
}

/**
  <Cntx-Destroy t.Context> == пусто
*/
$ENTRY Cntx-Destroy {
  [Context] = ;
}

$LABEL CSuccess, CInvalidMode;

$FORWARD ShiftVariable;

/**
  <Cntx-AddVariable t.Context s.Mode e.Index>
    == t.Context # CSuccess
    == t.Context # CInvalidMode s.OldMode s.Mode e.Index
*/
$ENTRY Cntx-AddVariable {
  [Context e.Variables-B (s.Mode e.Index) e.Variables-E]
  s.Mode e.Index =
    /*
      Идея тут в том, что если в e.Variables-B имеется хотя бы один
      (Free e.Free), то данная переменная является свободной для текущего
      функционального блока и её надо сохранить в список свободных переменных
      (из-за того, что переменные добавляются слева направо, этот список
      будет самым левым), что, собственно и делает функция ShiftVariable.

      На этот комментарий ссылаются из функции Cntx-CheckVariable.
    */
    [Context
      <ShiftVariable (s.Mode e.Index) e.Variables-B>
      (s.Mode e.Index)
      e.Variables-E
    ]
    # CSuccess;

  [Context e.Variables-B (s.OldMode e.Index) e.Variables-E]
  s.NewMode e.Index =
    [Context e.Variables-B (s.OldMode e.Index) e.Variables-E]
    # CInvalidMode s.OldMode s.NewMode e.Index;

  [Context e.Variables] s.Mode e.Index =
    [Context (s.Mode e.Index) e.Variables] # CSuccess;
}

$FORWARD ShiftVariable-Aux;

ShiftVariable {
  (s.Mode e.Index) e.Variables-B (FreeVarsSent e.Free) e.Variables-E =
    e.Variables-B
    (FreeVarsSent <ShiftVariable-Aux (s.Mode e.Index) e.Free>)
    <ShiftVariable (s.Mode e.Index) e.Variables-E>;

  (s.Mode e.Index) e.Variables = e.Variables;
}

ShiftVariable-Aux {
  (s.Mode e.Index) e.Variables-B (s.Mode e.Index) e.Variables-E =
    e.Variables-B (s.Mode e.Index) e.Variables-E;

  (s.Mode e.Index) e.Variables = e.Variables (s.Mode e.Index);
}

$LABEL CExistVariable, CNotFound;

$FORWARD SetAsBoundVariable;

/**
  <Cntx-AddNewVariable t.Context s.Mode e.Index>
    == t.Context # CSuccess
    == t.Context # CInvalidMode s.OldMode s.Mode e.Index

  Эта функция в отличие от Cntx-AddVariable добавляет переменную как
  имеющую область видимости начиная с текущей функции: если в области
  видимости имеется переменная с тем же именем, что и в данной функции,
  то она сокрывается.
  Если переменная уже упоминалась, и была определена как свободная, она
  переопределяется как связанная и занесённая в список свободных переменных,
  то она из этого списка удаляется. Таким образом, в образце достаточно
  однократно объявить переменную как локальную.
*/
$ENTRY Cntx-AddNewVariable {
  [Context e.Variables-B (s.Mode e.Index) e.Variables-E]
  s.Mode e.Index =
    [Context
      <SetAsBoundVariable (s.Mode e.Index) e.Variables-B>
      (s.Mode e.Index)
      e.Variables-E
    ]
    # CSuccess;

  [Context e.Variables-B (s.OldMode e.Index) e.Variables-E]
  s.NewMode e.Index =
    [Context e.Variables-B (s.OldMode e.Index) e.Variables-E]
    # CInvalidMode s.OldMode s.NewMode e.Index;

  [Context e.Variables] s.Mode e.Index =
    [Context (s.Mode e.Index) e.Variables] # CSuccess;
}

$FORWARD SetAsBoundVariable-RemoveFromFree;

SetAsBoundVariable {
  (s.Mode e.Index) e.Variables-B (FreeVarsSent e.Free) e.Variables-E =
    (s.Mode e.Index) e.Variables-B
    (FreeVarsSent
      <SetAsBoundVariable-RemoveFromFree (s.Mode e.Index) e.Free>
    )
    <SetAsBoundVariable (s.Mode e.Index) e.Variables-E>;

  (s.Mode e.Index) e.Variables = e.Variables;
}

SetAsBoundVariable-RemoveFromFree {
  (s.Mode e.Index) e.Variables-B (s.Mode e.Index) e.Variables-E =
    e.Variables-B e.Variables-E;

  (s.Mode e.Index) e.Variables = e.Variables;
}

/**
  <Cntx-CheckVariable t.Context s.Mode e.Index>
    == t.Context # CExistVariable s.Mode e.Index
    == t.Context # CInvalidMode s.OldMode s.Mode e.Index
    == t.Context # CNotFound s.Mode e.Index
*/
$ENTRY Cntx-CheckVariable {
  [Context e.Variables-B (s.Mode e.Index) e.Variables-E]
  s.Mode e.Index =
    [Context
      // См. комментарий в Cntx-AddVariable
      <ShiftVariable (s.Mode e.Index) e.Variables-B>
      (s.Mode e.Index)
      e.Variables-E
    ]
    # CExistVariable s.Mode e.Index;

  [Context e.Variables-B (s.OldMode e.Index) e.Variables-E]
  s.NewMode e.Index =
    [Context e.Variables-B (s.OldMode e.Index) e.Variables-E]
    # CInvalidMode s.OldMode s.NewMode e.Index;

  [Context e.Variables] s.Mode e.Index =
    [Context e.Variables] # CNotFound s.Mode e.Index;
}

$FORWARD Unique;

/**
  <Cntx-ResetAfterSentence t.Context> == t.Context
*/
$ENTRY Cntx-ResetAfterSentence {
  [Context
    e.Locals (FreeVarsSent e.FreeSent) (FreeVarsFunc e.FreeFunc)
    e.Outers
  ] =
    [Context
      (FreeVarsSent) (FreeVarsFunc <Unique e.FreeSent e.FreeFunc>)
      e.Outers
    ];
}

Unique {
  e.Begin t.Copy e.Middle t.Copy e.End =
    e.Begin <Unique t.Copy e.Middle e.End>;

  e.Uniques = e.Uniques;
}

/**
  <Cntx-PushScope t.Context> == t.Context
*/
$ENTRY Cntx-PushScope {
  [Context e.Variables] =
    [Context (FreeVarsSent) (FreeVarsFunc) e.Variables];
}

/**
  <Cntx-PopScope t.Context>
    == t.Context e.ClosureContext
  e.ClosureContext ::= (s.Mode e.Index)*
*/
$ENTRY Cntx-PopScope {
  [Context
    (FreeVarsSent) (FreeVarsFunc e.ClosureContext)
    e.Outers
  ] =
    [Context e.Outers] e.ClosureContext;
}
