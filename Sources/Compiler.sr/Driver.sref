//FROM Library
$EXTERN Success, Fails;

//FROM Lexer
$EXTERN LexFolding;

//FROM LibraryEx
$EXTERN Map, MapReduce;

$FORWARD ParseAndGenerate, PrepareBracket;

/**
  <CompileFile (e.SrcName) e.OutputName>
    == Success e.OutputName
    == Fails
*/
$ENTRY CompileFile {
  (e.SrcName) e.OutputName =
    <ParseAndGenerate
      (e.OutputName)
      <Map PrepareBracket <LexFolding e.SrcName>>
    >;
}

//FROM Lexer
$EXTERN TkOpenBracket, TkCloseBracket, TkOpenADT, TkCloseADT,
  TkOpenCall, TkCloseCall;

$LABEL COpen, CClose;

PrepareBracket {
  (TkOpenBracket s.LnNum) = (# COpen TkOpenBracket s.LnNum);
  (TkCloseBracket s.LnNum) = (# CClose TkCloseBracket s.LnNum);

  (TkOpenADT s.LnNum) = (# COpen TkOpenADT s.LnNum);
  (TkCloseADT s.LnNum) = (# CClose TkCloseADT s.LnNum);

  (TkOpenCall s.LnNum) = (# COpen TkOpenCall s.LnNum);
  (TkCloseCall s.LnNum) = (# CClose TkCloseCall s.LnNum);

  t.OtherToken = t.OtherToken;
}

//FROM LibraryEx
$EXTERN SaveFile, Reduce;

//FROM Library
$EXTERN FOpen, FClose, FWriteLine;

/*
  Трансляция осуществляется обычным методом рекурсивного спуска.

  TranslationUnit = Element* .

  Element =
    '$ENUM' NameList |
    '$EENUM' NameList |
    '$EXTERN' NameList |
    '$FORWARD' NameList |
    '$SWAP' NameList |
    '$ESWAP' NameList |
    '$LABEL' NameList |
    '$ENTRY' Function |
    Function .

  NameList = Name ',' NameList | Name ';' .

  Function = Name Block .

  Block = '{' Sentence* '}' .

  Sentence = Pattern '=' Result ';' .

  Pattern = PatternTerm* .

  PatternTerm = CommonTerm |
    '(' Patter ')' | '[' Pattern ']' | RedefinitionVariable .

  RedefinitionVariable = Variable '^' .

  CommonTerm = Char | Number | Name | Variable | '#' Ident .

  Result = ResultTerm* .

  ResultTerm = CommonTerm |
    '(' Result ')' | '[' Result ']' | '<' Result '>' | Block .

  Стратегия обработки ошибок. Выделяем только одну функцию, проглатывающую
  неожиданные лексемы. Остальные функции при обнаружении неожиданной лексемы
  должны её оставить в лексической свёртке перейдя в одно из состояний уровнем
  выше. Данная стратегия обработки ошибок может нарушаться, но при этом должно
  выполняться условие, что TkEOF передаётся в ParseElements.
*/

//FROM SymTable
$EXTERN ST-Create, ST-AddDeclared, ST-AddDefined, ST-AddIdent;

//FROM Error
$EXTERN EL-Create, EL-AddError, EL-AddErrorAt, EL-Print, EL-IsEmpty,
  EL-AddUnexpected, EL-HasErrors, EL-NoErrors;

$FORWARD ParseElements, WriteGenerated;

/*
  TranslationUnit = Element* .
*/

//FROM Generator
$EXTERN GenCommonHeaders;

ParseAndGenerate {
  (e.OutputName) e.LexFolding =
    <WriteGenerated
      (e.OutputName)
      <GenCommonHeaders>
      <ParseElements
        <EL-Create> <ST-Create> e.LexFolding
      >
    >;
}

WriteGenerated {
  (e.OutputName) e.Lines EL-NoErrors =
    <SaveFile (e.OutputName) e.Lines>
    Success e.OutputName;

  (e.OutputName) e.Lines EL-HasErrors = Fails;
}

/*
  Element =
    '$ENUM' NameList |
    '$EENUM' NameList |
    '$EXTERN' NameList |
    '$FORWARD' NameList |
    '$SWAP' NameList |
    '$ESWAP' NameList |
    '$LABEL' NameList |
    '$ENTRY' Function |
    Function .
*/

//FROM Lexer
$EXTERN
  TkDirective,
  Enum, EEnum, Extern, Forward, Entry, Swap, ESwap, Ident,
  TkName, TkEOF, TkSemicolon;

$FORWARD ParseElement-SwDirective, ParseFunction;

//FROM Generator
$EXTERN GN-Entry, GN-Local, GenCommonTailer;

ParseElements {
  t.ErrorList t.SymTable (TkEOF s.LnNum) =
    <GenCommonTailer>
    <EL-IsEmpty <EL-Print t.ErrorList>>;

  t.ErrorList t.SymTable (TkDirective s.LnNum s.Directive) e.Tail =
    <ParseElement-SwDirective
      t.ErrorList t.SymTable s.Directive e.Tail
    >;

  t.ErrorList t.SymTable (TkName s.LnNum e.Name) e.Tail =
    <ParseFunction
      GN-Local (e.Name)
      <ST-AddDefined t.ErrorList t.SymTable GN-Local s.LnNum e.Name>
      e.Tail
    >;

  t.ErrorList t.SymTable (TkSemicolon s.LnNum) e.Tail =
    <ParseElements t.ErrorList t.SymTable e.Tail>;

  t.ErrorList t.SymTable t.Unexpected e.Tail =
    <ParseElements
      <EL-AddUnexpected t.ErrorList t.Unexpected 'directive or name'>
      t.SymTable e.Tail
    >;
}

//FROM Generator
$EXTERN GenEEnum, GenEnum, GenExtern, GenForward, GenESwap, GenSwap, GenIdent;

$FORWARD ParseNameList;

GenFunctionsFromDirective {
  EEnum   = GenEEnum   ST-AddDefined  GN-Entry;
  Enum    = GenEnum    ST-AddDefined  GN-Local;
  Extern  = GenExtern  ST-AddDeclared GN-Entry;
  Forward = GenForward ST-AddDeclared GN-Local;
  ESwap   = GenESwap   ST-AddDefined  GN-Entry;
  Swap    = GenSwap    ST-AddDefined  GN-Local;
  // Для меток не важно: entry или local.
  Ident   = GenIdent   ST-AddIdent    GN-Entry;
}

ParseElement-SwDirective {
  t.ErrorList t.SymTable Entry (TkName s.LnNum e.Name) e.Tail =
    <ParseFunction
      GN-Entry (e.Name)
      <ST-AddDefined t.ErrorList t.SymTable GN-Entry s.LnNum e.Name>
      e.Tail
    >;

  t.ErrorList t.SymTable Entry t.Unexpected e.Tail =
    <ParseElements
      <EL-AddUnexpected t.ErrorList t.Unexpected 'function name'>
      t.SymTable t.Unexpected e.Tail
    >;

  t.ErrorList t.SymTable s.Directive e.Tail =
    <ParseNameList
      t.ErrorList t.SymTable
      <GenFunctionsFromDirective s.Directive>
      e.Tail
    >;
}

/*
  NameList = Name ',' NameList | Name ';' .
*/

//FROM Lexer
$EXTERN TkComma, TkSemicolon;

$FORWARD ParseNameList-Tail;

ParseNameList {
  t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass
  (TkName s.LnNum e.Name) e.Tail =
    <s.GenFunc e.Name>
    <ParseNameList-Tail
      <s.TableChangeFunc t.ErrorList t.SymTable s.ScopeClass s.LnNum e.Name>
      s.GenFunc s.TableChangeFunc s.ScopeClass
      e.Tail
    >;

  t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass
  t.Unexpected e.Tail =
    <ParseElements
      <EL-AddUnexpected t.ErrorList t.Unexpected 'function name'>
      t.SymTable t.Unexpected e.Tail
    >;
}

ParseNameList-Tail {
  t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass
  (TkComma s.LnNum) e.Tail =
    <ParseNameList
      t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass e.Tail
    >;

  t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass
  (TkSemicolon s.LnNum) e.Tail =
    <ParseElements
      t.ErrorList t.SymTable e.Tail
    >;

  t.ErrorList t.SymTable s.GenFunc s.TableChangeFunc s.ScopeClass
  t.Unexpected e.Tail =
    <ParseElements
      <EL-AddUnexpected t.ErrorList t.Unexpected 'comma or semicolon'>
      t.SymTable t.Unexpected e.Tail
    >;
}

/*
  Function = Name '{' Sentence* '}'
*/

//FROM Lexer
$EXTERN TkOpenBlock, TkCloseBlock;

//FROM Generator
$EXTERN GenFnStart, GenSentence, GenFnEnd, GenFnEnd-Success;

$FORWARD ParseSentences;

//FROM Context
$EXTERN Cntx-Create, Cntx-Destroy;

$FORWARD ParseBlock, ParseFunction-Aux;

ParseFunction {
  s.ScopeClass (e.Name) t.ErrorList t.SymTable
  (TkOpenBlock s.LnNum) e.Tail =
    <ParseFunction-Aux
      s.ScopeClass (e.Name)
      <ParseBlock
        (0) t.ErrorList t.SymTable <Cntx-Create> e.Tail
      >
    >;

  s.ScopeClass (e.Name) t.ErrorList t.SymTable
  t.Unexpected e.Tail =
    <ParseElements
      <EL-AddUnexpected t.ErrorList t.Unexpected 'open brace'>
      t.SymTable t.Unexpected e.Tail
    >;
}

$FORWARD GenFunctionBody, Reverse;

$LABEL CLambdaScope;

//FROM LibraryEx
$EXTERN Fetch;

$FORWARD CreateLambdaName;

ParseFunction-Aux {
  s.ScopeClass (e.Name)
  (s.NextNumber e.FunctionBodies t.MainBody)
  t.ErrorList t.SymTable (t.Context) e.Tail =
    <Fetch
      e.FunctionBodies
      {
        = ;

        e.FunctionBodies^ =
          <Fetch
            s.ScopeClass
            {
              GN-Entry = <GenExtern e.Name>;
              GN-Local = <GenForward e.Name>;
            }
          >
          <Map
            (GenFunctionBody # CLambdaScope e.Name)
            e.FunctionBodies
          >;
      }
    >
    <GenFunctionBody s.ScopeClass e.Name t.MainBody>
    <Cntx-Destroy t.Context>
    <ParseElements t.ErrorList t.SymTable e.Tail>;
}

$FORWARD GenFunctionBody-Aux;

GenFunctionBody {
  # CLambdaScope e.Name (s.Number e.Sentences) =
    <GenFunctionBody-Aux
      GN-Local (e.Name) (<CreateLambdaName e.Name s.Number>)
      e.Sentences
    >;

  s.ScopeClass e.Name (s.Number e.Sentences) =
    <GenFunctionBody-Aux
      s.ScopeClass (e.Name) (e.Name) e.Sentences
    >;
}

//FROM Library
$EXTERN StrFromInt;

CreateLambdaName {
  e.Name s.Number =
    'lambda_' e.Name '_' <StrFromInt s.Number>;
}

//FROM Lexer
$EXTERN TkVariable;

$FORWARD PrepareAndGenSentence;

GenFunctionBody-Aux {
  // Закомментированный код содержит вариант кодогенерации,
  // при котором если последнее предложение имеет вид
  // e.X = ...;, в конце не генерится возврат
  // return RecognitionImpossible;

  //s.ScopeClass (e.MainName) (e.Name)
  //e.Sentences (((TkVariable 'e' e.Index)) (e.Result)) =
  //  <GenFnStart s.ScopeClass e.Name>
  //  <Map
  //    <PrepareAndGenSentence e.MainName>
  //    e.Sentences
  //    (((TkVariable 'e' e.Index)) (e.Result))
  //  >
  //  <GenFnEnd-Success>;

  s.ScopeClass (e.MainName) (e.Name) e.Sentences =
    <GenFnStart s.ScopeClass e.Name>
    <Map
      <PrepareAndGenSentence e.MainName> e.Sentences
    >
    <GenFnEnd>;
}

//FROM Algorithm
$EXTERN MakeAlgorithm;

//FROM Lexer
$EXTERN TkName, TkVariable;

$LABEL CLambdaName;

PrepareAndGenSentence {
  e.MainName =
    {
      ((e.Pattern) (e.Result)) =
        <GenSentence
          <MakeAlgorithm
            (e.Pattern)
            (
              <Map
                {
                  (TkName # CLambdaName s.Number) =
                    (TkName <CreateLambdaName e.MainName s.Number>);

                  t.OtherToken = t.OtherToken;
                }
                e.Result
              >
            )
          >
        >;
    };
}

$FORWARD DoParseBlock, ParseBlock-SetContext;

//FROM Context
$EXTERN Cntx-PushScope, Cntx-PopScope;

/*
  <ParseBlock
    (e.FunctionBodies) t.ErrorList t.SymTable t.Context e.Tokens
  >
    == (e.FunctionBodies)
    t.ErrorList t.SymTable (t.Context e.FreeVars) e.Tokens

  e.FunctionBodies ::= s.NextNumber t.FunctionBody*
  t.FunctionBody ::= (s.Number ((e.Pattern) (e.Result))*)

  Открывающая скобка должна отсутствовать во входном потоке.
*/
ParseBlock {
  (e.Functions)
  t.ErrorList t.SymTable t.Context e.Tokens =
    <DoParseBlock
      (e.Functions) t.ErrorList t.SymTable
      <Cntx-PushScope t.Context>
      (/* sentences */) e.Tokens
    >;
}

//FROM LibraryEx
$EXTERN Inc, Dec;

$FORWARD ParseSentence;

DoParseBlock {
  (s.Number e.Functions)
  t.ErrorList t.SymTable t.Context
  (e.Sentences)
  (TkCloseBlock s.LnNumber) e.Tail =
    <ParseBlock-SetContext
      (
        <Inc s.Number>
        e.Functions
      )
      (s.Number e.Sentences)
      t.ErrorList t.SymTable
      ( <Cntx-PopScope t.Context> )
      e.Tail
    >;

  (s.Number e.Functions)
  t.ErrorList t.SymTable t.Context
  (e.Sentences) (TkEOF s.LnNum) e.Tail =
    (
      <Inc s.Number>
      e.Functions (s.Number e.Sentences)
    )
    <EL-AddErrorAt
      t.ErrorList s.LnNum 'Unexpected EOF, expected "}"'
    >
    t.SymTable
    ( <Cntx-PopScope t.Context> )
    (TkEOF s.LnNum) e.Tail;

  (e.Functions)
  t.ErrorList t.SymTable t.Context
  (e.Sentences) e.Tokens =
    <DoParseBlock
      <ParseSentence
        (e.Functions) t.ErrorList t.SymTable t.Context
        (e.Sentences) e.Tokens
      >
    >;
}

$FORWARD AddContextToSentence;

ParseBlock-SetContext {
  (e.Functions) (s.Number e.Sentences)
  t.ErrorList t.SymTable
  (t.Context e.FreeContext) e.Tokens =
    (
      e.Functions
      (
        s.Number
        <Map
          (AddContextToSentence e.FreeContext)
          e.Sentences
        >
      )
    )
    t.ErrorList t.SymTable (t.Context e.FreeContext)
    e.Tokens;
}

$FORWARD CreateContext;

AddContextToSentence {
  e.Context ((s.LastBracket e.Pattern) (e.Result)) =
    (
      (
        <Fetch
          <CreateContext s.LastBracket e.Context>
          {
            s.NextBracket e.PatternContext =
              e.PatternContext;
          }
        >
        e.Pattern
      )
      (e.Result)
    );
}

CreateContext {
  s.LastBracketNumber e.Context =
    <MapReduce
      {
        s.BracketNumber ('e' e.Index) =
          <Inc s.BracketNumber>
          (TkOpenBracket s.BracketNumber)
          (TkVariable 'e' e.Index)
          (TkCloseBracket s.BracketNumber);

        s.BracketNumber (s.Mode e.Index) =
          s.BracketNumber (TkVariable s.Mode e.Index);
      }
      s.LastBracketNumber e.Context
    >;
}

$FORWARD ParsePattern;

ParseSentence {
  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) e.Tokens =
    <ParsePattern
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.Sentences)
      (
        1 /* номер следующей скобки */
        /* пусто */ /* мультискобки */
      )
      ( /* просканировано */ )
      e.Tokens
    >;
}


$FORWARD CoBracket, CheckAddVariable, StrFromBracket,
  ParseResult;

//FROM Lexer
$EXTERN TkChar, TkNumber, TkVariable, TkIdentMarker,
  TkOpenBracket, TkCloseBracket, TkOpenADT, TkCloseADT,
  TkRedefinition, TkReplace, TkOpenCall, TkCloseCall;

//FROM Algorithm
$EXTERN TkIdentifier;

//FROM SymTable
$EXTERN ST-CheckDeclared, ST-CheckIdent, ST-GetAnyName;

//FROM Context
$EXTERN Cntx-AddNewVariable, Cntx-AddVariable;

ParsePattern {
  // Обработка литералов атомов

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.MultiBrackets)
  (e.Scanned) (TkChar s.LnNum s.Char) e.Tail =
    <ParsePattern
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.Sentences) (e.MultiBrackets)
      (e.Scanned (TkChar s.Char)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.MultiBrackets)
  (e.Scanned) (TkNumber s.LnNum s.Number) e.Tail =
    <ParsePattern
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.Sentences) (e.MultiBrackets)
      (e.Scanned (TkNumber s.Number)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.MultiBrackets)
  (e.Scanned) (TkName s.LnNum e.Name) e.Tail =
    <ParsePattern
      (e.Functions)
      <ST-CheckDeclared t.ErrorList t.SymTable s.LnNum e.Name>
      t.Context
      (e.Sentences) (e.MultiBrackets)
      (e.Scanned (TkName e.Name)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.MultiBrackets)
  (e.Scanned)
  (TkIdentMarker s.LnNumMarker) (TkName s.LnNumName e.Name) e.Tail =
    <ParsePattern
      (e.Functions)
      <ST-CheckIdent t.ErrorList t.SymTable s.LnNumName e.Name>
      t.Context
      (e.Sentences) (e.MultiBrackets)
      (e.Scanned (TkIdentifier e.Name)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.MultiBrackets)
  (e.Scanned) (TkIdentMarker s.LnNum) e.Tail =
    <ParsePattern
      (e.Functions)
      <EL-AddErrorAt t.ErrorList s.LnNum 'Missed name after ''#'''>
      t.SymTable t.Context
      (e.Sentences) (e.MultiBrackets)
      (e.Scanned) e.Tail
    >;

  // Переменные

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.MultiBracket)
  (e.Scanned)
  (TkVariable s.LnNumVar s.Mode e.Index)
  (TkRedefinition s.LnNumRedef)
  e.Tail =
    <ParsePattern
      (e.Functions)
      <CheckAddVariable
        t.ErrorList t.SymTable t.Context
        Cntx-AddNewVariable s.LnNumVar s.Mode e.Index
      >
      (e.Sentences) (e.MultiBracket)
      (e.Scanned (TkVariable s.Mode e.Index)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.MultiBracket)
  (e.Scanned) (TkVariable s.LnNum s.Mode e.Index) e.Tail =
    <ParsePattern
      (e.Functions)
      <CheckAddVariable
        t.ErrorList t.SymTable t.Context
        Cntx-AddVariable s.LnNum s.Mode e.Index
      >
      (e.Sentences) (e.MultiBracket)
      (e.Scanned (TkVariable s.Mode e.Index)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.MultiBracket)
  (e.Scanned) (TkRedefinition s.LnNum) e.Tail =
    <ParsePattern
      (e.Functions)
      <EL-AddErrorAt t.ErrorList s.LnNum 'Naked redefinition sign'>
      t.SymTable t.Context
      (e.Sentences) (e.MultiBracket)
    >;

  /*
    Скобки.

    Стратегия обработки ошибок: если мы встретили "не ту" закрывающую
    скобку, считаем, что "та" была пропущена.
    Если имеем непарную открывающую скобку, считаем,
    что соответствующая скобка была пропущена в конце выражения;
    если имеем непарную закрывающую скобку, считаем её лишней.
  */

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (s.BracketNumber e.MultiBracket)
  (e.Scanned) (# COpen TkOpenBracket s.LnNum) e.Tail =
    <ParsePattern
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.Sentences)
      (
        <Inc s.BracketNumber>
        e.MultiBracket
        (s.BracketNumber TkOpenBracket s.LnNum TkCloseBracket e.Scanned)
      )
      () e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (s.BracketNumber e.MultiBracket)
  (e.Scanned)
  (# COpen TkOpenADT s.LnNumBracket) (TkName s.LnNumName e.Name) e.Tail =
    <ParsePattern
      (e.Functions)
      <ST-CheckDeclared t.ErrorList t.SymTable s.LnNumName e.Name>
      t.Context
      (e.Sentences)
      (
        <Inc s.BracketNumber>
        e.MultiBracket
        (s.BracketNumber TkOpenADT s.LnNumBracket TkCloseADT e.Scanned)
      )
      ((TkName e.Name)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (s.BracketNumber e.MultiBracket)
  (e.Scanned)
  (# COpen TkOpenADT s.LnNum) e.Tail =
    <ParsePattern
      (e.Functions)
      <EL-AddErrorAt
        t.ErrorList s.LnNum 'Expected name after "["'
      >
      t.SymTable t.Context
      (e.Sentences)
      (
        <Inc s.BracketNumber>
        e.MultiBracket
        (s.BracketNumber TkOpenADT s.LnNum TkCloseADT e.Scanned)
      )
      ((TkName <ST-GetAnyName t.SymTable>)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (s.BracketNumber e.MultiBracket)
  (e.Scanned)
  (# COpen TkOpenCall s.LnNum) e.Tail =
    <ParsePattern
      (e.Functions)
      <EL-AddErrorAt
        t.ErrorList s.LnNum 'Unexpected call bracket in pattern expression'
      >
      t.SymTable t.Context
      (e.Sentences)
      (
        <Inc s.BracketNumber>
        e.MultiBracket
        (s.BracketNumber TkOpenCall s.LnNum TkCloseCall e.Scanned)
      )
      () e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences)
  (
    s.BracketNumber
    e.MultiBracket
    (s.InnerNumber
      s.OpenBracket s.InnerLnNum s.CloseBracket
      e.Scanned
    )
  )
  (e.InnerScanned) (# CClose s.CloseBracket s.ClosedLnNum) e.Tail =
    <ParsePattern
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.Sentences) (s.BracketNumber e.MultiBracket)
      (
        e.Scanned
        (s.OpenBracket s.InnerNumber)
        e.InnerScanned
        (s.CloseBracket s.InnerNumber)
      )
      e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences)
  (
    s.BracketNumber
    e.MultiBracket
    (s.InnerNumber
      s.OpenBracket s.InnerLnNum s.CloseBracket
      e.Scanned
    )
  )
  (e.InnerScanned) (# CClose s.OtherCloseBracket s.LnNum) e.Tail =
    <ParsePattern
      (e.Functions)
      <EL-AddErrorAt
        t.ErrorList s.InnerLnNum
        'Unbalanced bracket "' <StrFromBracket s.OpenBracket> '"'
      >
      t.SymTable t.Context
      (e.Sentences) (s.BracketNumber e.MultiBracket)
      (
        e.Scanned
        (s.OpenBracket s.InnerNumber)
        e.InnerScanned
        (s.CloseBracket s.InnerNumber)
      )
      (# CClose s.OtherCloseBracket s.LnNum) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (s.BracketNumber)
  (e.Scanned) (# CClose s.CloseBracket s.LnNum) e.Tail =
    <ParsePattern
      (e.Functions)
      <EL-AddErrorAt
        t.ErrorList s.LnNum
        'Unbalanced bracket "' <StrFromBracket s.CloseBracket> '"'
      >
      t.SymTable t.Context
      (e.Sentences) (s.BracketNumber)
      (e.Scanned) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (s.BracketNumber)
  (e.Scanned) (TkReplace s.LnNum) e.Tail =
    <ParseResult
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.Sentences)
      (s.BracketNumber
        <Map
          {
            (TkOpenCall s.Number) = (TkOpenBracket s.Number);
            (TkCloseCall s.Number) = (TkCloseBracket s.Number);
            t.Other = t.Other;
          }
          e.Scanned
        >
      )
      (1)
      () e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences)
  (
    s.BracketNumber
    e.MultiBracket
    (s.InnerNumber
      s.OpenBracket s.InnerLnNum s.CloseBracket
      e.InnerScanned
    )
  )
  (e.Scanned) e.Tail =
    <ParsePattern
      (e.Functions)
      <EL-AddErrorAt
        t.ErrorList s.InnerLnNum
        'Unbalanced bracket "' <StrFromBracket s.OpenBracket> '"'
      >
      t.SymTable t.Context
      (e.Sentences) (s.BracketNumber e.MultiBracket)
      (
        (s.OpenBracket s.InnerNumber)
        e.InnerScanned
        (s.CloseBracket s.InnerNumber)
        e.Scanned
      )
      e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (s.BracketNumber)
  (e.Scanned)
  (s.NextResultTerm s.LnNum e.Info) e.Tail =
    <ParseResult
      (e.Functions)
      <EL-AddErrorAt
        t.ErrorList s.LnNum
        'Incorrect pattern termination'
      >
      t.SymTable t.Context
      (e.Sentences)
      (s.BracketNumber
        <Map
          {
            (TkOpenCall s.Number) = (TkOpenBracket s.Number);
            (TkCloseCall s.Number) = (TkCloseBracket s.Number);
            t.Other = t.Other;
          }
          e.Scanned
        >
      )
      (1)
      () e.Tail
    >;
}

CoBracket {
  TkOpenADT = TkCloseADT;
  TkOpenBracket = TkCloseBracket;
  TkOpenCall = TkCloseCall;
  TkCloseADT = TkOpenADT;
  TkCloseBracket = TkOpenBracket;
  TkCloseCall = TkOpenCall;
}

$FORWARD SwCheckAddVariable;

CheckAddVariable {
  t.ErrorList t.SymTable t.Context
  s.ContextModifier s.LnNum s.Mode e.Index =
    <SwCheckAddVariable
      t.ErrorList t.SymTable s.LnNum
      <s.ContextModifier t.Context s.Mode e.Index>
    >;
}

$LABEL CSuccess, CInvalidMode;

SwCheckAddVariable {
  t.ErrorList t.SymTable s.LnNum
  t.Context # CSuccess =
    t.ErrorList t.SymTable t.Context;

  t.ErrorList t.SymTable s.LnNum
  t.Context # CInvalidMode s.OldMode s.NewMode e.Index =
    <EL-AddErrorAt
      t.ErrorList s.LnNum
      'Variables ' s.OldMode '.' e.Index ' and '
      s.NewMode '.' e.Index ' has different modes'
    >
    t.SymTable t.Context;
}

StrFromBracket {
  TkOpenBracket = '('; TkCloseBracket = ')';
  TkOpenCall = '<'; TkCloseCall = '>';
  TkOpenADT = '['; TkCloseADT = ']';
}

//FROM Context
$EXTERN Cntx-CheckVariable, Cntx-ResetAfterSentence;

$FORWARD CheckUseVariable, ParseResult-Block;

/*
  <ParseResult
    (e.Functions) t.ErrorList t.SymTable t.Context
    (e.Sentences) (e.Pattern) (s.BracketNum e.MultiBracket)
    (e.Scanned) e.Tail
  >
*/
ParseResult {
  // Обработка литералов атомов

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (e.MultiBracket)
  (e.Scanned) (TkChar s.LnNum s.Char) e.Tail =
    <ParseResult
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.Sentences) (e.Pattern) (e.MultiBracket)
      (e.Scanned (TkChar s.Char)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (e.MultiBracket)
  (e.Scanned) (TkNumber s.LnNum s.Number) e.Tail =
    <ParseResult
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.Sentences) (e.Pattern) (e.MultiBracket)
      (e.Scanned (TkNumber s.Number)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (e.MultiBracket)
  (e.Scanned) (TkName s.LnNum e.Name) e.Tail =
    <ParseResult
      (e.Functions)
      <ST-CheckDeclared t.ErrorList t.SymTable s.LnNum e.Name>
      t.Context
      (e.Sentences) (e.Pattern) (e.MultiBracket)
      (e.Scanned (TkName e.Name)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (e.MultiBracket)
  (e.Scanned)
  (TkIdentMarker s.MarkerLnNum) (TkName s.NameLnNum e.Name) e.Tail =
    <ParseResult
      (e.Functions)
      <ST-CheckIdent t.ErrorList t.SymTable s.NameLnNum e.Name>
      t.Context
      (e.Sentences) (e.Pattern) (e.MultiBracket)
      (e.Scanned (TkIdentifier e.Name)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (e.MultiBracket)
  (e.Scanned) (TkIdentMarker s.LnNum) e.Tail =
    <ParseResult
      (e.Functions)
      <EL-AddErrorAt t.ErrorList s.LnNum 'Missed name after "#"'>
      t.SymTable t.Context
      (e.Sentences) (e.Pattern) (e.MultiBracket)
      (e.Scanned) e.Tail
    >;

  // Переменные

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (e.MultiBracket)
  (e.Scanned) (TkVariable s.LnNum s.Mode e.Index) e.Tail =
    <ParseResult
      (e.Functions)
      <CheckUseVariable
        t.ErrorList t.SymTable t.Context
        s.LnNum s.Mode e.Index
      >
      (e.Sentences) (e.Pattern) (e.MultiBracket)
      (e.Scanned (TkVariable s.Mode e.Index)) e.Tail
    >;

  /*
    Скобки.

    Стратегия обработки ошибок: если мы встретили "не ту"
    закрывающую скобку, считаем, что "та" была пропущена.
    Если имеем непарную открывающую скобку, считаем,
    что соответствующая скобка была пропущена в конце выражения;
    если имеем непарную закрывающую скобку, считаем её лишней.
  */

  // Хитро обрабатываются АДТ-скобки,
  // т.к. требуется, чтобы после них было имя.

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (s.BracketNumber e.MultiBracket)
  (e.Scanned)
  (# COpen TkOpenADT s.LnNumADT) (TkName s.LnNumName e.Name) e.Tail =
    <ParseResult
      (e.Functions)
      <ST-CheckDeclared t.ErrorList t.SymTable s.LnNumName e.Name>
      t.Context
      (e.Sentences) (e.Pattern)
      (
        <Inc s.BracketNumber>
        e.MultiBracket
        (s.BracketNumber TkOpenADT s.LnNumADT TkCloseADT e.Scanned)
      )
      ((TkName e.Name)) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (s.BracketNumber e.MultiBracket)
  (e.Scanned)
  (# COpen TkOpenADT s.LnNum) e.Tail =
    <ParseResult
      (e.Functions)
      <EL-AddErrorAt
        t.ErrorList s.LnNum 'Expected name after "["'
      >
      t.SymTable t.Context
      (e.Sentences) (e.Pattern)
      (
        <Inc s.BracketNumber>
        e.MultiBracket
        (s.BracketNumber TkOpenADT s.LnNum TkCloseADT e.Scanned)
      )
      ((TkName <ST-GetAnyName t.SymTable>)) e.Tail
    >;

  // Структурные и угловые скобки обрабатываются одинаково
  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (s.BracketNumber e.MultiBracket)
  (e.Scanned) (# COpen s.OpenBracket s.LnNum) e.Tail =
    <ParseResult
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.Sentences) (e.Pattern)
      (
        <Inc s.BracketNumber>
        e.MultiBracket
        (s.BracketNumber
          s.OpenBracket s.LnNum <CoBracket s.OpenBracket>
          e.Scanned
        )
      )
      () e.Tail
    >;

  // Правильная закрывающая скобка
  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern)
  (
    s.BracketNumber
    e.MultiBracket
    (s.InnerNumber
      s.OpenBracket s.OpenLnNum s.CloseBracket
      e.Scanned
    )
  )
  (e.InnerScanned) (# CClose s.CloseBracket s.LnNum) e.Tail =
    <ParseResult
      (e.Functions) t.ErrorList t.SymTable t.Context
      (e.Sentences) (e.Pattern) (s.BracketNumber e.MultiBracket)
      (
        e.Scanned
        (s.OpenBracket s.InnerNumber)
        e.InnerScanned
        (s.CloseBracket s.InnerNumber)
      )
      e.Tail
    >;

  // Лямбда-функция
  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (e.MultiBracket)
  (e.Scanned) (TkOpenBlock s.LnNum) e.Tail =
    <ParseResult
      <ParseResult-Block
        (e.Sentences) (e.Pattern) (e.MultiBracket)
        (e.Scanned)
        <ParseBlock
          (e.Functions) t.ErrorList t.SymTable t.Context
          e.Tail
        >
      >
    >;

  // Неправильная закрывающая скобка или закрывающая скобка отсутствует
  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern)
  (
    s.BracketNumber
    e.MultiBracket
    (s.InnerNumber
      s.OpenBracket s.OpenLnNum s.CloseBracket
      e.Scanned
    )
  )
  (e.InnerBracket) e.Tail =
    <ParseResult
      (e.Functions)
      <EL-AddErrorAt
        t.ErrorList s.OpenLnNum
        'Unbalanced bracket "' <StrFromBracket s.OpenBracket> '"'
      >
      t.SymTable t.Context
      (e.Sentences) (e.Pattern) (s.BracketNumber e.MultiBracket)
      (
        e.Scanned
        (s.OpenBracket s.InnerNumber)
        e.InnerBracket
        (s.CloseBracket s.InnerNumber)
      )
      e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (s.BracketNumber)
  (e.Scanned) (# CClose s.CloseBracket s.LnNum) e.Tail =
    <ParseResult
      (e.Functions)
      <EL-AddErrorAt
        t.ErrorList s.LnNum
        'Unbalanced bracket "' <StrFromBracket s.CloseBracket> '"'
      >
      t.SymTable t.Context
      (e.Sentences) (e.Pattern) (s.BracketNumber)
      (e.Scanned) e.Tail
    >;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (s.BracketNumber)
  (e.Result) (TkSemicolon s.LnNum) e.Tail =
    (e.Functions) t.ErrorList t.SymTable
    <Cntx-ResetAfterSentence t.Context>
    (e.Sentences ((e.Pattern) (e.Result)))
    e.Tail;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (s.BracketNumber)
  (e.Result) (TkCloseBlock s.LnNum) e.Tail =
    (e.Functions)
    <EL-AddErrorAt
      t.ErrorList s.LnNum 'Missed semicolon'
    >
    t.SymTable
    <Cntx-ResetAfterSentence t.Context>
    (e.Sentences ((e.Pattern) (e.Result)))
    (TkCloseBlock s.LnNum) e.Tail;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (s.BracketNumber)
  (e.Result) (TkEOF s.LnNum) e.Tail =
    (e.Functions)
    <EL-AddErrorAt
      t.ErrorList s.LnNum 'Unexpected EOF'
    >
    t.SymTable
    <Cntx-ResetAfterSentence t.Context>
    (e.Sentences ((e.Pattern) (e.Result)))
    (TkCloseBlock s.LnNum) e.Tail;

  (e.Functions) t.ErrorList t.SymTable t.Context
  (e.Sentences) (e.Pattern) (s.BracketNumber)
  (e.Scanned) t.Unexpected e.Tail =
    <ParseResult
      (e.Functions)
      <EL-AddUnexpected t.ErrorList t.Unexpected 'pattern or result term'>
      t.SymTable t.Context
      (e.Sentences) (e.Pattern) (s.BracketNumber)
      (e.Scanned) e.Tail
    >;
}

$FORWARD SwCheckUseVariable;

$LABEL CExistVariable, CNotFound;

CheckUseVariable {
  t.ErrorList t.SymTable t.Context s.LnNum s.Mode e.Index =
    <SwCheckUseVariable
      t.ErrorList t.SymTable s.LnNum
      <Cntx-CheckVariable t.Context s.Mode e.Index>
    >;
}

SwCheckUseVariable {
  t.ErrorList t.SymTable s.LnNum
  t.Context # CExistVariable s.Mode e.Index =
    t.ErrorList t.SymTable t.Context;

  t.ErrorList t.SymTable s.LnNum
  t.Context # CInvalidMode s.OldMode s.NewMode e.Index =
    <EL-AddErrorAt
      t.ErrorList s.LnNum
      'Variables ' s.OldMode '.' e.Index ' and '
      s.NewMode '.' e.Index ' has different modes'
    >
    t.SymTable t.Context;

  t.ErrorList t.SymTable s.LnNum
  t.Context # CNotFound s.Mode e.Index =
    <EL-AddErrorAt
      t.ErrorList s.LnNum
      'Variable ' s.Mode '.' e.Index ' not found'
    >
    t.SymTable t.Context;
}

$LABEL CCreateClosure;

ParseResult-Block {
  (e.Sentences) (e.Pattern) (s.BracketNumber e.MultiBracket)
  (e.Scanned)
  (s.NextNum e.Functions) t.ErrorList t.SymTable
  (t.Context e.FreeContext)
  e.Tail =
    (s.NextNum e.Functions) t.ErrorList t.SymTable t.Context
    (e.Sentences) (e.Pattern)
    <Fetch
      <CreateContext s.BracketNumber e.FreeContext>
      {
        s.NextBracketNumber
        /* свободные переменные в функции отсутствуют */ =
          (s.BracketNumber e.MultiBracket)
          // Формируем вызов глобальной функции
          (
            e.Scanned
            (TkName # CLambdaName <Dec s.NextNum>)
          );

        s.NextBracketNumber e.ResultContext =
          (<Inc s.NextBracketNumber> e.MultiBracket)
          // Формируем вызов замыкания
          (
            e.Scanned
            (TkOpenCall s.NextBracketNumber)
            (TkName # CCreateClosure)
            (TkName # CLambdaName <Dec s.NextNum>)
            e.ResultContext
            (TkCloseCall s.NextBracketNumber)
          );
      }
    >
    e.Tail;
}

