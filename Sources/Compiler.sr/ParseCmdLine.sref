$FORWARD DoParseCommandLine, CollectorObject;

$LABEL CCompileCommand, CErrorFile, CNone;

$EENUM CmdLineError, CompileToTarget, CompileList;

/**
  <ParseCommandLine e.Arguments>
    == s.CommandLineInfo CompileList (e.Folders) t.FoundedFile*
    == s.CommandLineInfo CompileToTarget (e.Folders) (e.Source) (e.Target)
    == (CmdLineError e.Message)

  t.FoundedFile ::= (e.FileName)

  <s.CommandLineInfo #CCompilerCommand>
    == #CNone
    == e.Command

  <s.CommandLineInfo #CErrorFile>
    == #CNone
    == e.FileName
*/
$ENTRY ParseCommandLine {
  e.Arguments =
    <DoParseCommandLine
      <CollectorObject (/* folders */) /* files */> e.Arguments
    >;
}

$LABEL CAddCompileCommand, CAddErrorFile, CGetInfo, CAddFile, CAddFolder,
  CSetOutput;

$FORWARD DoParseFileNamesOnly;

DoParseCommandLine {
  s.Collector ('-c') (e.CompileCommand) e.Arguments =
    <DoParseCommandLine
      <s.Collector #CAddCompileCommand e.CompileCommand> e.Arguments
    >;

  s.Collector ('-c') =
    (CmdLineError 'After option ''-c'' expected C++ compiler command line');

  s.Collector ('-e') (e.ErrorFile) e.Arguments =
    <DoParseCommandLine
      <s.Collector #CAddErrorFile e.ErrorFile> e.Arguments
    >;

  s.Collector ('-e') =
    (CmdLineError 'After option ''-e'' expected name of error flag file');

  s.Collector ('-d') (e.Directory) e.Arguments =
    <DoParseCommandLine
      <s.Collector #CAddFolder e.Directory> e.Arguments
    >;

  s.Collector ('-d') =
    (CmdLineError 'After option ''-d'' expected find directory');

  s.Collector ('-o') (e.OutputFile) e.Arguments =
    <DoParseCommandLine
      <s.Collector #CSetOutput e.OutputFile> e.Arguments
    >;

  s.Collector ('--') e.Arguments =
    <DoParseFileNamesOnly
      s.Collector e.Arguments
    >;

  s.Collector (e.NextFileName) e.Arguments =
    <DoParseCommandLine
      <s.Collector #CAddFile e.NextFileName> e.Arguments
    >;

  s.Collector = <s.Collector #CGetInfo>;
}

DoParseFileNamesOnly {
  s.Collector (e.NextFileName) e.Files =
    <DoParseFileNamesOnly
      <s.Collector #CAddFile e.NextFileName> e.Files
    >;

  s.Collector = <s.Collector #CGetInfo>;
}

//------------------------------------------------------------------------------

$FORWARD Collector-Compiler, Collector-ErrorFile;

CollectorObject {
  (e.Folders) e.Files =
    {
      #CAddCompileCommand e.Command =
        <Collector-Compiler (e.Folders) (e.Files) e.Command>;

      #CAddErrorFile e.ErrorFile =
        <Collector-ErrorFile (e.Folders) (e.Files) e.ErrorFile>;

      #CAddFile e.FileName =
        <CollectorObject (e.Folders) e.Files (e.FileName)>;

      #CAddFolder e.FolderName =
        <CollectorObject (e.Folders (e.FolderName)) e.Files>;

      #CGetInfo =
        {
          #CCompileCommand = #CNone;
          #CErrorFile = #CNone;
        }
        CompileList (e.Folders) e.Files;
    };
}

$FORWARD Collector-Error-CC, Collector-Compiler-ErrorFile;

Collector-Compiler {
  (e.Folders) (e.Files) e.Command =
    {
      #CAddCompileCommand e.NewCommand = <Collector-Error-CC>;

      #CAddErrorFile e.ErrorFile =
        <Collector-Compiler-ErrorFile
          (e.Folders) (e.Files) (e.Command) (e.ErrorFile)
        >;

      #CAddFile e.FileName =
        <Collector-Compiler
          (e.Folders) (e.Files (e.FileName)) e.Command
        >;

      #CAddFolder e.FolderName =
        <Collector-Compiler
          (e.Folders (e.FolderName)) (e.Files) e.Command
        >;

      #CGetInfo =
        {
          #CCompileCommand = e.Command;
          #CErrorFile = #CNone;
        }
        CompileList (e.Folders) e.Files;
    };
}

$FORWARD Collector-Error;

Collector-Error-CC {
  = <Collector-Error 'Multiple declaration of C++ compiler command line'>;
}

$FORWARD Collector-Error-EF;

Collector-ErrorFile {
  (e.Folders) (e.Files) e.ErrorFile =
    {
      #CAddCompileCommand e.Command =
        <Collector-Compiler-ErrorFile
          (e.Folders) (e.Files) (e.Command) (e.ErrorFile)
        >;

      #CAddErrorFile e.ErrorFile = <Collector-Error-EF>;

      #CAddFile e.FileName =
        <Collector-ErrorFile
          (e.Folders) (e.Files (e.FileName)) e.ErrorFile
        >;

      #CAddFolder e.FolderName =
        <Collector-ErrorFile
          (e.Folders (e.FolderName)) (e.Files) e.ErrorFile
        >;

      #CGetInfo =
        {
          #CCompileCommand = #CNone;
          #CErrorFile = e.ErrorFile;
        }
        CompileList (e.Folders) e.Files;
    };
}

Collector-Error-EF {
  = <Collector-Error 'Multiple declaration of error flag file name'>;
}

Collector-Compiler-ErrorFile {
  (e.Folders) (e.Files) (e.Command) (e.ErrorFile) =
    {
      #CAddCompileCommand e.NewCommand = <Collector-Error-CC>;

      #CAddErrorFile e.NewFile = <Collector-Error-EF>;

      #CAddFile e.FileName =
        <Collector-Compiler-ErrorFile
          (e.Folders) (e.Files (e.FileName)) (e.Command) (e.ErrorFile)
        >;

      #CAddFolder e.FolderName =
        <Collector-Compiler-ErrorFile
          (e.Folders (e.FolderName)) (e.Files) (e.Command) (e.ErrorFile)
        >;

      #CGetInfo =
        {
          #CCompileCommand = e.Command;
          #CErrorFile = e.ErrorFile;
        }
        CompileList (e.Folders) e.Files;
    };
}

Collector-Error {
  e.Message =
    {
      #CAddCompileCommand e.Command = <Collector-Error e.Message>;

      #CAddErrorFile e.ErrorFile = <Collector-Error e.Message>;

      #CAddFile e.FileName = <Collector-Error e.Message>;

      #CAddFolder e.FolderName = <Collector-Error e.Message>;

      #CGetInfo (e.Folders) e.Files = (CmdLineError e.Message);
    };
}

