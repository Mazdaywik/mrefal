$FORWARD DoParseCommandLine, CollectorObject;

$LABEL CCompileCommand, CErrorFile, CNone;

/**
  <ParseCommandLine e.Arguments>
    == s.CommandLineInfo (e.Folders) t.FoundedFile*
    == (CmdLineError e.Message)

  t.FoundedFile -- см. в FindFile

  <s.CommandLineInfo #CCompilerCommand>
    == #CNone
    == e.Command

  <s.CommandLineInfo #CErrorFile>
    == #CNone
    == e.FileName
*/
$ENTRY ParseCommandLine {
  e.Arguments =
    <DoParseCommandLine
      CollectorObject (/* files */) (/* folders */) e.Arguments
    >;
}

$EENUM CmdLineError;

$LABEL CAddCompileCommand, CAddErrorFile, CGetInfo;

$FORWARD DoParseFileNamesOnly;

DoParseCommandLine {
  s.Collector (e.Files) (e.Folders) ('-c') (e.CompileCommand) e.Arguments =
    <DoParseCommandLine
      <s.Collector #CAddCompileCommand e.CompileCommand>
      (e.Files) (e.Folders) e.Arguments
    >;

  s.Collector (e.Files) (e.Folders) ('-c') =
    (CmdLineError 'After option ''-c'' expected C++ compiler command line');

  s.Collector (e.Files) (e.Folders) ('-e') (e.ErrorFile) e.Arguments =
    <DoParseCommandLine
      <s.Collector #CAddErrorFile e.ErrorFile>
      (e.Files) (e.Folders) e.Arguments
    >;

  s.Collector (e.Files) (e.Folders) ('-e') =
    (CmdLineError 'After option ''-e'' expected name of error flag file');

  s.Collector (e.Files) (e.Folders) ('-d') (e.Directory) e.Arguments =
    <DoParseCommandLine
      s.Collector (e.Files) (e.Folders (e.Directory)) e.Arguments
    >;

  s.Collector (e.Files) (e.Folders) ('-d') =
    (CmdLineError 'After option ''-d'' expected find directory');

  s.Collector (e.Files) (e.Folders) ('--') e.Arguments =
    <DoParseFileNamesOnly
      s.Collector (e.Files) (e.Folders) e.Arguments
    >;

  s.Collector (e.Files) (e.Folders) (e.NextFileName) e.Arguments =
    <DoParseCommandLine
      s.Collector (e.Files (e.NextFileName)) (e.Folders) e.Arguments
    >;

  s.Collector (e.Files) (e.Folders) =
    <s.Collector #CGetInfo (e.Folders) e.Files>;
}

DoParseFileNamesOnly {
  s.Collector (e.ScannedFiles) (e.Folders) (e.NextFileName) e.Files =
    <DoParseFileNamesOnly
      s.Collector
      (e.ScannedFiles (e.NextFileName)) e.Files
    >;

  s.Collector (e.ScannedFiles) (e.Folders) =
    <s.Collector #CGetInfo (e.Folders) e.ScannedFiles>;
}

//------------------------------------------------------------------------------

$FORWARD Collector-Compiler, Collector-ErrorFile;

CollectorObject {
  #CAddCompileCommand e.Command = <Collector-Compiler e.Command>;

  #CAddErrorFile e.ErrorFile = <Collector-ErrorFile e.ErrorFile>;

  #CGetInfo (e.Folders) e.Files =
    {
      #CCompileCommand = #CNone;
      #CErrorFile = #CNone;
    }
    (e.Folders) e.Files;
}

$FORWARD Collector-Error-CC, Collector-Compiler-ErrorFile;

Collector-Compiler {
  e.Command =
    {
      #CAddCompileCommand e.NewCommand = <Collector-Error-CC>;

      #CAddErrorFile e.ErrorFile =
        <Collector-Compiler-ErrorFile (e.Command) (e.ErrorFile)>;

      #CGetInfo (e.Folders) e.Files =
        {
          #CCompileCommand = e.Command;
          #CErrorFile = #CNone;
        }
        (e.Folders) e.Files;
    };
}

$FORWARD Collector-Error;

Collector-Error-CC {
  = <Collector-Error 'Multiple declaration of C++ compiler command line'>;
}

$FORWARD Collector-Error-EF;

Collector-ErrorFile {
  e.ErrorFile =
    {
      #CAddCompileCommand e.Command =
        <Collector-Compiler-ErrorFile (e.Command) (e.ErrorFile)>;

      #CAddErrorFile e.ErrorFile = Collector-Error-EF;

      #CGetInfo (e.Folders) e.Files =
        {
          #CCompileCommand = #CNone;
          #CErrorFile = e.ErrorFile;
        }
        (e.Folders) e.Files;
    };
}

Collector-Error-EF {
  = <Collector-Error 'Multiple declaration of error flag file name'>;
}

Collector-Compiler-ErrorFile {
  (e.Command) (e.ErrorFile) =
    {
      #CAddCompileCommand e.NewCommand = <Collector-Error-CC>;

      #CAddErrorFile e.NewFile = <Collector-Error-EF>;

      #CGetInfo (e.Folders) e.Files =
        {
          #CCompileCommand = e.Command;
          #CErrorFile = e.ErrorFile;
        }
        (e.Folders) e.Files;
    };
}

Collector-Error {
  e.Message =
    {
      #CAddCompileCommand e.Command = <Collector-Error e.Message>;

      #CAddErrorFile e.ErrorFile = <Collector-Error e.Message>;

      #CGetInfo (e.Folders) e.Files = (CmdLineError e.Message);
    };
}
