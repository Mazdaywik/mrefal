//FROM Driver
$EXTERN CompileFile;

//FROM LibraryEx
$EXTERN Map, ArgList;

//FROM Library
$EXTERN Success, Fails, WriteLine, System, Exit;

//FROM Version
$EXTERN ShowVersion;

//------------------------------------------------------------------------------

$FORWARD Main;

$ENTRY Go {
  = <ShowVersion> <Main <ArgList>>;
}

$FORWARD FindFiles-Compilers;

//FROM ParseCmdLine
$EXTERN ParseCommandLine, NoCompile, CompileCommand, CmdLineError,
  CompileList, CompileToTarget;

//FROM LibraryEx
$EXTERN LoadFile, SaveFile;

Main {
  (e.ProgName) ('@' e.Config) =
    <Main (e.ProgName) <LoadFile e.Config>>;

  (e.ProgName) e.Arguments =
    <FindFiles-Compilers
      <ParseCommandLine e.Arguments>
    >;
}

//FROM LibraryEx
$EXTERN Fetch, Seq;

//FROM FindFile
$EXTERN FindFiles;

//FROM FindFile
$EXTERN Source, Output, NotFound;

$LABEL CCompileCommand, CNone, CErrorFile;

$FORWARD PrintNotFound, ForEach, RenameFiles, Link;

FindFiles-Compilers {
  (CmdLineError e.Message) =
    <WriteLine 'COMMAND LINE ERROR: ' e.Message>;

  s.CommandLineInfo CompileToTarget (e.Folders) (e.Source) (e.Output) =
    ;

  s.CommandLineInfo CompileList (e.Folders) e.Files =
    <Fetch
      <FindFiles (e.Folders) e.Files>
      {
        e.Files-B (NotFound e.FileName) e.Files-E =
          <Map PrintNotFound (NotFound e.FileName) e.Files-E>;

        e.FoundFiles =
          <Fetch
            e.FoundFiles
            // В последовательность:
            <Seq
              <RenameFiles s.CommandLineInfo>
              //----------------------------------------------------------------
              <ForEach
                {
                  (Output e.OutputName) =
                    <WriteLine '+Linking ' e.OutputName> (e.OutputName);

                  (Source (e.Source) e.OutputName) =
                    <WriteLine '*Compiling ' e.Source ':'>
                    <Fetch
                      <CompileFile (e.Source) e.OutputName>
                      {
                        Success e.OutputName1 = (e.OutputName1);

                        Fails = Fails;
                      }
                    >;
                }
              >
              //----------------------------------------------------------------
              {
                 e.Outputs-B Fails e.Outputs-E =
                   <Fetch
                     <s.CommandLineInfo #CErrorFile>
                     {
                       #CNone = ;

                       e.ErrorFileName = <SaveFile (e.ErrorFileName)>;
                     }
                   >;

                 e.Outputs =
                   <Link s.CommandLineInfo e.Outputs>
                   <WriteLine '** Compilation successed **'>;
              }
            >
          >;
      }
    >;
}

ForEach {
  s.Converter = { e.Elems = <Map s.Converter e.Elems>; };
}

PrintNotFound {
  (NotFound e.FileName) =
    <WriteLine 'COMMAND LINE ERROR: file ' e.FileName ' not found'>;

  (Output e.FileName) = ;

  (Source (e.Source) e.Output) = ;
}

Link {
  s.CommandLineInfo e.Files =
    <Fetch
      <s.CommandLineInfo #CCompileCommand>
      {
        #CNone = ;

        e.CommandLine =
          <System
            e.CommandLine
            <Map
              {
                (e.FileName) = ' "' e.FileName '"';
              }
              e.Files
            >
          >;
      }
    >;
}

$FORWARD ScanCollisions, GetFileName;

RenameFiles {
  s.CommandLineInfo =
    <Fetch
      <s.CommandLineInfo #CCompileCommand>
      {
        #CNone =
          <ForEach
            {
              (Source (e.Source) e.Output) = (Source (e.Source) e.Output);

              (Output e.Output) = (Output e.Output);
            }
          >;

        e.CommandLine =
          {
            e.Files = <ScanCollisions <Map GetFileName e.Files>>;
          };
      }
    >;
}

$FORWARD GetFileName-Aux;

GetFileName {
  (Output e.FileName) =
    (
      <GetFileName-Aux e.FileName> 0 (Output e.FileName)
    );

  (Source (e.Source) e.Output) =
    (
      <GetFileName-Aux e.Output> 0
      (Source (e.Source) e.Output)
    );
}

$FORWARD DoGetFileName;

GetFileName-Aux {
  e.FileName '.cpp' = <DoGetFileName e.FileName>;
}

$FORWARD Lower;

DoGetFileName {
  e.FileName '/' = ;
  e.FileName '\\' = ;
  e.FileName s.Last =
    <DoGetFileName e.FileName>
    <Lower s.Last>;
  = ;
}

Lower {
  s.Char =
    // Сначала мы проверяем, что символ является большой буквой
    <Fetch
      'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
      {
        e.Uppers-B s.Char e.Uppers-E =
          // Символ является большой буквой, находим соответствующую маленькую
          <Fetch
            'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'
            {
              e.UpLo-B s.Char s.Lower e.UpLo-E = s.Lower;
            }
          >;

        e.Uppers = s.Char;
      }
    >;
}

$FORWARD Renumerate, RestoreName;

ScanCollisions {
  e.Files-B (e.FileName 0 (Output e.Output1)) e.Files-M
  (e.FileName 0 (Output e.Output2)) e.Files-E =
    <WriteLine
      'COMMAND LINE ERROR: output files ' e.Output1 ' and '
      e.Output2 ' has some filename ' e.FileName
    >
    <Exit 1>;

  e.Files-B (e.FileName 0 t.Location) e.Files-M
  (e.FileName 0 (Output e.Output)) e.Files-E =
    <ScanCollisions
      e.Files-B (e.FileName 1 t.Location) e.Files-M
      (e.FileName 0 (Output e.Output))
      <Renumerate (e.FileName) e.Files-E>
    >;

  e.Files-B (e.FileName 0 (Output e.Output)) e.Files-M
  (e.FileName 0 t.Location) e.Files-E =
    <ScanCollisions
      e.Files-B (e.FileName 0 (Output e.Output)) e.Files-M
      (e.FileName 1 t.Location)
      <Renumerate (e.FileName) e.Files-E>
    >;

  e.Files-B (e.FileName 0 t.Location1) e.Files-M
  (e.FileName 0 t.Location2) e.Files-E =
    <ScanCollisions
      e.Files-B (e.FileName 0 t.Location1)
      e.Files-M (e.FileName 1 t.Location2)
      <Renumerate (e.FileName) e.Files-E>
    >;

  e.Files = <Map RestoreName e.Files>;
}

//FROM LibraryEx
$EXTERN Inc, DelAccummulator, MapReduce;

Renumerate {
  (e.FileName) e.Files =
    <DelAccummulator
      <MapReduce
        {
          s.NextNumber (e.FileName 0 (Source (e.Source) e.Output)) =
            <Inc s.NextNumber>
            (e.FileName s.NextNumber (Source (e.Source) e.Output));

          s.NextNumber t.NextFile =
            s.NextNumber t.NextFile;
        }
        2 e.Files
      >
    >;
}

//FROM Library
$EXTERN StrFromInt;

RestoreName {
  (e.FileName s.Num (Output e.OutputName)) =
    (Output e.OutputName);

  (e.FileName s.Num (Source (e.Source) e.Output)) =
    (Source
      (e.Source)
      <Fetch
        s.Num e.Output
        {
          0 e.Output1 = e.Output1;

          s.Number e.OutName '.cpp' =
            e.OutName '@' <StrFromInt s.Number> '.cpp';
        }
      >
    );
}
