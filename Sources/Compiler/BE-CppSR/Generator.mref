$MODULE BE-CppSR::Generator;

$IMPORT Math = MMath;
$IMPORT MEscape;
$IMPORT MLambda;
$IMPORT MStrings;
$IMPORT MQualifiedName;

QNameCode {
  t.Name = <DoQNameCode <MQualifiedName::Parse t.Name>>;
}

DoQNameCode {
  (e.First) = <NameCode e.First>;

  (e.First) (e.Second) =
    <NameCode e.First> 'P_' <NameCode e.Second>;

  (e.First) (e.Second) e.Tail =
    <NameCode e.First> 'P_' <DoQNameCode (e.Second) e.Tail>;
}

NameCode {
  e.Name = <MLambda::Map & NameCodeChar e.Name>;
}

NameCodeChar {
  '!' = 'B_';
  '?' = 'Q_';
  '_' = 'U_';
  '-' = 'D_';
  Entry = 'E_';
  FuncName = 'N_';
  Go = 'Entry_Go';
  s.Other = s.Other;
}

FuncArguments {
  = 'refalrts::Iter arg_begin, refalrts::Iter arg_end';
}

NakedArguments {
  = 'refalrts::Iter, refalrts::Iter';
}

TextFromMemoryClass {
  Local = 'static '; Entry = ; InitFinal = ;
}

SwGenFnStart {
  s.MemoryClass s.FnArguments t.Name =
    (
      <TextFromMemoryClass s.MemoryClass>
      'refalrts::FnResult '
      <QNameCode t.Name>
      '(' <s.FnArguments> ') {'
    )
    ('  refalrts::this_is_generated_function();');
}

$ENTRY GenInitCounter {
  InitFinal =
    ('  static unsigned s_counter = 0;')
    ('  refalrts::use_counter(s_counter);');

  s.Other = ;
}

$ENTRY GenFnStart {
  s.MemoryClass t.Name =
    <SwGenFnStart s.MemoryClass & FuncArguments t.Name>;
}

$ENTRY GenFnEnd {
  = ('  return refalrts::cRecognitionImpossible;') ('}') ();
}

$ENTRY GenEEnum {
  t.Name = <SwGenFnStart Entry & NakedArguments t.Name> <GenFnEnd>;
}

$ENTRY GenEnum {
  t.Name = <SwGenFnStart Local & NakedArguments t.Name> <GenFnEnd>;
}

$ENTRY GenExtern {
  t.Name =
    (
      'extern refalrts::FnResult '
      <QNameCode t.Name>
      '(' <FuncArguments> ');'
    )
    ();
}

$ENTRY GenForward {
  t.Name =
    (
      'static refalrts::FnResult '
      <QNameCode t.Name>
      '(' <FuncArguments> ');'
    )
    ();
}

//$ENTRY GenESwap {
//  t.Name = <GenSwap-Aux Entry t.Name>;
//}

$ENTRY GenSwap {
  t.Name = <GenSwap-Aux Local t.Name>;
}

GenSwap-Aux {
  s.MemoryClass t.Name =
    <GenFnStart s.MemoryClass t.Name>
    ('  refalrts::Iter func_name = arg_begin;')
    ()
    ('  refalrts::move_left( func_name, arg_end );')
    ()
    ('  refalrts::Iter info_b = func_name;')
    ('  refalrts::Iter info_e = arg_end;')
    ()
    ('  refalrts::move_left( info_b, info_e );')
    ('  refalrts::move_right( info_b, info_e );')
    ()
    (
      '  static refalrts::Iter s_head = '
      'refalrts::initialize_swap_head( func_name );'
    )
    ()
    ('  refalrts::Iter saved_b;')
    ('  refalrts::Iter saved_e;')
    ()
    ('  refalrts::swap_info_bounds( saved_b, saved_e, s_head );')
    ('  refalrts::splice_evar( arg_begin, saved_b, saved_e );')
    ('  refalrts::swap_save( s_head, info_b, info_e );')
    ('  refalrts::splice_to_freelist( arg_begin, arg_end );')
    ()
    ('  return refalrts::cSuccess;')
    ('}')
    ();
}

$ENTRY GenIdent {
  t.Name =
    <GenIdent-Aux
      (<MakeExternalName t.Name>)
      <QNameCode t.Name>
    >;
}

$ENTRY GenIdent-FuncName {
  t.Name =
    <GenIdent-Aux
      (<MakeExternalName t.Name>)
      <QNameCode t.Name> 'N_'
    >;
}

MakeExternalName {
  t.Name =
    <MakeExternalName-Aux <MQualifiedName::ToPrintable-Dot t.Name>>;
}

MakeExternalName-Aux {
  e.Name Entry = e.Name '#ENTRY';

  e.Name = e.Name;
}

GenIdent-Aux {
  (e.ExternalName) e.InternalName =
    ('#ifndef ' e.InternalName 'DEFINED_R_')
    ('#define ' e.InternalName 'DEFINED_R_')
    ()
    ('//$LABEL ' e.ExternalName)
    ('template <typename refal_param_int>')
    ('struct ' e.InternalName ' {')
    ('  static const char *name() {')
    ('    return "' e.ExternalName '";')
    ('  }')
    ('};')
    ()
    ('#endif // ' e.InternalName 'DEFINED_R_')
    ();
}

$ENTRY GenCommonHeaders {
  = ('// Automatically generated file. Don\'t edit!')
  ('#include "refalrts.h"') () ();
}


$ENTRY GenSentence {
  e.Algorithm =
    <GenSentence-TerminateAccumulator
      <MLambda::MapReduce
        & GenCommand
        ('  ')
        e.Algorithm
      >
    >;
}

GenSentence-TerminateAccumulator {
  (e.Indent) e.Generated =
    e.Generated;
}

BracketsVar-B {
  s.BracketNum s.Nested =
    'bb_' <MStrings::Symb s.BracketNum> '_' <MStrings::Symb s.Nested>;
}

BracketsVar-E {
  s.BracketNum s.Nested =
    'be_' <MStrings::Symb s.BracketNum> '_' <MStrings::Symb s.Nested>;
}

/*
  Величина отступа также определяет режим работы. Отступ в 4 пробела --
  вне цикла по открытой e-переменной, отступ больше -- внутри оного
  цикла.
*/

PrintStkBracket {
  e.Indent (s.StkBracket s.Nested) =
    (e.Indent
      'refalrts::Iter '
      <BracketsVar-B s.StkBracket <Math::Inc s.Nested>> ' = '
      <BracketsVar-B s.StkBracket s.Nested> ';'
    )
    (e.Indent
      'refalrts::Iter '
      <BracketsVar-E s.StkBracket <Math::Inc s.Nested>> ' = '
      <BracketsVar-E s.StkBracket s.Nested> ';'
    );
}

Indent
  (e.Indent) = e.Indent;

GenCommand {
  (e.Indent) (CmdStartSentence) =
    (e.Indent '  ')
    (e.Indent 'do {')
    (e.Indent '  refalrts::start_sentence();')
    (e.Indent '  refalrts::Iter ' <BracketsVar-B 0 0> ' = arg_begin;')
    (e.Indent '  refalrts::Iter ' <BracketsVar-E 0 0> ' = arg_end;')
    (
      e.Indent '  refalrts::move_left( '
      <BracketsVar-B 0 0> ', ' <BracketsVar-E 0 0> ' );'
    )
    (
      e.Indent '  refalrts::move_left( '
      <BracketsVar-B 0 0> ', ' <BracketsVar-E 0 0> ' );'
    )
    (
      e.Indent '  refalrts::move_right( '
      <BracketsVar-B 0 0> ', ' <BracketsVar-E 0 0> ' );'
    );

  (e.Indent) (CmdComment e.Text) =
    (e.Indent) (e.Indent '//' e.Text);

  (e.Indent) (CmdDeclareEVar e.VarInfo) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <PrintEVar-B e.VarInfo> ';')
    (e.Indent 'refalrts::Iter ' <PrintEVar-E e.VarInfo> ';');

  (e.Indent) (CmdDeclareVar e.VarInfo) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <PrintVar e.VarInfo> ';');

  (e.Indent) (CmdChar s.Direction s.BracketNum s.Nested s.Char) =
    (e.Indent)
    <PrintMatchChar (e.Indent) s.Direction s.BracketNum s.Nested s.Char>;

  (e.Indent) (CmdNumber s.Direction s.BracketNum s.Nested s.Number) =
    (e.Indent)
    <PrintMatchNumber
      (e.Indent) s.Direction s.BracketNum s.Nested s.Number
    >;

  (e.Indent) (CmdName s.Direction s.BracketNum s.Nested t.Name) =
    (e.Indent)
    <PrintMatchName (e.Indent) s.Direction s.BracketNum s.Nested t.Name>;

  (e.Indent) (CmdIdent s.Direction s.BracketNum s.Nested t.Name) =
    (e.Indent)
    <PrintMatchIdent
      (e.Indent) s.Direction s.BracketNum s.Nested t.Name
    >;

  (e.Indent)
  (CmdBrackets s.Direction s.BracketNum s.Nested s.InnerBrackets) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <BracketsVar-B s.InnerBrackets 0> ' = 0;')
    (e.Indent 'refalrts::Iter ' <BracketsVar-E s.InnerBrackets 0> ' = 0;')
    <PrintMatchBrackets
      (e.Indent) s.Direction s.BracketNum s.Nested s.InnerBrackets
    >;

  (e.Indent)
  (CmdADT s.Direction s.BracketNum s.Nested s.InnerBrackets e.Name) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <BracketsVar-B s.InnerBrackets 0> ' = 0;')
    (e.Indent 'refalrts::Iter ' <BracketsVar-E s.InnerBrackets 0> ' = 0;')
    <PrintMatchADT
      (e.Indent) s.Direction s.BracketNum s.Nested s.InnerBrackets e.Name
    >;

  (e.Indent) (CmdEmpty s.BracketNum s.Nested) =
    (e.Indent)
    <PrintMatchEmpty (e.Indent) s.BracketNum s.Nested>;

  (e.Indent) (CmdVar s.Direction s.BracketNum s.Nested s.Mode e.Info) =
    (e.Indent)
    <PrintMatchSTVar
      (e.Indent) s.Direction s.BracketNum s.Nested s.Mode e.Info
    >;

  (e.Indent) (CmdRepeated s.Direction s.BracketNum s.Nested e.VarInfo) =
    (e.Indent)
    <PrintMatchRepeated
      (e.Indent) s.Direction s.BracketNum s.Nested e.VarInfo
    >;

  (e.Indent) (CmdClosedE AlgLeft s.BracketNum s.Nested 'e' e.Index) =
    (e.Indent)
    (e.Indent
      <PrintEVar-B 1 'e' e.Index> ' = '
      <BracketsVar-B s.BracketNum s.Nested> ';'
    )
    (e.Indent 'refalrts::use( ' <PrintEVar-B 1 'e' e.Index> ' );')
    (e.Indent
      <PrintEVar-E 1 'e' e.Index> ' = '
      <BracketsVar-E s.BracketNum s.Nested> ';'
    )
    (e.Indent 'refalrts::use( ' <PrintEVar-E 1 'e' e.Index> ' );');

  (e.Indent)
  (CmdOpenedE
    AlgLeft s.BracketNum s.Nested 'e' e.Index (e.BracketsForSave)
  ) =
    (e.Indent '  ')
    (e.Indent 'refalrts::start_e_loop();')
    (e.Indent <PrintEVar-B 1 'e' e.Index> ' = 0;')
    (e.Indent <PrintEVar-E 1 'e' e.Index> ' = 0;')
    (e.Indent 'do {')
    /*
      Объявление и инициализация "внутренних" переменных для цикла.
      Эти переменные (с индексом вложенности на единицу бОльшим)
      используются внутри цикла как границы распознавания подвыражений.
      Поскольку при неудачном сопоставлении в рамках заданной итерации
      нужно попробовать следующий вариант сопоставления, т.е. необходимо
      восстановить предыдущее до сопоставления, мы создаём копию
      состояния, с которой и работаем в рамках итерации.
    */
    <MLambda::Map
      <MLambda::BindLeft
        & PrintStkBracket e.Indent '  '
      >
      e.BracketsForSave
    >;

  (e.Indent) (CmdEmptyResult) =
    (e.Indent)
    ()
    (e.Indent 'refalrts::reset_allocator();');

  (e.Indent) (CmdCopyVar s.ElemNumber s.Mode e.Index) =
    (e.Indent)
    <PrintAllocateCopyVar (e.Indent) s.ElemNumber s.Mode e.Index>;

  (e.Indent) (CmdAllocateElem s.ElemNumber e.ElemInfo) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <PrintElemVar s.ElemNumber> ' = 0;')
    <PrintAllocateElem (e.Indent) s.ElemNumber e.ElemInfo>;

  (e.Indent)
  (CmdAllocateString s.BeginNumber s.EndNumber s.Len e.String) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <PrintElemVar s.BeginNumber> ' = 0;')
    (e.Indent 'refalrts::Iter ' <PrintElemVar s.EndNumber> ' = 0;')
    (e.Indent 'if( ! refalrts::alloc_chars( '
      <PrintElemVar s.BeginNumber> ', ' <PrintElemVar s.EndNumber> ', '
      '\"' <MLambda::Map & MEscape.EscapeChar-Oct e.String> '\", '
      <MStrings::Symb s.Len> ' ) )'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) (CmdCorrectAllocCopyEVar s.ElemNumber s.AltPrev) =
    (e.Indent)
    (e.Indent
      'if ( ' <PrintElemVar s.ElemNumber> ' == 0 )'
      ' ' <PrintElemVar s.ElemNumber> ' ='
      ' ' <PrintPrev s.AltPrev> '; // CORRECT'
    );

  (e.Indent) (CmdLinkBrackets s.Left s.Right) =
    (e.Indent)
    (e.Indent
      'refalrts::link_brackets( '
      <PrintElemVar s.Left> ', ' <PrintElemVar s.Right>
      ' );'
    );

  (e.Indent) (CmdPushStack s.ElemNumber) =
    (e.Indent)
    (e.Indent 'refalrts::push_stack( ' <PrintElemVar s.ElemNumber> ' );');

  (e.Indent) (CmdInsertEVarBefore s.Prev s.Usings 'e' e.Index) =
    (e.Indent)
    (e.Indent
      'refalrts::splice_evar( ' <PrintPrev s.Prev> ', '
      <PrintEVar-B s.Usings 'e' e.Index> ', '
      <PrintEVar-E s.Usings 'e' e.Index> ' );'
    );

  (e.Indent) (CmdInsertSTVarBefore s.Prev s.Usings s.Mode e.Index) =
    (e.Indent)
    (e.Indent
      'refalrts::splice_stvar( ' <PrintPrev s.Prev> ', '
      <PrintVar s.Usings s.Mode e.Index> ' );'
    );

  (e.Indent) (CmdSpliceFromFreeList) =
    (e.Indent)
    (e.Indent 'refalrts::splice_from_freelist( arg_begin );');

  (e.Indent) (CmdReturnResult) =
    (e.Indent)
    (e.Indent 'refalrts::splice_to_freelist( arg_begin, arg_end );')
    (e.Indent 'return refalrts::cSuccess;');

  (e.Indent) (CmdStartEntryCode s.EntryType) =
    (e.Indent '  ')
    (e.Indent 'if( ' <EntryCondition s.EntryType> ' ) {');

  (e.Indent '  ') (CmdEndEntryCode) =
    (e.Indent)
    (e.Indent '}');

  (e.Indent '  ') (CmdOpenedE-EndCycle s.BracketNum s.Nested 'e' e.Index) =
    (e.Indent)
    (e.Indent
      '} while ( refalrts::open_evar_advance( '
      <PrintEVar-B 1 'e' e.Index> ', ' <PrintEVar-E 1 'e' e.Index> ', '
      <BracketsVar-B s.BracketNum s.Nested> ', '
      <BracketsVar-E s.BracketNum s.Nested>
      ' ) );'
    );

  (e.Indent '  ') (CmdEndSentence) =
    (e.Indent)
    (e.Indent '} while ( 0 );') ();
}

EntryCondition {
  Init = '(s_counter ++) == 0';
  Final = '(-- s_counter) == 0';
}

PrintVar {
  s.Usings s.Mode e.Index =
    s.Mode <NameCode e.Index> '_' <MStrings::Symb s.Usings>;
}

PrintEVar-B {
  s.Usings s.Mode e.Index =
    s.Mode <NameCode e.Index> '_b_' <MStrings::Symb s.Usings>;
}

PrintEVar-E {
  s.Usings s.Mode e.Index =
    s.Mode <NameCode e.Index> '_e_' <MStrings::Symb s.Usings>;
}

PrintMatchChar {
  (e.Indent) s.Direction s.BracketNum s.Nested s.Char =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('char') '\'' <MEscape::EscapeChar-Hex s.Char> '\''
    >;
}

PrintMatchNumber {
  (e.Indent) s.Direction s.BracketNum s.Nested s.Number =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('number') <MStrings::Symb s.Number> 'UL'
    >;
}

PrintMatchName {
  (e.Indent) s.Direction s.BracketNum s.Nested t.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('function') '& ' <QNameCode t.Name>
    >;
}

PrintMatchIdent {
  (e.Indent) s.Direction s.BracketNum s.Nested t.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('ident') ' & ' <QNameCode t.Name> '<int>::name'
    >;
}

PrintMatchBrackets {
  (e.Indent) s.Direction s.BracketNum s.Nested s.InnerNum =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('brackets')
      <BracketsVar-B s.InnerNum 0> ', ' <BracketsVar-E s.InnerNum 0>
    >;
}

PrintMatchADT {
  (e.Indent) s.Direction s.BracketNum s.Nested s.InnerNum t.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('adt')
      <BracketsVar-B s.InnerNum 0> ', '
      <BracketsVar-E s.InnerNum 0> ', '
      '& ' <QNameCode t.Name>
    >;
}

BreakerFromIndent {
  '  ' =
    ('    return refalrts::cRecognitionImpossible;');

  '    ' =
    ('      break;');

  e.Indent =
    (e.Indent '  continue;');
}

PrintMatchEmpty {
  (e.Indent) s.BracketNum s.Nested =
    (e.Indent
      'if( ! refalrts::empty_seq( ' <BracketsVar-B s.BracketNum s.Nested> ', '
      <BracketsVar-E s.BracketNum s.Nested> ' ) )'
    )
    <BreakerFromIndent e.Indent>;
}

StrFromDirection {
  AlgLeft = 'left'; AlgRight = 'right';
}

VarMatchFunction { 's' = 'svar'; 't' = 'tvar'; }

PrintMatchSTVar {
  (e.Indent) s.Direction s.BracketNum s.Nested s.Mode e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      (<VarMatchFunction s.Mode>) <PrintVar 1 s.Mode e.Index>
    >;
}

PrintMatchRepeated {
  (e.Indent) s.Direction s.BracketNum s.Nested s.Usings 'e' e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('repeated_evar')
      <PrintEVar-B s.Usings 'e' e.Index> ', '
      <PrintEVar-E s.Usings 'e' e.Index> ', '
      <PrintEVar-B <Math::Dec s.Usings> 'e' e.Index> ', '
      <PrintEVar-E <Math::Dec s.Usings> 'e' e.Index>
    >;

  (e.Indent) s.Direction s.BracketNum s.Nested s.Usings s.Mode e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNum s.Nested
      ('repeated_stvar') <PrintVar s.Usings s.Mode e.Index>
      ', ' <PrintVar <Math::Dec s.Usings> s.Mode e.Index>
    >;
}

PrintMatch {
  (e.Indent) s.Direction s.BracketNum s.Nested (e.Function) e.TextRep =
    (e.Indent
      'if( ! refalrts::' e.Function '_' <StrFromDirection s.Direction>
      '( ' e.TextRep ', ' <BracketsVar-B s.BracketNum s.Nested> ', '
      <BracketsVar-E s.BracketNum s.Nested> ' ) )'
    )
    <BreakerFromIndent e.Indent>;
}

PrintElemVar {
  s.Number = 'n' <MStrings::Symb s.Number>;
}

PrintPrev {
  BEGIN = 'arg_begin';
  s.Counter = <PrintElemVar s.Counter>;
}

PrintAllocateCopyVar {
  (e.Indent) s.ElemNumber 'e' e.Index =
    (e.Indent 'refalrts::Iter ' <PrintElemVar s.ElemNumber> ' = 0;')
    (e.Indent
      'if( ! refalrts::alloc_copy_evar( '
      <PrintElemVar s.ElemNumber> ', '
      <PrintEVar-B 1 'e' e.Index> ', '
      <PrintEVar-E 1 'e' e.Index>
      ' ) )'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) s.ElemNumber s.Mode e.Index =
    (e.Indent 'refalrts::Iter ' <PrintElemVar s.ElemNumber> ' = 0;')
    (e.Indent
      'if( ! refalrts::alloc_copy_' s.Mode 'var( '
      <PrintElemVar s.ElemNumber> ', '
      <PrintVar 1 s.Mode e.Index> ' ) )'
    )
    (e.Indent '  return refalrts::cNoMemory;');
}

PrintAllocateElem {
  (e.Indent) s.ElemNumber s.ElementType e.Info =
    <PrintAllocate_Aux
      (e.Indent) s.ElemNumber
      ( <SwAllocator s.ElementType> )
      ( <SwInfo s.ElementType e.Info> )
    >
    (e.Indent '  return refalrts::cNoMemory;');
}

PrintAllocate_Aux {
  (e.Indent) s.ElemNumber (e.Constructor) (e.Value) =
    (e.Indent
      'if( ! refalrts::' e.Constructor '( ' <PrintElemVar s.ElemNumber>
      e.Value ' ) )'
    );
}

SwAllocator {
  ElChar = 'alloc_char';
  ElName = 'alloc_name';
  ElNumber = 'alloc_number';
  ElIdent = 'alloc_ident';

  ElOpenADT = 'alloc_open_adt';
  ElCloseADT = 'alloc_close_adt';

  ElOpenBracket = 'alloc_open_bracket';
  ElCloseBracket = 'alloc_close_bracket';

  ElOpenCall = 'alloc_open_call';
  ElCloseCall = 'alloc_close_call';
}

SwInfo {
  ElChar s.Char = ', ' '\'' <MEscape::EscapeChar-Hex s.Char> '\'';

  ElName t.Name =
    ', & ' <QNameCode t.Name>
    ', & ' <QNameCode t.Name> 'N_<int>::name';

  ElNumber s.Number = ', ' <MStrings::Symb s.Number> 'UL';

  ElIdent t.Name = ', & ' <QNameCode t.Name> '<int>::name';

  // Остальное -- скобки
  s.Other = ;
}

$END BE-CppSR::Generator.

