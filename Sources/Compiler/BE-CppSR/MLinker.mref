$MODULE BE-CppSR::MLinker;

$IMPORT MError;
$IMPORT MFileIO;
$IMPORT MFileSystem;
$IMPORT MHelpers = Config::MHelpers;
$IMPORT MLambda;
$IMPORT MStrings;

$IMPORT C-Link::MLinker;
$IMPORT C-Link::MMake;
$IMPORT C-Link::MPartialLinker;

/**
  <Link t.L-Config (e.PtProgName) (t.ModuleName e.OutName)>
    == Success
    == Fails
*/
$ENTRY Link
  t.Config (e.PtProgName) e.Modules =
    Success
    <MLambda::Apply
      <Link-SwitchMode <MHelpers::ConfigExtract t.Config LinkerType>>
      t.Config (e.PtProgName) e.Modules
    >;

Link-SwitchMode {
  'none' = &Link-With-C-Link;
  'genmake' = &Link-With-C-Make;
  'make' = &Link-With-C-Make;
  'partial' = &Link-With-C-Part;
  'cojoint' = &Link-Cojoint;

  e.Other =
    <MError::LinkError
      'Option -accelerate-link:' e.Other ' is invalid.\n'
      'Valid options is \"none\", \"genmake\",'
      ' \"partial\" or \"cojoint\"'
    >;
}

Link-With-C-Link
  t.Config (e.PtProgName) e.Modules =
    <Link-With-Generic
      &C-Link.MLinker.C-Link t.Config (e.PtProgName) (e.Modules)
      (Output
        <C-LinkOption t.Config ExecutableFile>
        <MFileSystem::StrFromPath e.PtProgName> //'.cpp.exe'
      )
    >;

Link-With-C-Make
  t.Config (e.PtProgName) e.Modules =
    <Link-With-Generic
      &C-Link.MMake.C-Link t.Config (e.PtProgName) (e.Modules)
      (Output-Exe
        <C-LinkOption t.Config ExecutableFile>
        <MFileSystem::StrFromPath e.PtProgName> //'.cpp.exe'
      )
      (Output-Obj
        <C-LinkOption t.Config ObjectFile>
        <C-LinkOption t.Config ObjectExt>
        <C-LinkOption t.Config CompileOnly>
        <C-LinkOption t.Config GenMakeMakefile>
        <C-LinkOption t.Config GenMakeMake>
        <C-LinkOption t.Config GenMakeFolder>
      )
    >;

Link-With-C-Part
  t.Config (e.PtProgName) e.Modules =
    <Link-With-Generic
      &C-Link.MPartialLinker.C-Link t.Config (e.PtProgName) (e.Modules)
      (Output-Exe
        <C-LinkOption t.Config ExecutableFile>
        <MFileSystem::StrFromPath e.PtProgName> //'.cpp.exe'
      )
      (Output-Obj
        <C-LinkOption t.Config ObjectFile>
        <C-LinkOption t.Config ObjectExt>
        <C-LinkOption t.Config CompileOnly>
      )
    >;

Link-With-Generic
  s.FnLink t.Config (e.PtProgName) (e.Modules) e.Outputs =
    <s.FnLink
      <Compiler-Include-Define-Options t.Config>
      e.Outputs
      <MLambda::Map & PrepareName e.Modules>
      <GetRunTimeFiles t.Config>
    >;

Compiler-Include-Define-Options
  t.Config =
    (Compiler
      (ProgName <MHelpers::ConfigExtract t.Config CCompiler>)
      (Prologue <MHelpers::ConfigExtract t.Config Prologue>)
      (Epilogue <MHelpers::ConfigExtract t.Config Epilogue>)
    )
    (Include
      <C-LinkOption t.Config IncludeOpt>
      <MLambda::Map
        <MLambda::Composite
          & MLambda.UnBracket
          & MFileSystem.StrFromPath
          & MLambda.Bracket
        >
        <MHelpers::ConfigExtract t.Config RunTimeDirs>
      >
    )
    (Define
      <C-LinkOption t.Config DefineOpt>
      ('MODULE_REFAL')
    );

C-LinkOption
  t.Config s.OptName =
    <SwC-LinkOption
      <MHelpers::ConfigExtract t.Config s.OptName>
    >;

SwC-LinkOption {
  /* пусто */ = (Option NotSupport);
  e.Value = (Option e.Value);
}

PrepareName
  (t.ModuleName e.StrFileName) = (e.StrFileName);

GetRunTimeFiles
  t.Config =
    <GetRunTimeFiles-SwFound
      <C-Link::MLinker::LookupRuntimeFiles
        (('cpp'))
        (<MHelpers::ConfigExtract t.Config RunTimeDirs>)
        <MHelpers::ConfigExtract t.Config RunTimeFiles>
      >
    >;

GetRunTimeFiles-SwFound {
  e.Files-B (NotFound e.PtNotFound) e.Files-E =
    <MError::LinkError
      'Run-time file '
      <MFileSystem::StrFromPath e.PtNotFound>
      ' not found'
    >;

  e.Files =
    <MLambda::Map & PrepareRtsName e.Files>;
}

PrepareRtsName
  (Found (e.Ext) e.PtFullPath) =
    (<MFileSystem::StrFromPath e.PtFullPath>);

Link-Cojoint
  t.Config (e.PtProgName) e.Modules =
    <Link-Cojoint-Aux
      t.Config (e.PtProgName)
      (<MFileSystem::StrFromPath e.PtProgName> '.cojoint-cppsr.cpp')
      <MLambda::Map & PrepareName e.Modules>
    >;

Link-Cojoint-Aux {
  t.Config (e.PtProgName) (e.StrCojoint) e.SourceFiles =
    <MFileIO::Save
     (e.StrCojoint)
     <MLambda::Map & GenIncludeLine
       <MStrings::Reverse e.SourceFiles>
     >
    >
    <C-Link.MLinker.C-Link
      <Compiler-Include-Define-Options t.Config>
      (Output
        <C-LinkOption t.Config ExecutableFile>
        <MFileSystem::StrFromPath e.PtProgName>
      )
      (e.StrCojoint) <GetRunTimeFiles t.Config>
    >;
}

GenIncludeLine {
  (e.FileName) = ('#include \"' e.FileName '\"');
}

$END BE-CppSR::MLinker.
