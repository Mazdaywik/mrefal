$MODULE BE-CppSR::MLinker;

$IMPORT MError;
$IMPORT MFileSystem;
$IMPORT MHelpers = Config::MHelpers;
$IMPORT MLambda;

$IMPORT C-Link = C-Link::MLinker;
$IMPORT C-Make = C-Link::MMake;
$IMPORT C-Part = C-Link::MPartialLinker;

/**
  <Link t.L-Config (e.PtProgName) (t.ModuleName e.OutName)>
    == Success
    == Fails
*/
$ENTRY Link
  t.Config (e.PtProgName) e.Modules =
    Success
    <MLambda::Apply
      <Link-SwitchMode <MHelpers::ConfigExtract t.Config LinkerType>>
      t.Config (e.PtProgName) e.Modules
    >;

Link-SwitchMode {
  'none' = &Link-With-C-Link;
  'genmake' = &Link-With-C-Make;
  'partial' = &Link-With-C-Part;

  e.Other =
    <MError::LinkError
      'Option -accelerate-link:' e.Other ' is invalid.\n'
      'Valid options is \"none\", \"genmake\" or \"partial\"'
    >;
}

Link-With-C-Link
  t.Config (e.PtProgName) e.Modules =
    <C-Link::C-Link
      (Compiler
        (ProgName <MHelpers::ConfigExtract t.Config CCompiler>)
        (Prologue <MHelpers::ConfigExtract t.Config Prologue>)
        (Epilogue <MHelpers::ConfigExtract t.Config Epilogue>)
      )
      (Include
        <C-LinkOption t.Config IncludeOpt>
        <MLambda::Map
          <MLambda::Composite
            & MLambda.UnBracket
            & MFileSystem.StrFromPath
            & MLambda.Bracket
          >
          <MHelpers::ConfigExtract t.Config RunTimeDirs>
        >
      )
      (Define
        <C-LinkOption t.Config DefineOpt>
        ('MODULE_REFAL')
      )
      (Output
        <C-LinkOption t.Config ExecutableFile>
        <MFileSystem::StrFromPath e.PtProgName> //'.cpp.exe'
      )
      <MLambda::Map & PrepareName e.Modules>
      <GetRunTimeFiles t.Config>
    >;

Link-With-C-Make
  t.Config (e.PtProgName) e.Modules =
    <C-Make::C-Link
      (Compiler
        (ProgName <MHelpers::ConfigExtract t.Config CCompiler>)
        (Prologue <MHelpers::ConfigExtract t.Config Prologue>)
        (Epilogue <MHelpers::ConfigExtract t.Config Epilogue>)
      )
      (Include
        <C-LinkOption t.Config IncludeOpt>
        <MLambda::Map
          <MLambda::Composite
            & MLambda.UnBracket
            & MFileSystem.StrFromPath
            & MLambda.Bracket
          >
          <MHelpers::ConfigExtract t.Config RunTimeDirs>
        >
      )
      (Define
        <C-LinkOption t.Config DefineOpt>
        ('MODULE_REFAL')
      )
      (Output-Exe
        <C-LinkOption t.Config ExecutableFile>
        <MFileSystem::StrFromPath e.PtProgName> //'.cpp.exe'
      )
      (Output-Obj
        (Option '-o') (Option 'obj') (Option '-c')
        (Option 'compile-and-link.mak')
        (Option 'make')
        (Option 'objects.tmp')
      )
      <MLambda::Map & PrepareName e.Modules>
      <GetRunTimeFiles t.Config>
    >;

Link-With-C-Part
  t.Config (e.PtProgName) e.Modules =
    <C-Part::C-Link
      (Compiler
        (ProgName <MHelpers::ConfigExtract t.Config CCompiler>)
        (Prologue <MHelpers::ConfigExtract t.Config Prologue>)
        (Epilogue <MHelpers::ConfigExtract t.Config Epilogue>)
      )
      (Include
        <C-LinkOption t.Config IncludeOpt>
        <MLambda::Map
          <MLambda::Composite
            & MLambda.UnBracket
            & MFileSystem.StrFromPath
            & MLambda.Bracket
          >
          <MHelpers::ConfigExtract t.Config RunTimeDirs>
        >
      )
      (Define
        <C-LinkOption t.Config DefineOpt>
        ('MODULE_REFAL')
      )
      (Output-Exe
        <C-LinkOption t.Config ExecutableFile>
        <MFileSystem::StrFromPath e.PtProgName> //'.cpp.exe'
      )
      (Output-Obj
        (Option '-o') (Option 'bcc.obj') (Option '-c')
      )
      <MLambda::Map & PrepareName e.Modules>
      <GetRunTimeFiles t.Config>
    >;

C-LinkOption
  t.Config s.OptName =
    <SwC-LinkOption
      <MHelpers::ConfigExtract t.Config s.OptName>
    >;

SwC-LinkOption {
  /* пусто */ = (Option NotSupport);
  e.Value = (Option e.Value);
}

PrepareName
  (t.ModuleName e.StrFileName) = (e.StrFileName);

GetRunTimeFiles
  t.Config =
    <GetRunTimeFiles-SwFound
      <C-Link::LookupRuntimeFiles
        (('cpp'))
        (<MHelpers::ConfigExtract t.Config RunTimeDirs>)
        <MHelpers::ConfigExtract t.Config RunTimeFiles>
      >
    >;

GetRunTimeFiles-SwFound {
  e.Files-B (NotFound e.PtNotFound) e.Files-E =
    <MError::LinkError
      'Run-time file '
      <MFileSystem::StrFromPath e.PtNotFound>
      ' not found'
    >;

  e.Files =
    <MLambda::Map & PrepareRtsName e.Files>;
}

PrepareRtsName
  (Found (e.Ext) e.PtFullPath) =
    (<MFileSystem::StrFromPath e.PtFullPath>);

$END BE-CppSR::MLinker.
