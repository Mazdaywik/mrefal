$MODULE BE-CppSR::MRASL;

$IMPORT BE-CppSR::Generator;
$IMPORT BE-CppSR::MFunctionsAndIdents;
$IMPORT C-Link::MLinker;
$IMPORT Config::MHelpers;
$IMPORT MError;
$IMPORT MFileIO;
$IMPORT MFileSystem;
$IMPORT MLambda;
$IMPORT MMath;
$IMPORT MStrings;


/**
  <Generate t.hIModule e.OutName>
    == t.hIModule
*/
$ENTRY Generate {
  t.hIModule e.OutName =
    <CreateRASL
      (e.OutName)
      <BE-CppSR::MFunctionsAndIdents::Extract t.hIModule>
    >;
}

CreateBinary {
  (e.OutName) e.RaslCode =
    <MFileIO::Close
      <MFileIO::Write
        <MFileIO::Open 'bw' e.OutName>
        <MStrings::Chr e.RaslCode>
      >
    >;
}

CreateRASL {
  (e.OutName) t.hIModule (e.Functions) (e.Identifiers) =
    t.hIModule
    <CreateRASL-Aux
      (e.OutName)
      (<PrepareExternals e.Functions>)
      (<PrepareIdents e.Identifiers>)
      e.Functions
    >;
}

CreateRASL-Aux {
  (e.OutName)
  (s.ExternalCount s.ExternalSize e.ExternalBytes)
  (s.IdentCount s.IdentSize e.IdentBytes)
  e.Functions =
    <CreateBinary
      (e.OutName)
      <GenBlock Start 'RASLCODE'>
      <GenBlock
        ConstTable
        // cookies
        <DWord 0> <DWord 0>
        // external count, ident count, number count, string count
        <DWord s.ExternalCount> <DWord s.IdentCount> <DWord 0> <DWord 0>
        // RASL length, external size, ident size, string size
        <DWord 0> <DWord s.ExternalSize> <DWord s.IdentSize> <DWord 0>
        e.ExternalBytes
        e.IdentBytes
        /* no numbers */
        /* no strings */
        /* no RASL */
      >
      <MLambda::Map &GenFunction e.Functions>
    >;
}

PrepareExternals {
  e.Functions = <PrepareExternals-Aux <MStrings::Length-T e.Functions>>;
}

PrepareExternals-Aux {
  s.ExternalCount e.Functions
    = s.ExternalCount
      <MStrings::Length-T <MLambda::Map &PrepareExternal e.Functions>>;
}

PrepareExternal {
  (s.Type t.AbsolutName) = <MakeFuncName t.AbsolutName>;
}

MakeFuncName {
  t.Name = '*' <BE-CppSR::Generator::MakeExternalName t.Name> '\0';
}

PrepareIdents {
  e.Identifiers = <PrepareIdents-Aux <MStrings::Length-T e.Identifiers>>;
}

PrepareIdents-Aux {
  s.IdentCount e.Identifiers
    = s.IdentCount
      <MStrings::Length-T <MLambda::Map &PrepareIdent e.Identifiers>>;
}

PrepareIdent {
  (e.Name) = e.Name '\0';
}

GenFunction {
  (Defined t.Name) = <GenBlock Native <MakeFuncName t.Name>>;
  (Extern t.Name) = /* ничего не генерируем */;
  (Enum t.Name) = <GenBlock Empty <MakeFuncName t.Name>>;
  (Swap t.Name) = <GenBlock Swap <MakeFuncName t.Name>>;
}


CodeFromType {
  Start = 1;
  ConstTable = 2;
  Native = 4;
  Empty = 5;
  Swap = 6;
}

GenBlock {
  s.Type e.Bytes = <CodeFromType s.Type> <CalcLen e.Bytes>;
}

CalcLen {
  e.Bytes = <CalcLen-Aux <MStrings::Length-T e.Bytes>>;
}

CalcLen-Aux {
  s.Len e.Bytes = <DWord s.Len> e.Bytes;
}

DWord {
  s.1 s.2 s.3 s.4 = s.1 s.2 s.3 s.4;

  e.Low s.High = <DWord e.Low <MMath::Mod s.High 256> <MMath::Div s.High 256>>;
}


/**
  <Link t.L-Config (e.PtProgName) (t.ModuleName e.OutName)*>
    == Success
    == Fails
*/
$ENTRY Link {
  t.L-Config (e.PtProgName) e.Modules =
    <Link-ExistTarget
      t.L-Config
      (<FindTargets <MFileSystem::StrFromPath e.PtProgName>>)
      e.Modules
    >;
}

FindTargets {
  e.StrProgName =
    <FindTargets-SwExist
      (e.StrProgName)
      (<MFileSystem::ExistFile-T e.StrProgName>)
      (<MFileSystem::ExistFile-T e.StrProgName '.exe'>)
    >;
}

FindTargets-SwExist {
  (e.StrProgName) e.Targets-B (True e.TargetName) e.Targets-E = e.TargetName;

  (e.StrProgName) e.Targets =
    <MError::LinkError
      'RASL linker: target file ' e.StrProgName ' is not found'
    >;
}

Link-ExistTarget {
  t.Config (e.StrProgName) e.Modules =
    <Link-GetFileList
      (e.StrProgName)
      <MLambda::Map & PrepareName e.Modules>
      <GetRunTimeFiles (e.StrProgName) t.Config>
    >;
}

PrepareName {
  (t.ModuleName e.FileName) = (e.FileName);
}

GetRunTimeFiles
  (e.TargetName) t.Config =
    <MLambda::Map
      <MLambda::BindLeft & PrepareRtsName e.TargetName>
      <C-Link::MLinker::LookupRuntimeFiles
        (('rasl'))
        (<Config::MHelpers::ConfigExtract t.Config RunTimeDirs>)
        <Config::MHelpers::ConfigExtract t.Config RunTimeFiles>
      >
    >;

PrepareRtsName {
  e.TargetName (NotFound e.PtNotFound) =
    <MFileSystem::RemoveFile e.TargetName>
    <MError::LinkError
      'Run-time file '
      <MFileSystem::StrFromPath e.PtNotFound>
      ' not found'
    >;

  e.TargetName (Found (e.Ext) e.PtFullPath) =
    (<MFileSystem::StrFromPath e.PtFullPath>);
}

Link-GetFileList {
  (e.TargetName) e.Files =
    Success
    <MFileIO::Close
      <MFileIO::Write
        <PrepareAlignedTarget e.TargetName>
        <MLambda::Map
          <MLambda::Composite
            & MLambda.UnBracket
            & MFileIO.LoadBinary
          >
          e.Files
        >
      >
    >;
}

PrepareAlignedTarget {
  e.TargetName =
    <PrepareAlignedTarget-Mod
      <MFileSystem::FileAttribute Size e.TargetName>
      <MFileIO::Open 'ba' e.TargetName>
    >;
}

PrepareAlignedTarget-Mod {
  (s.FileSize) t.hTarget =
    <PrepareAlignedTarget-WriteAlign t.hTarget <MMath::Mod s.FileSize 4096>>;
}

PrepareAlignedTarget-WriteAlign {
  t.hTarget 0 = t.hTarget;
  t.hTarget s.NotAligned =
    <MFileIO::Write
      t.hTarget <MStrings::Repeat <MMath::Sub 4096 s.NotAligned> '@'>
    >;
}

$END BE-CppSR::MRASL.
