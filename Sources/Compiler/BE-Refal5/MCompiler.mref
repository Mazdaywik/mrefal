$MODULE BE-Refal5::MCompiler;

$IMPORT MEscape;
$IMPORT MFileIO;
$IMPORT MHash = BE-Refal5::MHash;
$IMPORT MIModule;
$IMPORT MLambda;
$IMPORT MQualifiedName;
$IMPORT MStrings;
$IMPORT MVersion;

$IMPORT MProfiler;

/**
  <Generate t.IModule e.OutName>
    == t.IModule
*/
$ENTRY Generate
  t.IModule e.OutName =
    <MProfiler::Quantify &Profiled-Generate t.IModule e.OutName>;

Profiled-Generate
  t.IModule e.OutName =
    <SaveModule
      (e.OutName)
      ('v ' <MVersion::ROut>)
      ('r file ' e.OutName)
      ()
      <ModuleToBack <GenerateContent t.IModule>>
    >;

ModuleToBack
  t.IModule e.Lines = e.Lines t.IModule;

SaveModule
  (e.OutName) e.Lines t.IModule =
    <MFileIO::Save (e.OutName) e.Lines>
    t.IModule;

GenerateContent
  t.hIModule =
    <GenerateContent-EntryPoints
      <MIModule::GetEntryPoint t.hIModule>
    >;

GenerateContent-EntryPoints {
  t.hIModule Go (Result e.Expr) =
    <GenerateElements t.hIModule>
    ('e ' <GenerateExpression e.Expr>);

  t.hIModule Regular None None =
    <GenerateElements t.hIModule>;

  t.hIModule Regular (Result e.InitCode) None =
    <GenerateElements t.hIModule>
    ('e ' <GenerateExpression e.InitCode>);

  t.hIModule Regular t.InitCode (Result e.FinalCode) =
    <GenFinalizer
      <MIModule::GetModuleName t.hIModule>
      t.InitCode (Result e.FinalCode)
    >;
}

GenFinalizer {
  t.hIModule t.ModuleName t.InitCode (Result e.FinalCode) =
    <GenerateElements t.hIModule>
    <GenFinalizer-Aux
      (<HashedName 'Entry' <QualifiedToLine t.ModuleName> '::__Finalizer'>)
      t.InitCode e.FinalCode
    >;
}

GenFinalizer-Aux {
  (e.FinalizerName) None e.FinalCode =
    <GenFinalizer-Function
      (e.FinalizerName) e.FinalCode
    >
    ('e <Br Finalizers \'=\' $' e.FinalizerName '$ >');

  (e.FinalizerName) (Result e.InitCode) e.FinalCode =
    <GenFinalizer-Function
      (e.FinalizerName) e.FinalCode
    >
    ('e '
      <GenerateExpression e.InitCode>
      ' <Br Finalizers \'=\' $' e.FinalizerName '$ >'
    );
}

GenFinalizer-Function {
  (e.FinalizerName) e.FinalCode =
    ('b ' e.FinalizerName)
    ('c $' e.FinalizerName '$ {')
    ('c \t= ' <GenerateExpression e.FinalCode> ' ;')
    ('c }');
}

GenerateElements
  t.IModule =
    <MLambda::MapReduce
      & GenerateElement
      <MIModule::GetFunctionList t.IModule>
    >;

GenerateElement
  t.hIModule t.NextFnName =
    <GenerateElement-Aux
      <MIModule::AbsolutName t.hIModule t.NextFnName>
      t.NextFnName
    >;

GenerateElement-Aux
  t.IModule t.QualifiedName t.FnName =
    <SwGenerateElement
      <MIModule::GetFunctionAttribute
        t.IModule ScopeClass t.FnName
      >
      t.QualifiedName t.FnName
    >;

SwGenerateElement {
  t.IModule Found Swap t.SwapName t.FnName =
    t.IModule
    <GenerateSwap t.SwapName>;

  t.IModule Found s.FnScopeClass t.FnName t.PlainFnName =
    <GenerateFunction
      t.IModule s.FnScopeClass t.FnName t.PlainFnName
    >;
}

GenerateSwap
  /*
    b Swap::ModuleName::SomeHolder
    c $Swap::ModuleName::SomeHolder$ {
    c   e.$Index::NewValue$ =
    c     <Dg ('ModuleName::SomeHolder')>
    c     <Br ('ModuleName::SomeHolder') '=' e.$Index::NewValue$ >;
    c }

  */
  t.SwapName =
    ( 'b ' <XQualifiedToLine Swap t.SwapName> )
    ('c $' <XQualifiedToLine Swap t.SwapName> '$ {')
    ('c \te.$Index::NewValue$ =')
    ('c \t\t<Dg (\'' <QualifiedToLine t.SwapName> '\')>')
    ('c \t\t<Br (\'' <QualifiedToLine t.SwapName> '\') \'=\' e.$Index::NewValue$ >;')
    ('c }') ();

GenerateFunction
  t.IModule s.FnScopeClass t.QualifiedName t.FnName =
    <GenerateFunction-Aux
      s.FnScopeClass t.QualifiedName
      <MIModule::GetFunctionAttribute
        t.IModule Body t.FnName
      >
    >;

GenerateFunction-Aux
  s.FnScopeClass t.QualifiedName
  t.IModule Found (e.Sentences) =
    t.IModule
    <GenerateFnHeader s.FnScopeClass t.QualifiedName>
    <GenerateFnBody e.Sentences>;

GenerateFnHeader
  s.ScopeClass t.QualifiedFnName =
    ( 'b ' <XQualifiedToLine s.ScopeClass t.QualifiedFnName> )
    ( 'c $' <XQualifiedToLine s.ScopeClass t.QualifiedFnName> '$ {' );

XQualifiedToLine
  s.ScopeClass t.QualifiedName =
    <HashedName
      <ScopeClassToPrefix s.ScopeClass>
      <QualifiedToLine t.QualifiedName>
    >;

HashedName {
  e.Name = <HashedName-Aux <MHash::Hash e.Name>>;
}

HashedName-Aux {
  e.Name s.Hash = e.Name '#' <MStrings::Symb s.Hash>;
}

QualifiedToLine
  t.QualifiedFnName =
    <SegmentsToLine
      <MQualifiedName::Parse t.QualifiedFnName>
    >;

SegmentsToLine {
  (e.Segment) e.Tail =
    '::' e.Segment <SegmentsToLine e.Tail>;

  = ;
}

ScopeClassToPrefix {
  Entry = 'Entry'; Local = 'Local'; Swap = 'Swap'; ADT = 'ADT';
}

GenerateFnBody {
  // Обработка пустой функции
  = ('c NF = NF ; }') ();

  e.Sentences =
    <GenerateSentences e.Sentences>
    ('c }') ();
}

GenerateSentences {
  (e.NextSentence) e.Tail =
    <GenerateOneSentence
      e.NextSentence
    > <GenerateSentences e.Tail>;

  = ;
}

GenerateOneSentence
  (Pattern e.Pattern) (Result e.Result) =
    ( 'c \t' <GenerateExpression e.Pattern> '=' )
    ( 'c \t\t' <GenerateExpression e.Result> ';' );

GenerateExpression {
  t.Term e.Tail =
    <GenerateTerm t.Term> ' '
    <GenerateExpression e.Tail>;

  = ;
}

GenerateTerm {
  (Identifier t.SrcPos e.Name) =
    '$' <HashedName  'Ident::' e.Name> '$';

  (EVar e.Name) =
    'e.$' <HashedName  'Index::' e.Name> '$';

  (SVar e.Name) =
    's.$' <HashedName  'Index::' e.Name> '$';

  (TVar e.Name) =
    't.$' <HashedName  'Index::' e.Name> '$';

  (Literal e.Content) =
    '\'' <EscapeText e.Content> '\'';

  (Macro s.Value) =
    <MStrings::Symb s.Value>;

  (Structure e.InBrackets) =
    '( $' <HashedName 'ADT::__StructureBrackets'> '$ '
    <GenerateExpression e.InBrackets>
    ')';

  (Abstract (e.Callable) e.InBrackets) =
    '( ' <GenerateCallable e.Callable> ' '
    <GenerateExpression e.InBrackets>
    ')';

  (Function (e.Callable) e.Argument) =
    '<' <GenerateCallable e.Callable> ' '
    <GenerateExpression e.Argument> '>';

  (IndirectCall (SVar e.Index) e.Argument) =
    '<Mu s.$' <HashedName  'Index::' e.Index> '$ '
    <GenerateExpression e.Argument> '>';

  (FnPtr (e.Callable)) =
    <GenerateCallable e.Callable>;
}

EscapeText {
  s.Char e.Tail =
    <EscapeChar s.Char> <EscapeText e.Tail>;

  = ;
}

EscapeChar {
  '$' = '$$';
  s.Char = <MEscape::EscapeChar-Hex s.Char>;
}

GenerateCallable
  s.CallType t.SrcPos t.QualifiedFnName =
    '$' <XQualifiedToLine s.CallType t.QualifiedFnName> '$';

$END BE-Refal5::MCompiler.
