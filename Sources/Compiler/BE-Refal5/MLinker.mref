$MODULE BE-Refal5::MLinker;

$IMPORT MCreateDirIfNeed;
$IMPORT MError;
$IMPORT MExeTyper = BE-Refal5::MExeTyper;
$IMPORT MFileIO;
$IMPORT MFileSystem;
$IMPORT MLambda;
$IMPORT MLinkerAliasTable = BE-Refal5::MLinkerAliasTable;
$IMPORT MOrder;
$IMPORT MOS;
$IMPORT MStrings;
$IMPORT MVersion;

$IMPORT MProfiler;

/**
  <Link (e.PtProgName) (t.ModuleName e.ROutName)*>
    == Success
    == Fails
*/
$ENTRY Link
  (e.ProgName) e.Modules =
    <MProfiler::Quantify &Profiled-Link (e.ProgName) e.Modules>;

Profiled-Link {
  (e.PtProgName) e.ROutFiles =
    <StartLinkLoop
      <MExeTyper::Create
        <DefLim> <MFileSystem::StrFromPath e.PtProgName> '.ref'
      >
      <CreateUnitStorage>
      e.ROutFiles
    >

    <MOS::System 'refc ' <MFileSystem::StrFromPath e.PtProgName> '.ref'>
    Success;
}

DefLim = 64;

StartLinkLoop
  t.hExeTyper t.UnitStorage e.Modules =
    <StartLinkLoop-Aux
      t.UnitStorage
      <MLinkerAliasTable::Create>
      t.hExeTyper
      <MLambda::Reduce
        & SortUnits
        ( (/* builtins */) (/* inits */) (/* functions */) )
        <MLambda::Map
          & LoadUnitsFromModule
          <MStrings::Reverse e.Modules>
        >
      >
    >;

SortUnits {
  ( (e.Builtins) (e.Inits) (e.Functions) )
  (EntryPoint e.Code) =
    ( (e.Builtins) (e.Inits e.Code) (e.Functions) );

  ( (e.Builtins) (e.Inits) (e.Functions) )
  (RealName (e.MR-Name) e.R5-Name) =
    ( (e.Builtins (RealName (e.MR-Name) e.R5-Name))
      (e.Inits) (e.Functions)
    );

  ( (e.Builtins) (e.Inits) (e.Functions) )
  t.OtherUnit =
    ( (e.Builtins) (e.Inits) (e.Functions t.OtherUnit) );
}

LoadUnitsFromModule
  (t.ModuleName e.ObjName) = <LoadUnits e.ObjName>;

StartLinkLoop-Aux {
  t.UnitStorage t.AliasTable t.hExeTyper
  ( (e.BuiltIns) (e.InitCode) (e.Units) ) =
    <LinkLoop
      Continue
      <MLambda::Reduce
        & AddUnit
        <AddRequest
          <MLambda::Reduce
            & AddLinkedBuiltIn t.UnitStorage e.BuiltIns
          >
          'Starter'
        >
        <RuntimeCode e.InitCode>
        e.Units
      >
      <MLambda::Reduce
        & AddBuiltIn t.AliasTable e.BuiltIns
      >
      t.hExeTyper
    >;
}

RuntimeCode {
  e.InitCode =
    // Starter
    (('Starter')
      ('$$ENTRY Go { = ' e.InitCode '<$Entry::__Exit$ 0 >; }')
    )
    // Entry::__Exit
    <ExitFunctionCode>;
}

ExitFunctionCode =
  (
    // Баннер
    ('Entry::__Exit')
    // Код
    ('$$ENTRY $Entry::__Exit$ {')
    ('  s.$Index::RetCode$ , <Dg Finalizers >: {')
    ('    s.$Index::NextFinalizer$ =')
    ('      <Mu s.$Index::NextFinalizer$ >')
    ('      <$Entry::__Exit$ s.$Index::RetCode$ >;')
    ('    = <Exit s.$Index::RetCode$ >;')
    ('  };')
    ('}')
  );

AddLinkedBuiltIn {
  t.UnitStorage (RealName (e.MR-Name) e.R5-Name) =
    <AddLinked t.UnitStorage e.MR-Name>;
}

AddBuiltIn {
  t.AliasTable (RealName (e.MR-Name) e.R5-Name) =
    <MLinkerAliasTable::AddBuiltIn
      t.AliasTable (e.MR-Name) e.R5-Name
    >;
}

LinkLoop {
  Continue t.UnitStorage t.AliasTable t.ExeTyper =
    <LinkLoop
      <SwLinkNextUnit
        <GetNextUnit t.UnitStorage>
        t.AliasTable t.ExeTyper
      >
    >;

  Finish t.UnitStorage t.AliasTable t.ExeTyper =
    <PrintUnresolvedUnits t.UnitStorage>
    <MLinkerAliasTable::Destroy
      <MLinkerAliasTable::OutAliases t.AliasTable>
    >
    <MExeTyper::Destroy t.ExeTyper>;

  LoadModule t.UnitStorage t.AliasTable t.ExeTyper =
    <MError::LinkError
      'Unresolved name '
      <NextRequestedName-D t.UnitStorage>
    >;
}

SwLinkNextUnit {
  t.UnitStorage Finish t.AliasTable t.ExeTyper =
    Finish t.UnitStorage t.AliasTable t.ExeTyper;

  t.UnitStorage None t.AliasTable t.ExeTyper =
    LoadModule t.UnitStorage t.AliasTable t.ExeTyper;

  t.UnitStorage (e.Unit) t.AliasTable t.ExeTyper =
    Continue
    <TypeUnit
      t.UnitStorage t.AliasTable t.ExeTyper e.Unit
    >;
}

PrintUnresolvedUnits
  t.UnitStorage =
    //<DestroyUnitStorage t.UnitStorage>;
    <CreateNotLinkedFile
      <NotLinkedList t.UnitStorage>
    >;

CreateNotLinkedFile
  t.UnitStorage e.UnitNames =
    <DestroyUnitStorage t.UnitStorage>
    <MFileIO::Save
      (<MCreateDirIfNeed::InfoDir> '/Not linked.txt')
      ('Not linked units')
      <ListNames e.UnitNames>
    >;

ListNames
  e.Names =
    <DoListNames <MOrder::Sort e.Names>>;

DoListNames {
  (e.Name) e.Tail =
    ('  ' e.Name)
    <DoListNames e.Tail>;

  = ;
}

/*------------------------------------------------------------------------------
 Хранилище единиц компоновки.

 Внутреннее устройство:
 t.UnitStorage ::=
  [UnitStorage (Requests e.Requests) (Units e.Units) (Linked e.Linked)]
 e.Requests ::= (e.UnitName)*
 e.Units ::= t.LinkUnit*
 e.Linked ::= (e.UnitName)*
------------------------------------------------------------------------------*/

$DATA UnitStorage;

/**
  <CreateUnitStorage> == t.UnitStorage
*/
CreateUnitStorage =
  [UnitStorage (Requests) (Units) (Linked)];

/**
  <AddUnit t.UnitStorage t.Unit>
    == t.UnitStorage
*/
AddUnit
  [UnitStorage t.Request (Units e.Units) t.Linked]
  t.Unit =
    [UnitStorage
      t.Request (Units e.Units t.Unit) t.Linked
    ];

/**
  <AddRequest t.UnitStorage e.Name>
    == t.UnitStorage
*/
AddRequest {
  t.UnitStorage 'Entry::' e.Name =
    <AddRequestAux t.UnitStorage 'Entry::' e.Name>;

  t.UnitStorage 'Local::' e.Name =
    <AddRequestAux t.UnitStorage 'Local::' e.Name>;

  t.UnitStorage 'Swap::' e.Name =
    <AddRequestAux t.UnitStorage 'Swap::' e.Name>;

  t.UnitStorage 'Starter' =
    <AddRequestAux t.UnitStorage 'Starter'>;

  t.UnitStorage e.OtherName =
    t.UnitStorage;
}

AddRequestAux {
  [UnitStorage
    t.Request t.Units (Linked e.Linked-B (e.Name) e.Linked-E)
  ] e.Name =
    [UnitStorage
      t.Request t.Units
      (Linked e.Linked-B (e.Name) e.Linked-E)
    ];

  [UnitStorage
    (Requests e.Requests-B (e.Name) e.Requests-E) t.Units t.Linked
  ] e.Name =
    [UnitStorage
      (Requests e.Requests-B (e.Name) e.Requests-E)
      t.Units t.Linked
    ];

  [UnitStorage
    (Requests e.Requests) t.Units t.Linked
  ]
  e.Name =
    [UnitStorage
      (Requests e.Requests (e.Name)) t.Units t.Linked
    ];
}

/**
  <AddLinked t.UnitStorage e.Name>
    == t.UnitStorage
*/
AddLinked
  [UnitStorage t.Requests t.Units (Linked e.Linked)]
  e.Name =
    [UnitStorage
      t.Requests t.Units (Linked e.Linked (e.Name))
    ];

/**
  <GetNextUnit t.UnitStorage>
    == t.UnitStorage t.Unit
    == t.UnitStorage None
    == t.UnitStorage Finish
*/
GetNextUnit {
  [UnitStorage (Requests) t.Units t.Linked] =
    [UnitStorage (Requests) t.Units t.Linked]
    Finish;

  [UnitStorage
    (Requests e.Requests-B (e.NextName) e.Requests-E)
    (Units e.Units-B ((e.NextName) e.Body) e.Units-E)
    t.Linked
  ] =
    [UnitStorage
      (Requests e.Requests-B e.Requests-E)
      (Units e.Units-B e.Units-E)
      t.Linked
    ] ((e.NextName) e.Body);

  [UnitStorage t.Requests t.Units t.Linked] =
    [UnitStorage t.Requests t.Units t.Linked] None;
}

/**
  <DestroyUnitStorage t.UnitStorage> == empty
*/
DestroyUnitStorage
  [UnitStorage
    (Requests e.Requests)
    (Units e.Units)
    (Linked e.Linked)
  ] = ;

/**
  <NextRequestedName-D t.UnitStorage>
    == e.Name
*/
NextRequestedName-D {
  [UnitStorage
    (Requests (e.NextName) e.Requests) t.Units t.Linked
  ] = e.NextName;

  t.UnitStorage = 'Unknown';
}

/**
  <NotLinkedList t.UnitStorage>
    == t.UnitStorage (e.NotLinkedUnitName)*
*/
NotLinkedList
  [UnitStorage t.Requests (Units e.Units) t.Linked] =
    [UnitStorage t.Requests (Units e.Units) t.Linked]
    <NameFromUnit e.Units>;

NameFromUnit {
  ((e.Name) e.Content) e.Tail =
    (e.Name) <NameFromUnit e.Tail>;

  = ;
}

/*------------------------------------------------------------------------------
 Последующие Type-фукции выполняют вывод содержимого единиц компоновки в выход-
 ной файл.
------------------------------------------------------------------------------*/

LoadUnits
  e.FileName =
    <GroupLinkUnits
      (e.FileName)
      (<MVersion::ROut>)
      <DoLoadUnits
        <MFileIO::Load e.FileName>
      >
    >;

GroupLinkUnits {
  (e.?FileName) (e.ValidVersion) (Version e.ValidVersion)
  e.Lines =
    <DoGroupLinkUnits e.Lines>;

  (e.FileName) (e.ValidVersion) (Version e.InvalidVersion)
  e.?Lines =
    <MError::LinkError
      'Invalid version in .rout-file `' e.FileName '\''
    >;

  (e.FileName) (e.?ValidVersion) e.?OtherLines =
    <MError::LinkError
      'Invalid .rout-file `' e.FileName '\' -- missed version tag'
    >;
}

DoGroupLinkUnits {
  (Banner e.Banner) e.Lines =
    <GroupOneLinkUnit
      ((e.Banner)) e.Lines
    >;

  (EntryPoint e.Code) e.Lines =
    (EntryPoint e.Code)
    <DoGroupLinkUnits e.Lines>;

  = ;
}

GroupOneLinkUnit {
  (e.Unit) (Code e.CodeLine) e.Lines =
    <GroupOneLinkUnit
      (e.Unit (e.CodeLine)) e.Lines
    >;

  ((e.Banner)) (RealName e.RealName) e.Lines =
    (RealName (e.Banner) e.RealName)
    <DoGroupLinkUnits e.Lines>;

  (e.Unit) t.OtherLine e.Lines =
    (e.Unit)
    <DoGroupLinkUnits t.OtherLine e.Lines>;

  (e.Unit) = (e.Unit);
}

DoLoadUnits {
  = ;

  (e.NextLine) e.Lines =
    <AnalyseLine (e.NextLine)>
    <DoLoadUnits e.Lines>;
}

AnalyseLine {
  ('v ' e.Version) = (Version e.Version);

  ('b ' e.BannerLine) = (Banner e.BannerLine);

  ('r ' e.?RemarkLine) = ;

  ('c ' e.CodeLine) = (Code <HideQuotes e.CodeLine>);

  ('p ' e.RealName) = (RealName e.RealName);

  ('e ' e.EntryPointCode) = (EntryPoint e.EntryPointCode);

  () = ;
}

TypeUnit {
  t.UnitStorage t.Aliases t.ExeTyper (e.Banner) e.Lines =
    <DoTypeUnits
      <AddLinked t.UnitStorage e.Banner>
      t.Aliases
      <MExeTyper::TypeComment t.ExeTyper e.Banner>
      e.Lines
    >;
}

DoTypeUnits {
  t.UnitStorage t.Aliases t.ExeTyper =
    //<DestroyUnitStorage t.UnitStorage>
    t.UnitStorage
    t.Aliases t.ExeTyper;

  t.UnitStorage t.Aliases t.ExeTyper (e.NextLine) e.Lines =
    <DoTypeUnits
      <TypeLine t.UnitStorage t.Aliases t.ExeTyper e.NextLine>
      e.Lines
    >;
}

HideQuotes {
  '\'' e.Tail = <StartHidingQuote ('\'') e.Tail>;
  '\"' e.Tail = <StartHidingQuote ('\"') e.Tail>;
  s.Other e.Tail = s.Other <HideQuotes e.Tail>;
  = ;
}

StartHidingQuote {
  (s.Quote e.Hidden) '\\' s.Escaped e.Tail =
    <StartHidingQuote (s.Quote e.Hidden '\\' s.Escaped) e.Tail>;

  (s.Quote e.Hidden) s.Quote e.Tail =
    (s.Quote e.Hidden) <HideQuotes e.Tail>;

  (s.Quote e.Hidden) s.Other e.Tail =
    <StartHidingQuote (s.Quote e.Hidden s.Other) e.Tail>;

  (s.Quote e.Hidden) =
    <MError::LinkError
      'May be unballanced quote in StartHidingQoute'
    >;
}

TypeLine {
  t.UnitStorage t.Aliases t.ExeTyper =
    t.UnitStorage t.Aliases t.ExeTyper;

  t.UnitStorage t.Aliases t.ExeTyper e.Line =
    <TypeLine
      <SwTypeContent
        t.UnitStorage t.Aliases t.ExeTyper e.Line
      >
    >;
}

SwTypeContent {
  t.UnitStorage t.Aliases t.ExeTyper (s.Quote e.HiddenQuote) e.Raw =
    t.UnitStorage t.Aliases
    <MExeTyper::TypeQuoted
      t.ExeTyper s.Quote e.HiddenQuote
    > e.Raw;

  t.UnitStorage t.Aliases t.ExeTyper '$$' e.Raw =
    t.UnitStorage t.Aliases <MExeTyper::TypeChar t.ExeTyper '$'> e.Raw;

  t.UnitStorage t.Aliases t.ExeTyper '$' e.FnName '$' e.Raw =
    <AddRequest t.UnitStorage e.FnName>
    <TypeRenamed
      ( <MLinkerAliasTable::Lookup t.Aliases e.FnName> )
      t.ExeTyper e.Raw
    >;

  t.UnitStorage t.Aliases t.ExeTyper s.Char e.Raw =
    t.UnitStorage t.Aliases
    <MExeTyper::TypeChar t.ExeTyper s.Char>
    e.Raw;
}

TypeRenamed
  (t.Aliases e.FnAlias) t.ExeTyper e.Raw =
    t.Aliases <MExeTyper::TypeRenamed t.ExeTyper e.FnAlias> e.Raw;

$END BE-Refal5::MLinker.
