$MODULE BE-Refal5::MLinker;

$IMPORT MError;
$IMPORT MExeTyper = BE-Refal5::MExeTyper;
$IMPORT MFileIO;
$IMPORT MFileSystem;
$IMPORT MHash = BE-Refal5::MHash;
$IMPORT MLambda;
$IMPORT MLinkerAliasTable = BE-Refal5::MLinkerAliasTable;
$IMPORT MOrder;
$IMPORT MOS;
$IMPORT MStrings;
$IMPORT MVersion;

$IMPORT MProfiler;

/**
  <Link (e.PtProgName) (t.ModuleName e.ROutName)*>
    == Success
    == Fails
*/
$ENTRY Link
  (e.ProgName) e.Modules =
    <MProfiler::Quantify &Profiled-Link (e.ProgName) e.Modules>;

Profiled-Link {
  (e.PtProgName) e.Modules =
    <StartLinkLoop
      <MLambda::Reduce
        & SortUnits
        ( (/* builtins */) (/* inits */) (/* functions */) )
        <MLambda::Map
          & LoadUnitsFromModule
          <MStrings::Reverse e.Modules>
        >
      >
      <MFileSystem::StrFromPath e.PtProgName>
    >

    <MProfiler::Quantify & CallRefc e.PtProgName>
    Success;
}

LoadUnitsFromModule
  (t.ModuleName e.ObjName) = <LoadUnits e.ObjName>;

CallRefc {
  e.PtProgName =
    <MOS::System 'refc ' <MFileSystem::StrFromPath e.PtProgName> '.ref'>;
}

SortUnits {
  ( (e.Builtins) (e.Inits) (e.Functions) )
  (EntryPoint e.Code) =
    ( (e.Builtins) (e.Inits e.Code) (e.Functions) );

  ( (e.Builtins) (e.Inits) (e.Functions) )
  (RealName (e.MR-Name) e.R5-Name) =
    ( (e.Builtins (RealName (e.MR-Name) e.R5-Name))
      (e.Inits) (e.Functions)
    );

  ( (e.Builtins) (e.Inits) (e.Functions) )
  t.OtherUnit =
    ( (e.Builtins) (e.Inits) (e.Functions t.OtherUnit) );
}

StartLinkLoop {
  ( (e.BuiltIns) (e.InitCode) (e.Units) )
  e.TargetFileName =
    <StopLinkLoop
      <LinkLoop
        <CreateAliasTable e.BuiltIns>
        <CreateExeTyper e.TargetFileName>
        <CreateUnitStorage
          (<MLambda::Map & SelectBuiltInMRName e.BuiltIns>)
          <ExitFunctionCode> e.Units
        >
        <RuntimeCode e.InitCode>
      >
      e.TargetFileName
    >;
}

SelectBuiltInMRName {
  (RealName (e.MR-Name) e.R5-Name) = (e.MR-Name);
}

CreateAliasTable {
  e.BuiltIns =
    <MLambda::Reduce
      & AddBuiltIn <MLinkerAliasTable::Create> e.BuiltIns
    >;
}

AddBuiltIn {
  t.AliasTable (RealName (e.MR-Name s.Hash) e.R5-Name) =
    <MLinkerAliasTable::AddBuiltIn
      t.AliasTable (e.MR-Name s.Hash) e.R5-Name
    >;
}

CreateExeTyper {
  e.TargetFileName =
    <MExeTyper::Create <DefLim> e.TargetFileName '.ref'>;
}

DefLim = 64;

Hash {
  e.Line = <MHash::Hash e.Line>;
}

RuntimeCode {
  e.InitCode =
    // Starter
    ((<Hash 'Starter'>)
      ('$ENTRY Go { = ' e.InitCode '<'('$' <Hash 'Entry::__Exit'>)' 0 >; }')
    );
}

ExitFunctionCode =
  // Entry::__Exit
  (
    // Баннер
    (<Hash 'Entry::__Exit'>)
    // Код
    ('$ENTRY ' ('$' <Hash 'Entry::__Exit'>)' {')
    ('  s.'('$' <Hash 'Index::RetCode'>)' , <Dg Finalizers >: {')
    ('    s.'('$' <Hash 'Index::NextFinalizer'>)' =')
    ('      <Mu s.'('$' <Hash 'Index::NextFinalizer'>)' >')
    ('      <'('$' <Hash 'Entry::__Exit'>)' s.'('$' <Hash 'Index::RetCode'>)' >;')
    ('    = <Exit s.'('$' <Hash 'Index::RetCode'>)' >;')
    ('  };')
    ('}')
  );

StopLinkLoop {
  t.AliasTable t.ExeTyper t.UnitStorage e.TargetFileName =
    <PrintNotLinkedUnits t.UnitStorage e.TargetFileName>
    <MLinkerAliasTable::OutAliases-D t.AliasTable e.TargetFileName>
    <MExeTyper::Destroy t.ExeTyper>;
}

LinkLoop {
  t.AliasTable t.ExeTyper t.UnitStorage (e.Unit) =
    <LinkLoop-GetNextUnit
      <TypeUnit
        t.UnitStorage t.AliasTable t.ExeTyper e.Unit
      >
    >;

  t.AliasTable t.ExeTyper t.UnitStorage Finish =
    t.AliasTable t.ExeTyper t.UnitStorage;

  t.AliasTable t.ExeTyper t.UnitStorage UnresolvedName e.Name =
    <MError::LinkError 'Unresolved name ' e.Name>;
}

LinkLoop-GetNextUnit {
  t.AliasTable t.ExeTyper t.UnitStorage =
    <LinkLoop
      t.AliasTable t.ExeTyper <GetNextUnit t.UnitStorage>
    >;
}

PrintNotLinkedUnits
  t.UnitStorage e.TargetFileName =
    <MFileIO::Save
      (e.TargetFileName '-Not linked.txt')
      ('Not linked units')
      <MLambda::Map
        <MLambda::Composite
          & MLambda.UnBracket
          <MLambda::BindLeft & MLambda.Bracket '  '>
        >
        <MOrder::Sort <NotLinkedList-D t.UnitStorage>>
      >
    >;

/*------------------------------------------------------------------------------
 Хранилище единиц компоновки.

 Внутреннее устройство:
 t.UnitStorage ::=
  [UnitStorage (Requests e.Requests) (Units e.Units) (Linked e.Linked)]
 e.Requests ::= (e.UnitName)*
 e.Units ::= (s.Hash t.LinkUnit*)*
 e.Linked ::= (s.Hash (e.UnitName)*)*
------------------------------------------------------------------------------*/

$DATA UnitStorage;

/**
  <CreateUnitStorage
    ((e.BuiltInName)*) t.Unit*
  >
    == t.UnitStorage
*/
CreateUnitStorage {
  (e.BuiltIns) e.Units =
    [UnitStorage
      (Requests)
      <MLambda::Reduce & AddUnit (Units) e.Units>
      <MLambda::Reduce & AddLinked-Aux (Linked) e.BuiltIns>
    ];
}

AddUnit {
  (Units e.HashGroups-B (s.Hash e.Units) e.HashGroups-E)
  ((e.Name s.Hash) e.Body) =
    (Units e.HashGroups-B (s.Hash e.Units ((e.Name) e.Body)) e.HashGroups-E);

  (Units e.HashGroups) ((e.Name s.Hash) e.Body) =
    (Units e.HashGroups (s.Hash ((e.Name) e.Body)));
}

/**
  <AddRequest t.UnitStorage e.Name>
    == t.UnitStorage
*/
AddRequest {
  t.UnitStorage 'Entry::' e.Name =
    <AddRequestAux t.UnitStorage 'Entry::' e.Name>;

  t.UnitStorage 'Local::' e.Name =
    <AddRequestAux t.UnitStorage 'Local::' e.Name>;

  t.UnitStorage 'Swap::' e.Name =
    <AddRequestAux t.UnitStorage 'Swap::' e.Name>;

  t.UnitStorage e.OtherName =
    t.UnitStorage;
}

AddRequestAux {
  [UnitStorage
    t.Request t.Units
    (Linked
      e.HashGroups-B (s.Hash e.Names-B (e.Name) e.Names-E) e.HashGroups-E
    )
  ] e.Name s.Hash =
    [UnitStorage
      t.Request t.Units
      (Linked
        (s.Hash (e.Name) e.Names-B e.Names-E)
        e.HashGroups-B e.HashGroups-E
      )
    ];

  [UnitStorage
    (Requests e.Requests-B (e.Name) e.Requests-E) t.Units t.Linked
  ] e.Name =
    [UnitStorage
      (Requests (e.Name) e.Requests-B e.Requests-E)
      t.Units t.Linked
    ];

  [UnitStorage
    (Requests e.Requests) t.Units t.Linked
  ]
  e.Name =
    [UnitStorage
      (Requests (e.Name) e.Requests) t.Units t.Linked
    ];
}

/**
  <AddLinked t.UnitStorage e.Name>
    == t.UnitStorage
*/
AddLinked {
  [UnitStorage t.Requests t.Units (Linked e.Linked)]
  e.Name s.Hash =
    [UnitStorage
      t.Requests t.Units <AddLinked-Aux (Linked e.Linked) (e.Name s.Hash)>
    ];
}

AddLinked-Aux {
  (Linked e.HashGroups-B (s.Hash e.Names) e.HashGroups-E)
  (e.Name s.Hash) =
    (Linked
      (s.Hash (e.Name) e.Names) e.HashGroups-B e.HashGroups-E
    );

  (Linked e.HashGroups) (e.Name s.Hash) =
    (Linked (s.Hash (e.Name)) e.HashGroups);
}

/**
  <GetNextUnit t.UnitStorage>
    == t.UnitStorage t.Unit
    == t.UnitStorage UnresolvedName e.Name
    == t.UnitStorage Finish
*/
GetNextUnit {
  [UnitStorage (Requests) t.Units t.Linked] =
    [UnitStorage (Requests) t.Units t.Linked]
    Finish;

  [UnitStorage
    (Requests (e.NextName s.Hash) e.Requests)
    (Units
      e.HashGroups-B
      (s.Hash e.Units-B ((e.NextName) e.Body) e.Units-E)
      e.HashGroups-E
    )
    t.Linked
  ] =
    [UnitStorage
      (Requests e.Requests)
      (Units
        e.HashGroups-B
        (s.Hash e.Units-B e.Units-E)
        e.HashGroups-E
      )
      t.Linked
    ] ((e.NextName s.Hash) e.Body);

  [UnitStorage (Requests (e.NextName s.Hash) e.Requests) t.Units t.Linked] =
    [UnitStorage (Requests (e.NextName s.Hash) e.Requests) t.Units t.Linked]
    UnresolvedName e.NextName;
}

/**
  <NotLinkedList-D t.UnitStorage>
    == t.UnitStorage (e.NotLinkedUnitName)*
*/
NotLinkedList-D
  [UnitStorage t.Requests (Units e.Units) t.Linked] =
    <NameFromUnit e.Units>;

NameFromUnit {
  (s.Hash ((e.Name) e.Body) e.Units) e.HashGroups =
    (e.Name)
    <NameFromUnit (s.Hash e.Units) e.HashGroups>;

  (s.Hash /* пусто */) e.HashGroups =
    <NameFromUnit e.HashGroups>;

  = ;
}

/*------------------------------------------------------------------------------
 Последующие Type-фукции выполняют вывод содержимого единиц компоновки в выход-
 ной файл.
------------------------------------------------------------------------------*/

LoadUnits
  e.FileName =
    <GroupLinkUnits
      (e.FileName)
      (<MVersion::ROut>)
      <DoLoadUnits
        <MFileIO::Load e.FileName>
      >
    >;

GroupLinkUnits {
  (e.?FileName) (e.ValidVersion) (Version e.ValidVersion)
  e.Lines =
    <DoGroupLinkUnits e.Lines>;

  (e.FileName) (e.ValidVersion) (Version e.InvalidVersion)
  e.?Lines =
    <MError::LinkError
      'Invalid version in .rout-file `' e.FileName '\''
    >;

  (e.FileName) (e.?ValidVersion) e.?OtherLines =
    <MError::LinkError
      'Invalid .rout-file `' e.FileName '\' -- missed version tag'
    >;
}

DoGroupLinkUnits {
  (Banner e.Banner) e.Lines =
    <GroupOneLinkUnit
      ((e.Banner)) e.Lines
    >;

  (EntryPoint e.Code) e.Lines =
    (EntryPoint e.Code)
    <DoGroupLinkUnits e.Lines>;

  = ;
}

GroupOneLinkUnit {
  (e.Unit) (Code e.CodeLine) e.Lines =
    <GroupOneLinkUnit
      (e.Unit (e.CodeLine)) e.Lines
    >;

  ((e.Banner)) (RealName e.RealName) e.Lines =
    (RealName (e.Banner) e.RealName)
    <DoGroupLinkUnits e.Lines>;

  (e.Unit) t.OtherLine e.Lines =
    (e.Unit)
    <DoGroupLinkUnits t.OtherLine e.Lines>;

  (e.Unit) = (e.Unit);
}

DoLoadUnits {
  = ;

  (e.NextLine) e.Lines =
    <AnalyseLine (e.NextLine)>
    <DoLoadUnits e.Lines>;
}

AnalyseLine {
  ('v ' e.Version) = (Version e.Version);

  ('b ' e.BannerLine) = (Banner <GetHash e.BannerLine>);

  ('r ' e.?RemarkLine) = ;

  ('c ' e.CodeLine) = (Code <HideQuotes e.CodeLine>);

  ('p ' e.RealName) = (RealName e.RealName);

  ('e ' e.EntryPointCode) = (EntryPoint <HideQuotes e.EntryPointCode>);

  () = ;
}

HideQuotes {
  '\'' e.Tail = <StartHidingQuote ('\'') e.Tail>;
  '\"' e.Tail = <StartHidingQuote ('\"') e.Tail>;
  '$$' e.Tail = '$' <HideQuotes e.Tail>;
  '$' e.Name '$' e.Tail = ('$' <GetHash e.Name>) <HideQuotes e.Tail>;
  s.Other e.Tail = s.Other <HideQuotes e.Tail>;
  = ;
}

GetHash {
  e.Name '#' e.Hash = e.Name <MStrings::Numb e.Hash>;

  e.Name = <MHash::Hash e.Name>;
}

StartHidingQuote {
  (s.Quote e.Hidden) '\\' s.Escaped e.Tail =
    <StartHidingQuote (s.Quote e.Hidden '\\' s.Escaped) e.Tail>;

  (s.Quote e.Hidden) s.Quote e.Tail =
    (s.Quote e.Hidden) <HideQuotes e.Tail>;

  (s.Quote e.Hidden) s.Other e.Tail =
    <StartHidingQuote (s.Quote e.Hidden s.Other) e.Tail>;

  (s.Quote e.Hidden) =
    <MError::LinkError
      'May be unballanced quote in StartHidingQoute'
    >;
}

TypeUnit {
  t.UnitStorage t.Aliases t.ExeTyper (e.Banner s.Hash) e.Lines =
    <DoTypeUnit
      <AddLinked t.UnitStorage e.Banner s.Hash>
      t.Aliases
      <MExeTyper::TypeComment t.ExeTyper e.Banner '#' <MStrings::Symb s.Hash>>
      e.Lines
    >;
}

DoTypeUnit {
  t.UnitStorage t.Aliases t.ExeTyper =
    t.Aliases t.ExeTyper t.UnitStorage;

  t.UnitStorage t.Aliases t.ExeTyper (e.NextLine) e.Lines =
    <DoTypeUnit
      <TypeLine t.UnitStorage t.Aliases t.ExeTyper e.NextLine>
      e.Lines
    >;
}

TypeLine {
  t.UnitStorage t.Aliases t.ExeTyper s.Char e.Raw =
    <TypeLine
      t.UnitStorage t.Aliases
      <MExeTyper::TypeChar t.ExeTyper s.Char>
      e.Raw
    >;

  t.UnitStorage t.Aliases t.ExeTyper ('$' e.FnName s.Hash) e.Raw =
    <TypeLine
      <AddRequest t.UnitStorage e.FnName s.Hash>
      <TypeRenamed
        ( <MLinkerAliasTable::Lookup t.Aliases e.FnName s.Hash> )
        t.ExeTyper e.Raw
      >
    >;

  t.UnitStorage t.Aliases t.ExeTyper ('' e.HiddenQuote) e.Raw =
    <TypeLine
      t.UnitStorage t.Aliases
      <MExeTyper::TypeSingleQuoted t.ExeTyper e.HiddenQuote>
      e.Raw
    >;

  t.UnitStorage t.Aliases t.ExeTyper ('"' e.HiddenQuote) e.Raw =
    <TypeLine
      t.UnitStorage t.Aliases
      <MExeTyper::TypeDoubleQuoted t.ExeTyper e.HiddenQuote>
      e.Raw
    >;

  t.UnitStorage t.Aliases t.ExeTyper =
    t.UnitStorage t.Aliases t.ExeTyper;
}

TypeRenamed
  (t.Aliases e.FnAlias) t.ExeTyper e.Raw =
    t.Aliases <MExeTyper::TypeRenamed t.ExeTyper e.FnAlias> e.Raw;

$END BE-Refal5::MLinker.
