$MODULE BE-SimRef::MCompiler;

$IMPORT MError;
$IMPORT MEscape;
$IMPORT MFileSystem;
$IMPORT MLambda;
$IMPORT MPredeclGenerator;
$IMPORT MQualifiedName;
$IMPORT MSrcPos;
$IMPORT MStrings;

$IMPORT MHelpers = Config::MHelpers;

$IMPORT MProfiler;

/**
  <Generate t.L-Config t.hIModule e.OutName>
    == t.hIModule
*/
$ENTRY Generate
  t.L-Config t.hIModule e.OutName =
    <MProfiler::Quantify &Profiling-Generate t.L-Config t.hIModule e.OutName>;

Profiling-Generate
  t.L-Config t.hIModule e.OutName =
    <MPredeclGenerator::Generate-Generic
      & Generate-Properties t.hIModule e.OutName
    >;

Generate-Properties {
  GenSwap = & GenSwap;
  SwitchEnum Entry = & GenEnum-Entry;
  SwitchEnum Local = & GenEnum-Local;
  GenCommonHeaders = /* пусто */;
  GenIdent = & GenIdent;
  GenFunction-Decl = & GenFunction-Decl;
  Generate-EntryCode-Go = & Generate-EntryCode-Go;
  Generate-EntryCode-InitFinal = & Generate-EntryCode-InitFinal;
  GenFunction-Code = & GenFunction-Code;
  GenNativeInsertion = & GenNativeInsertion;
  GenNativeInsertion-Body = & GenNativeInsertion-Body;
}

GenSwap
  t.AbsolutName = ('$SWAP ' <QNameCode t.AbsolutName> ';') ();

GenEnum-Entry
  t.AbsolutName = <GenEnum '$EENUM' t.AbsolutName>;

GenEnum-Local
  t.AbsolutName = <GenEnum '$ENUM' t.AbsolutName>;

GenEnum
  e.ScopeClass t.AbsolutName =
    (e.ScopeClass ' ' <QNameCode t.AbsolutName> ';') ();

GenIdent
  e.Name = ('$LABEL ' <NameCode e.Name> ';');

GenFunction-Decl
  s.ScopeClass t.Name =
    (<Declarations-ScopeClass s.ScopeClass> ' ' <QNameCode t.Name> ';');

Declarations-ScopeClass {
  Entry = '$EXTERN';
  Local = '$FORWARD';
  Swap = '$FORWARD';
  ADT = '$ENUM';
}

ModuleEntryPointName
  t.ModuleName =
    <MQualifiedName::AddSubName t.ModuleName 'EntryPoint' Entry>;

Generate-EntryCode-Go
  s.FnProperties t.ModuleName (e.Result) e.Imports =
    <MPredeclGenerator::GenFunction
      s.FnProperties
      <ModuleEntryPointName t.ModuleName>
      Entry
      <OneSentence-EmptyPattern-FunctionBody
        e.Result
        (Function
          <CreateCallable <MQualifiedName::Create ('Exit' Entry)>>
          (Macro 0)
        )
      >
    >;

OneSentence-EmptyPattern-FunctionBody
  e.Result = ((Pattern) (Result e.Result));

CreateCallable
  t.FunctionName =
    /*
      Терм SrcPos располагается на месте t.SrcPos внутри
      формата t.Callable, при генерации кода он не используется.
    */
    (Entry SrcPos t.FunctionName);

Generate-EntryCode-InitFinal
  s.FnProperties t.ModuleName t.InitSeq t.FinalSeq e.Imports =
    <Generate-EntryCode-InitFinal-Aux
      s.FnProperties t.ModuleName t.InitSeq t.FinalSeq e.Imports
      <MQualifiedName::AddSubName t.ModuleName 'Finalize' Entry>
    >;

Generate-EntryCode-InitFinal-Aux
  s.FnProperties t.ModuleName t.InitSeq t.FinalSeq e.Imports
  t.FinalizeFunction =
    <MPredeclGenerator::GenFunction
      s.FnProperties t.FinalizeFunction Local
      <OneSentence-EmptyPattern-FunctionBody <GenEntry t.FinalSeq>>
    >
    <MPredeclGenerator::GenFunction
      s.FnProperties <ModuleEntryPointName t.ModuleName> Entry
      <OneSentence-EmptyPattern-FunctionBody
        <GenEntry t.InitSeq>
        (Function
          <CreateCallable <MQualifiedName::Create ('Register' Entry)>>
          (FnPtr <CreateCallable t.FinalizeFunction >)
        )
      >
    >;

GenEntry {
  None = /* empty */;
  (Result e.Result) = e.Result;
}

GenFunction-Code
  t.AbsolutName s.ScopeClass e.Sentences =
    (<Gen-FnScopeClass s.ScopeClass> <QNameCode t.AbsolutName> ' {')
    <MLambda::Map & Gen-Sentence e.Sentences>
    ('}')
    ();

Gen-FnScopeClass {
  Entry = '$ENTRY ';
  Local = ;
}

Gen-Sentence {
  ((Pattern e.Pattern) (Result e.Result)) =
    ('  ' <Gen-Pattern e.Pattern> '=')
    ('    ' <Gen-Result e.Result> ';');
}

Gen-Pattern {
  e.Pattern = <MLambda::Map & Gen-Pattern-Term e.Pattern>;
}

Gen-Pattern-Term {
  (Structure e.Pattern) = '(' <Gen-Pattern e.Pattern> ')';

  (Abstract t.Callable e.Pattern) =
    '[' <Gen-Callable t.Callable> <Gen-Pattern e.Pattern> ']';

  t.Common = <Gen-Common-Term t.Common>;
}

Gen-Result {
  e.Result = <MLambda::Map & Gen-Result-Term e.Result>;
}

Gen-Result-Term {
  (Structure e.Result) = '(' <Gen-Result e.Result> ')';

  (Abstract t.Callable e.Result) =
    '[' <Gen-Callable t.Callable> <Gen-Result e.Result> ']';

  (Function t.Callable e.Argument) =
    '<' <Gen-Callable t.Callable> <Gen-Result e.Argument> '>';

  (IndirectCall (SVar e.Index) e.Argument) =
    '<s.' <NameCode e.Index> ' ' <Gen-Result e.Argument> '>';

  t.Common = <Gen-Common-Term t.Common>;
}

Gen-Common-Term {
  (Identifier t.SrcPos e.Name) = '#' <NameCode e.Name> ' ';

  (EVar e.Index) = 'e.' <NameCode e.Index> ' ';
  (SVar e.Index) = 's.' <NameCode e.Index> ' ';
  (TVar e.Index) = 't.' <NameCode e.Index> ' ';

  (Literal e.Content) = '\'' <Escape e.Content> '\' ';
  (Macro s.Value) = <MStrings::Symb s.Value> ' ';

  (FnPtr t.Callable) = <Gen-Callable t.Callable>;
}

Escape {
  e.Text = <MLambda::Map & MEscape.EscapeChar-Oct e.Text>;
}

Gen-Callable {
  (s.ScopeClass t.SrcPos t.Name) = <QNameCode t.Name> ' ';
}

QNameCode {
  t.Name = <DoQNameCode <MQualifiedName::Parse t.Name>>;
}

DoQNameCode {
  (e.First) = <NameCode e.First>;

  (e.First) (e.Second) =
    <NameCode e.First> 'P_' <NameCode e.Second>;

  (e.First) (e.Second) e.Tail =
    <NameCode e.First> 'P_' <DoQNameCode (e.Second) e.Tail>;
}

NameCode {
  e.Name = <MLambda::Map & NameCodeChar e.Name>;
}

NameCodeChar {
  '!' = 'B_'; '?' = 'Q_'; '_' = 'U_'; '-' = 'D_'; Entry = 'E_';
  s.Other = s.Other;
}

GenNativeInsertion {
  t.SrcPos CppSR e.Code =
    ('%%')
    <MLambda::Map &CppSRCodeItem e.Code>
    PATCH-SHARP-LINE
    ('%%');

  t.SrcPos SimRef e.Code =
    ('/* ' <MSrcPos::ToString t.SrcPos> ' */')
    <MLambda::Map &SimRefCodeItem e.Code>;

  t.SrcPos s.BackEndID e.Code =
    <MError::LinkError-BadBackEndID t.SrcPos s.BackEndID 'SimRef or CppSR'>;
}

CppSRCodeItem {
  (Native t.SrcPos e.Code) =
    (<MSrcPos::SharpLine t.SrcPos>)
    e.Code;

  (Identifier t.SrcPos e.Name) =
    (<MSrcPos::SharpLine t.SrcPos>)
    ('ident_' <SRCode <NameCode e.Name>> '.ref(vm)');

  (FnPtr (s.CallType t.SrcPos t.Name)) =
    (<MSrcPos::SharpLine t.SrcPos>)
    ('ref_' <SRCode <QNameCode t.Name>> '.ref(vm)');
}

SRCode {
  e.Name = <MLambda::Map &SRCode-Char e.Name>;
}

SRCode-Char {
  '-' = 'm_'; '_' = 'u_'; s.Other = s.Other;
}

SimRefCodeItem {
  (Native t.SrcPos e.Code) =
    ('/* ' <MSrcPos::ToString t.SrcPos> ' */')
    e.Code;

  (Identifier t.SrcPos e.Name) =
    ('/* ' <MSrcPos::ToString t.SrcPos> ' */')
    ('#' <NameCode e.Name>);

  (FnPtr (s.CallType t.SrcPos t.Name)) =
    ('/* ' <MSrcPos::ToString t.SrcPos> ' */')
    (<QNameCode t.Name>);
}

GenNativeInsertion-Body {
  t.FunctionName s.ScopeClass t.SrcPos s.BackEndID e.Code =
    (<Gen-FnScopeClass s.ScopeClass> <QNameCode t.FunctionName> ' {')
    <GenNativeInsertion t.SrcPos s.BackEndID e.Code>
    ('}')
    ();
}

$END BE-SimRef::MCompiler.

