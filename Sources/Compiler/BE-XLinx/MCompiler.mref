$MODULE BE-XLinx::MCompiler;

$IMPORT MIModule;
$IMPORT MLambda;
$IMPORT MSrcPos;
$IMPORT MQualifiedName;
$IMPORT MXXIO;

$IMPORT MProfiler;

/**
  <Generate t.hIModule e.OutName> == t.hIModule
*/
$ENTRY Generate
  t.hIModule e.OutName =
    <MProfiler::Quantify &Profiling-Generate t.hIModule e.OutName>;

Profiling-Generate
  t.hIModule e.OutName =
    <Generate-Aux
      (e.OutName)
      <MLambda::Apply
        <MLambda::Parallel-H
          & LoadImportInfo
          & LoadADTInfo
          & LoadEntryPointInfo
          & LoadFunctionInfo
        >
        t.hIModule
      >
    >;

//------------------------------------------------------------------------------

/*
  <LoadImportInfo t.hIModule>
    == t.hIModule (Module t.Name t.SrcPos (Module t.Name t.SrcPos)*)
*/
LoadImportInfo
  t.hIModule =
    <LoadImportInfo-Aux
      <MLambda::Apply
        <MLambda::Parallel-H
          & MIModule.GetModuleName
          <MLambda::BindRight & MIModule.GetModuleAttribute Position>
        >
        t.hIModule
      >
    >;

LoadImportInfo-Aux
  t.hIModule t.ModuleName Found t.ModulePos =
    <LoadImportInfo-Aux2
      t.ModuleName t.ModulePos
      <MLambda::MapReduce
        <MLambda::Composite
          & CreateImportInfo
          & MLambda.Bracket-H
        >
        <MIModule::GetImportList-RealNames t.hIModule>
      >
    >;

LoadImportInfo-Aux2
  t.ModuleName t.ModulePos t.hIModule e.Imports =
    t.hIModule
    (Module t.ModuleName t.ModulePos e.Imports);

CreateImportInfo
  t.hIModule t.ImportRealName =
    <CreateImportInfo-Aux
      t.ImportRealName
      <MIModule::GetImportAttribute-RealName
        t.hIModule Position t.ImportRealName
      >
    >;

CreateImportInfo-Aux
  t.ImportRealName t.hIModule Found t.SrcPos =
    t.hIModule Module t.ImportRealName t.SrcPos;


//------------------------------------------------------------------------------

/*
  <LoadADTInfo t.hIModule>
    == t.hIModule (ADT t.Name t.SrcPos)*
*/
LoadADTInfo
  t.hIModule =
    <MLambda::MapReduce
      <MLambda::Composite
        & CreateADTInfo
        & MLambda.Bracket-H
      >
      <MIModule::GetADTList t.hIModule>
    >;

/*
  <CreateADTInfo t.hIModule t.ADTName>
    == t.hIModule ADT t.ADTName t.SrcPos
*/
CreateADTInfo
  t.hIModule t.ADTName =
    <CreateADTInfo-Aux
      <MLambda::Apply
        <MLambda::Parallel-H
          <MLambda::BindRight & MIModule.AbsolutName t.ADTName>
          <MLambda::BindRight
            & MIModule.GetADTAttribute Position t.ADTName
          >
        >
        t.hIModule
      >
    >;

CreateADTInfo-Aux
  t.hIModule t.ADTName Found t.SrcPos =
    t.hIModule ADT t.ADTName t.SrcPos;

//------------------------------------------------------------------------------

/*
  <LoadEntryPointInfo t.hIModule>
    == t.hIModule t.RunTimeUsesInfo
  t.RunTimeUsesInfo ::=
    (
      Entry RunTime t.SrcPos
      (s.ScopeClass t.Name t.SrcPos)
    )
*/
LoadEntryPointInfo
  t.hIModule =
    <LoadEntryPoint-Aux
      <MIModule::GetEntryPoint t.hIModule>
    >;

LoadEntryPoint-Aux {
  t.hIModule Go t.EntryPoint =
    t.hIModule
    (Entry RunTime <MSrcPos::Create-RunTime>
      <PrintEntryPoint t.EntryPoint>
    );

  t.hIModule Regular t.Init t.Final =
    t.hIModule
    (Entry RunTime <MSrcPos::Create-RunTime>
      <PrintEntryPoint t.Init>
      <PrintEntryPoint t.Final>
    );
}

PrintEntryPoint {
  None = ;

  (Result e.ResultExpr) = <ScanExpression e.ResultExpr>;
}


//------------------------------------------------------------------------------

/*
  <LoadFunctionInfo t.hIModule>
    == t.hIModule t.FunctionInfo*
  t.FunctionInfo ::=
    (
      s.ScopeClass t.Name t.SrcPos
      (s.ScopeClass t.Name t.SrcPos)*
    )
  s.ScopeClass ::= Entry | Local | Swap
*/
LoadFunctionInfo
  t.hIModule =
    <MLambda::MapReduce
      <MLambda::Composite
        & CreateFunctionInfo
        & MLambda.Bracket-H
      >
      <MIModule::GetFunctionList t.hIModule>
    >;

/*
  <CreateFunctionInfo t.hIModule t.FunctionName>
    == t.hIModule
      s.ScopeClass t.Name t.SrcPos (s.ScopeClass t.Name t.SrcPos)
*/
CreateFunctionInfo
  t.hIModule t.FunctionName =
    <CreateFunctionInfo-SwScopeClass
      t.FunctionName
      <MLambda::Apply
        <MLambda::Parallel-H
          <MLambda::BindRight & MIModule.AbsolutName t.FunctionName>
          <MLambda::BindRight
            & MIModule.GetFunctionAttribute ScopeClass t.FunctionName
          >
          <MLambda::BindRight
            & MIModule.GetFunctionAttribute Position t.FunctionName
          >
        >
        t.hIModule
      >
    >;

CreateFunctionInfo-SwScopeClass {
  t.RelativeName t.hIModule t.FunctionName Found Swap Found t.SrcPos =
    t.hIModule Swap t.FunctionName t.SrcPos;

  t.RelativeName t.hIModule t.FunctionName Found s.ScopeClass Found t.SrcPos =
    <CreateFunctionInfo-Aux
      t.FunctionName s.ScopeClass t.SrcPos
      <MIModule::GetFunctionAttribute t.hIModule Body t.RelativeName>
    >;
}

CreateFunctionInfo-Aux
  t.FunctionName s.ScopeClass t.SrcPos
  t.hIModule Found (e.Sentences) =
    t.hIModule s.ScopeClass t.FunctionName t.SrcPos
    <MLambda::Map & ScanSentence e.Sentences>;

ScanSentence
  (e.Actions) =
    <MLambda::Map & ScanAction e.Actions>;

ScanAction {
  (Pattern e.Pattern) = <ScanExpression e.Pattern>;

  (Result e.Result) = <ScanExpression e.Result>;
}

ScanExpression
  e.Terms =
    <MLambda::Map & ScanTerm e.Terms>;

ScanTerm {
  (Identifier t.SrcPos e.Name) =
    (Identifier <MQualifiedName::Create (e.Name)> t.SrcPos);

  (EVar e.Index) = ;
  (SVar e.Index) = ;
  (TVar e.Index) = ;
  (Literal e.Content) = ;
  (Macro s.Value) = ;

  (FnPtr t.Callable) = <ScanCallable t.Callable>;

  (Structure e.Expression) = <ScanExpression e.Expression>;

  (Abstract t.Callable e.Expression) =
    <ScanCallable t.Callable> <ScanExpression e.Expression>;

  (Function t.Callable e.Argument) =
    <ScanCallable t.Callable> <ScanExpression e.Argument>;

  (IndirectCall (SVar e.Index) e.Argument) =
    <ScanExpression e.Argument>;
}

ScanCallable
  (s.CallType t.SrcPos t.Name) = (s.CallType t.Name t.SrcPos);

//------------------------------------------------------------------------------

/*
  <Generate-Aux
    (e.OutName) t.hIModule e.EntityInfo
  >
    == t.hIModule
*/
Generate-Aux
  (e.OutName) t.hIModule e.EntityInfo =
    t.hIModule
    <GuardSuccess
      <MProfiler::Quantify &MXXIO.Save
        (e.OutName)
        <MLambda::Map & GenerateEntity e.EntityInfo>
      >
    >;

GuardSuccess Success = ;

GenerateEntity
  (s.ScopeClass t.Name t.SrcPos e.SubEntities) =
    (
      <PrintEntity '!' s.ScopeClass t.Name t.SrcPos>
      <MLambda::Map & GenerateSubEntity e.SubEntities>
    );

PrintEntity
  s.Sign s.ScopeClass t.Name t.SrcPos =
    (s.Sign
      (<StringFromScopeClass s.ScopeClass>)
      (<PrintName t.Name>)
      (<MSrcPos::ToString t.SrcPos>)
    );

PrintName {
  RunTime = 'RunTime';

  t.Name = <MQualifiedName::ToPrintable-Quad t.Name>;
}


StringFromScopeClass {
  ADT = 'ADT'; Entry = 'Entry'; Identifier = 'Identifier';
  Local = 'Local'; Module = 'Module'; Swap = 'Swap';
}

GenerateSubEntity
  (s.ScopeClass t.Name t.SrcPos) =
    <PrintEntity '?' s.ScopeClass t.Name t.SrcPos>;

$END BE-XLinx::MCompiler.
