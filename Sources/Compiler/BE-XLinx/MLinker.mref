$MODULE BE-XLinx::MLinker;

$IMPORT MCreateDirIfNeed;
$IMPORT MFileIO;
$IMPORT MFileSystem;
$IMPORT MLambda;
$IMPORT MOrder;
$IMPORT MOutModuleStatus;
$IMPORT MMath;
$IMPORT MStrings;
$IMPORT MXXIO;

$IMPORT MProfiler;

/**
  <Link (e.PtOutName) (t.ModuleName e.FileName)*>
    == Success
    == Fails
*/
$ENTRY Link
  (e.PtOutName) e.OutFileNames =
    <MProfiler::Quantify-Flush
      &Profiling-Link (e.PtOutName) e.OutFileNames
    >;

Profiling-Link
  (e.PtOutName) e.OutFileNames =
    <MOutModuleStatus::XLinx
      <MFileSystem::StrFromPath e.PtOutName>
    >
    <MOutModuleStatus::Flush>
    <MProfiler::Quantify-Flush & Link-Aux
      ( e.PtOutName )
      <MLambda::Map
        <MLambda::Composite
          & MLambda.UnBracket
          <MLambda::BindLeft & MStrings.Skip 1>
          & MXXIO.Load
          <MLambda::BindLeft & MStrings.Skip 1>
          <MLambda::BindLeft
            & MLambda.Map
            <MLambda::Composite
              & MLambda.UnBracket
              <MLambda::BindLeft
                & MLambda.Map
                & CalcEntityHash
              >
              & MLambda.Bracket
            >
          >
          & MLambda.Bracket
        >
        <MStrings::Reverse e.OutFileNames>
      >
    >
    Success;

CalcEntityHash {
  (s.Sign (e.ScopeClass) (e.Name) (e.SrcPos)) =
    (s.Sign (e.ScopeClass) (<Hash e.Name 43>) (e.SrcPos));
}

Hash {
  s.Hash = <MMath::Mod s.Hash 37>;

  s.Initial e.NotScanned s.Hash =
    s.Initial
    <Hash
      e.NotScanned
      <MMath::Add <MMath::Mul s.Hash 31> <MStrings::Ord s.Initial>>
    >;
}

Link-Aux
  (e.PtOutName) e.Modules =
    <MProfiler::Quantify-Flush & Link-Aux-2
      (e.PtOutName)
      <MProfiler::Quantify-Flush & CreateBidirectionalTable e.Modules>
    >;

CreateBidirectionalTable
  e.Modules =
    <MLambda::MapReduce
      & AddInvertedInfo
      (
        <MProfiler::Quantify-Flush & InvertInfo
          <MLambda::Map & MLambda.UnBracket e.Modules>
        >
      )
      <CollectRuntimeCalls
        (/* записи рантайма */) (/* просканированные записи */)
        <MLambda::Map & ModulesUnBracket e.Modules>
      >
    >;

ModulesUnBracket
  (t.ModuleHeader e.Entities) =
    (Parser) t.ModuleHeader <MOrder::Sort e.Entities>;

CollectRuntimeCalls {
  () ()
  e.Info-B ((s.Sign t.Scope ('RunTime' s.Hash) t.Pos) e.SubInfo) e.Info-E =
    <CollectRuntimeCalls
      ((s.Sign t.Scope ('RunTime' s.Hash) t.Pos) e.SubInfo) (e.Info-B) e.Info-E
    >;

  (e.Runtimes) (e.Scanned)
  e.Info-B ((s.Sign t.Scope ('RunTime' s.Hash) t.Pos) e.SubInfo) e.Info-E =
    <CollectRuntimeCalls
      (e.Runtimes e.SubInfo) (e.Scanned e.Info-B) e.Info-E
    >;

  () () (Parser) e.Tail = e.Tail;

  (e.Runtimes) (e.Scanned) e.Tail =
    (e.Runtimes) e.Scanned e.Tail;
}

InvertInfo {
  e.Entities =
    <MLambda::Map
      <MLambda::Composite
        & MLambda.UnBracket
        <MLambda::BindLeft & MStrings.Skip 1>
        & InvertInfo-Collect
      >
      <CollectByHash
        <MLambda::Map & MakeHashGroup
          <MLambda::Map & InvertEntity e.Entities>
        >
      >
    >;
}

MakeHashGroup {
  (t.ScopeClass (e.Name s.Hash) t.SubEntity) =
    (s.Hash (t.ScopeClass (e.Name s.Hash) t.SubEntity));
}

CollectByHash {
  (s.Hash e.Info1) e.Begin (s.Hash e.Info2) e.End =
    <CollectByHash
      e.Begin (s.Hash e.Info1 e.Info2) e.End
    >;

  (s.Hash e.Info) e.Tail =
    (s.Hash e.Info) <CollectByHash e.Tail>;

  /* пусто */ = /* пусто */;
}

InvertEntity
  ((e.Header) e.SubEntities) =
    <MLambda::Map
      <MLambda::BindLeft & InvertSubEntity (e.Header)>
      e.SubEntities
    >;

InvertSubEntity
  (s.MainEntitySign (e.MainScopeClass) (e.MainName) (e.MainSrcPos))
  (s.SubEntitySign (e.SubScopeClass) (e.SubName) (e.SubSrcPos)) =
    ((e.SubScopeClass) (e.SubName)
      ('>' (e.MainScopeClass) (e.MainName) (e.SubSrcPos))
    );

InvertInfo-Collect {
  (t.ScopeClass t.SubName (e.OtherInfo1))
  e.OtherEntities
  (t.ScopeClass t.SubName (e.OtherInfo2)) e.Tail =
    <InvertInfo-DoCollect
      (t.ScopeClass t.SubName (e.OtherInfo1) (e.OtherInfo2))
      (e.OtherEntities)
      e.Tail
    >;

  (t.ScopeClass t.SubName (e.OtherInfo)) e.Tail =
    (t.ScopeClass t.SubName (e.OtherInfo))
    <InvertInfo-Collect e.Tail>;

  = ;
}

InvertInfo-DoCollect {
  (t.ScopeClass t.SubName e.Collected)
  (e.OtherEntities) e.Other
  (t.ScopeClass t.SubName (e.Info)) e.Tail =
    <InvertInfo-DoCollect
      (t.ScopeClass t.SubName e.Collected (e.Info))
      (e.OtherEntities e.Other)
      e.Tail
    >;

  (t.ScopeClass t.SubName e.Collected)
  (e.OtherEntities)
  e.Tail =
    (t.ScopeClass t.SubName e.Collected)
    <InvertInfo-Collect
      e.OtherEntities
      e.Tail
    >;
}

AddInvertedInfo {
  (
    e.InvertedInfo-B
    (t.ScopeClass t.SubName e.Collected)
    e.InvertedInfo-E
  )
  (('!' t.ScopeClass t.SubName t.SrcPos) e.Info) =
    (e.InvertedInfo-B e.InvertedInfo-E)
    (('!' t.ScopeClass t.SubName t.SrcPos) e.Info e.Collected);

  (e.InvertedInfo) t.OtherEntity =
    (e.InvertedInfo) t.OtherEntity;
}

XLinx-FileNamePt {
  (t.Prefix e.SubDir (e.TargetProgram)) e.Suffix =
    <MCreateDirIfNeed::Create-T
      <MFileSystem::StrFromPath t.Prefix e.SubDir ('.Info')>
    >
    '\\' e.TargetProgram e.Suffix;
}

Link-Aux-2
  (e.PtOutName) (e.OrphanInverted) e.Results =
    <Link-Aux-2-FileNames
      <MLambda::Map
        <MLambda::Composite
          & MLambda.UnBracket
          <MLambda::BindLeft & XLinx-FileNamePt (e.PtOutName)>
          & MLambda.Bracket
        >
        ('.module_list.txt')
        ('.tree.txt')
        ('.xlinx.txt')
        ('.not linked.txt')
      >
      (e.OrphanInverted)
      <SelectModules () () e.Results>
    >;

SelectModules {
  (e.Modules) (e.Scanned)
  e.NotAModules (('!' ('Module') t.Name t.Pos) e.SubEntities) e.UnScanned =
    <SelectModules
      (e.Modules (('!' ('Module') t.Name t.Pos) e.SubEntities))
      (e.Scanned e.NotAModules (('!' ('Module') t.Name t.Pos) e.SubEntities))
      e.UnScanned
    >;

  (e.Modules) (e.Scanned) e.NotAModules =
    (e.Modules) e.Scanned e.NotAModules;
}

Link-Aux-2-FileNames
  (e.ModuleListName) (e.TreeName) (e.XLinxName) (e.NotLinkedName)
  (e.OrphanInverted) (e.Modules) e.Results =
    <MProfiler::Quantify-Flush & SaveModuleList (e.ModuleListName) e.Modules>
    <MProfiler::Quantify-Flush & SaveModuleTree (e.TreeName) e.Modules>
    <MProfiler::Quantify-Flush & SaveNotLinked
      (e.NotLinkedName)
      <MProfiler::Quantify-Flush & SaveXLinx-T (e.XLinxName) (e.Results) e.OrphanInverted>
    >;

//------------------------------------------------------------------------------
// Вывод простого списка модулей

SaveModuleList {
  (e.ModuleListName) e.Results =
    <MOutModuleStatus::XLinx e.ModuleListName>
    <MOutModuleStatus::Flush>
    <MFileIO::Save
      (e.ModuleListName)
      <PrintModuleList e.Results>
    >;
}

PrintModuleList
  e.Entities =
    <PrintModuleList-Aux
      <MLambda::Map & PrintModuleList-FilterModule e.Entities>
    >;

PrintModuleList-FilterModule {
  (('!' ('Module') (e.EntityName s.Hash) (e.SrcPos)) e.ResultInfo) =
    ((<Dot e.EntityName>) e.SrcPos);

  t.Other = /* пусто */;
}

Dot {
  e.Begin '::' e.End = e.Begin '.' <Dot e.End>;
  e.Line = e.Line;
}

PrintModuleList-Aux {
  e.Modules =
    <MLambda::Map
      <MLambda::BindLeft
        & Padding <CalcPadding e.Modules>
      >
      <MOrder::Sort e.Modules>
    >;
}

CalcPadding {
  e.Modules =
    <MOrder::Max
      <MLambda::Map & ModuleNameLen e.Modules>
    >;
}

ModuleNameLen
  ((e.ModuleName) e.SrcPos) = <MStrings::Length e.ModuleName>;

Padding
  s.PadLen ((e.ModuleName) e.SrcPos) =
    (
      <MStrings::First
        s.PadLen e.ModuleName <MStrings::Repeat s.PadLen '.'>
      >
      '.|.' e.SrcPos
    );

//------------------------------------------------------------------------------
// Печать таблицы перекрёстных связей.

SaveXLinx-T {
  (e.XLinxName) (e.Results) e.OrphanInverted =
    <MOutModuleStatus::XLinx e.XLinxName>
    <MOutModuleStatus::Flush>
    <SaveXLinx-T-WriteResults-T
      <MLambda::MapReduce
        & PrintResult-T
        <MFileIO::Open 'w' e.XLinxName>
        e.Results
      >
      (e.OrphanInverted)
    >;
}

SaveXLinx-T-WriteResults-T {
  t.hFile e.Results (e.OrphanInverted) =
    e.Results
    <SaveXLinx-T-WriteOrphans
      <MLambda::MapReduce
        & PrintResult-T
        t.hFile
        (Parser)
        <MLambda::Map & InvertedToResults e.OrphanInverted>
      >
    >;
}


SaveXLinx-T-WriteOrphans {
  t.hFile e.OrphanInverted = <MFileIO::Close t.hFile>;
}

InvertedToResults {
  (t.ScopeClass t.SubName e.Info) =
    (('!' t.ScopeClass t.SubName ('UNKNOWN')) e.Info);
}

PrintParser = (<MStrings::Repeat 80 '='>) ();

PrintResult-T {
  t.hFile (Parser) =
    <MLambda::Reduce
      <MLambda::Composite
        & MLambda.UnBracket-H
        & MFileIO.WriteLine
      >
      t.hFile
      <PrintParser>
    >
    (Parser);

  t.hFile (t.Init e.Info) =
    <MFileIO::WriteLine
      <MLambda::Reduce
        & PrintResult-T-Aux
        t.hFile <Sort-PrintResult-T t.Init e.Info>
      >
    >
    (t.Init e.Info);
}

Sort-PrintResult-T {
  e.Info = <MOrder::Sort e.Info>;
}

PrintResult-T-Aux {
  t.hFile
  ('!' (e.ScopeClass) (e.EntityName s.Hash) (e.SrcPos) ) =
    <MFileIO::WriteLine
      t.hFile '{' e.ScopeClass ' [/' <Dot e.EntityName> '/] (' e.SrcPos ')}'
    >;

  t.hFile
  ('?' (e.ScopeClass) (e.EntityName s.Hash) (e.SrcPos) ) =
    <MFileIO::WriteLine
      t.hFile '  use     ' e.ScopeClass ' [' e.EntityName '] (' e.SrcPos')'
    >;

  t.hFile
  ('>' (e.ScopeClass) (e.EntityName s.Hash) (e.SrcPos) ) =
    <MFileIO::WriteLine
      t.hFile '  used in ' e.ScopeClass ' [' e.EntityName '] (' e.SrcPos')'
    >;
}

//------------------------------------------------------------------------------
// Печать дерева зависимостей модулей

SaveModuleTree {
  (e.TreeName) e.Results =
    <MOutModuleStatus::XLinx e.TreeName>
    <MOutModuleStatus::Flush>
    <MFileIO::Save
      (e.TreeName)
      <PrintTree
        <MLambda::MapReduce
          & FilterModules
          (0 /* Таблица число -> имя модуля */)
          e.Results
        >
      >
    >;
}

FilterModules {
  (s.Next e.Table)
  (('!' ('Module') (e.Name s.Hash) t.SrcPos) e.SubEntities) =
    (<MMath::Inc s.Next> e.Table (s.Next e.Name))
    (s.Next e.SubEntities);

  (s.Next e.Table) t.OtherInfo = (s.Next e.Table);
}


PrintTree
  (s.Next e.Table) e.Modules =
    <PrintTree-Aux
      <MLambda::MapReduce & UsingsModules (e.Table) e.Modules>
    >
    <PrintParser>
    <PrintTree-Aux
      <MLambda::MapReduce & UsedsModules (e.Table) e.Modules>
    >;

UsingsModules
  (e.Table)
  (s.ModuleId e.SubEntities) =
    <MakeTreeGroup
      s.ModuleId
      <MLambda::MapReduce
        <MLambda::BindLeft & FilterDependences '?'>
        (e.Table)
        e.SubEntities
      >
    >;

UsedsModules
  (e.Table)
  (s.ModuleId e.SubEntities) =
    <MakeTreeGroup
      s.ModuleId
      <MLambda::MapReduce
        <MLambda::BindLeft & FilterDependences '>'>
        (e.Table)
        e.SubEntities
      >
    >;

FilterDependences {
  s.L-Sign (e.Table-B (s.Id e.Name) e.Table-E)
  (s.L-Sign ('Module') (e.Name s.Hash) (e.SrcPos)) =
    ((s.Id e.Name) e.Table-B e.Table-E)
    (s.Id e.SrcPos);

  s.L-Sign (e.Table)
  (s.OtherSign ('Module') (e.Name s.Hash) t.SrcPos) =
    (e.Table);
}

MakeTreeGroup {
  s.ModuleID (e.Table) e.SubEntities =
    (e.Table) (s.ModuleID e.SubEntities);
}

PrintTree-Aux
  (e.Table) e.Modules =
    <CreateTrees
      (e.Table) ( <FindRoots e.Modules> ) e.Modules
    >;

FindRoots
  e.Modules =
    <MLambda::Map
      <MLambda::BindLeft & IsRoot e.Modules>
      <MLambda::Map
        <MLambda::Composite
          & MLambda.UnBracket
          <MLambda::BindLeft & MStrings.First 1>
        >
        e.Modules
      >
    >;

IsRoot {
  e.Modules-B
  (s.IdSuperName e.SubModules-B (s.IdSubName e.SrcPos) e.SubModules-E)
  e.Modules-E
  s.IdSubName =
    /* пусто */;

  e.Modules s.IdRootName = s.IdRootName;
}

CreateTrees
  (e.Table) (e.Roots) e.Modules =
    <MLambda::Map
      <MLambda::BindLeft & CreateTree (e.Table) e.Modules>
      e.Roots
    >;

CreateTree
  (e.Table-B (s.IdRootName e.RootName) e.Table-E) e.Modules s.IdRootName =
    (e.RootName ' =>')
    <PrintUses
      e.Table-B (s.IdRootName e.RootName) e.Table-E
      <DoCreateTree () () s.IdRootName e.Modules>
    >;

DoCreateTree {
  (e.Printed)
  (e.Indent)
  s.IdRootName
  e.Modules-B (s.IdRootName e.SubNames) e.Modules-E =
    <MLambda::Reduce
      <MLambda::BindLeft
        & DoCreateTree-Aux
        (e.Indent) e.Modules-B e.Modules-E
      >
      (e.Printed)
      e.SubNames
    >;

  (e.Printed) (e.Indent) s.IdRootName e.Modules =
    (e.Printed);
}

DoCreateTree-Aux {
  (e.L-Indent) e.L-Modules
  (
    e.Printed-B
    (s.Sign s.IdName (e.OtherIndent) (e.OtherSrcPos))
    e.Printed-E
  )
  (s.IdName e.SrcPos) =
    (
      e.Printed-B
      (s.Sign s.IdName (e.OtherIndent) (e.OtherSrcPos))
      e.Printed-E
      ('@' s.IdName (e.L-Indent) (e.SrcPos))
    );

  (e.L-Indent) e.L-Modules
  (e.Printed) (s.IdName e.SrcPos) =
    <DoCreateTree
      (
        e.Printed
        ('*' s.IdName (e.L-Indent) (e.SrcPos))
      )
      (e.L-Indent '  ')
      s.IdName e.L-Modules
    >;
}

PrintUses {
  e.Table (e.Printed) =
    <MLambda::TerminateAccumulator
      & MLambda.Nil
      <MLambda::MapReduce
        & PrintUses-Elem (e.Table) e.Printed
      >
    >
    <PrintParser>;
}

PrintUses-Elem
  (e.Table-B (s.IdName e.Name) e.Table-E)
  (s.Sign s.IdName (e.Indent) (e.SrcPos)) =
    ((s.IdName e.Name) e.Table-B e.Table-E)
    (e.Indent ' ' s.Sign ' ' e.Name ', (' e.SrcPos ')');


//------------------------------------------------------------------------------
// Поиск и печать нелинкованных элементов

SaveNotLinked {
  (e.NotLinkedName) e.Results =
    <MOutModuleStatus::XLinx e.NotLinkedName>
    <MOutModuleStatus::Flush>
    <MFileIO::Save
      (e.NotLinkedName)
      <SeparateUseds
        ((<Hash 'RunTime' 43>)) (/* накопление запросов */)
        <CollectByHash
          <MLambda::Map & FilterFunction e.Results>
        >
      >
    >;
}

FilterFunction {
  (
    ('!' (e.ScopeClass) (e.Name) (e.SrcPos))
    e.SubEntities
  ) =
    <SwFilterFunction
      <IsFunctionScopeClass e.ScopeClass>
      (e.Name) (e.ScopeClass) (e.SrcPos) e.SubEntities
    >;

  (Parser) = ;
}

IsFunctionScopeClass {
  'Entry' = Function; 'Local' = Function; 'Swap' = Function;
  e.Other = NotFunction;
}

SwFilterFunction {
  Function (e.Name s.Hash) (e.ScopeClass) (e.SrcPos) e.SubEntities =
    (s.Hash
      (
        (e.Name) (e.ScopeClass) (e.SrcPos)
        <MLambda::Map
          & FilterFunction-SubEntity e.SubEntities
        >
      )
    );

  NotFunction (e.Name) (e.SrcPos) e.SubEntities =
    /* пусто */;
}

FilterFunction-SubEntity {
  ('?' (e.ScopeClass) (e.Name s.Hash) (e.SrcPos)) =
    (e.Name s.Hash);

  ('>' (e.ScopeClass) (e.Name) (e.SrcPos)) =
    /* пусто */;
}

SeparateUseds {
  ((e.NextRequest s.Hash) e.Requests) (e.SubRequests)
  e.Entities-B
  (s.Hash
    e.HashGroup-B
    ((e.NextRequest) (e.ScopeClass) (e.SrcPos) e.SubEntities)
    e.HashGroup-E
  )
  e.Entities-E =
    <SeparateUseds
      (e.Requests) (e.SubRequests e.SubEntities)
      e.Entities-B <RestoreHashGroup s.Hash e.HashGroup-B e.HashGroup-E> e.Entities-E
    >;

  ((e.NextRequest) e.Requests) (e.SubRequests)
  e.Entities =
    <SeparateUseds
      (e.Requests) (e.SubRequests) e.Entities
    >;

  () () e.NotLinkedEntities =
    <PrintNotLinked
      <MLambda::Map
        <MLambda::Composite
          & MLambda.UnBracket
          <MLambda::BindLeft & MStrings.Skip 1>
        >
        e.NotLinkedEntities
      >
    >;

  () (e.SubRequests) e.Entities =
    <SeparateUseds
      ( <MStrings::Unique e.SubRequests> )
      ()
      e.Entities
    >;
}

RestoreHashGroup {
  s.Hash = /* пусто */;

  s.Hash e.HashGroup = (s.Hash e.HashGroup);
}

PrintNotLinked
  e.Entities =
    ('Not linked: ')
    <PrintNotLinked-AsTree
      (/* отступ */)
      <CollectTree
        <MLambda::Map & DeleteSubRequests
          <MOrder::Sort e.Entities>
        >
      >
    >;

DeleteSubRequests {
  ((e.Name) (e.ScopeClass) (e.SrcPos) e.SubRequests) =
    ((e.Name) (e.ScopeClass) (e.SrcPos));
}

CollectTree {
  ((e.Qualifier '::' e.SubName1) (e.ScopeClass1) (e.SrcPos1))
  ((e.Qualifier '::' e.SubName2) (e.ScopeClass2) (e.SrcPos2))
  e.Tail =
    <CollectTree-Aux
      (e.Qualifier)
      (
        ((e.SubName1) (e.ScopeClass1) (e.SrcPos1))
        ((e.SubName2) (e.ScopeClass2) (e.SrcPos2))
      )
      e.Tail
    >;

  ((e.Name) (e.ScopeClass) (e.SrcPos)) e.Tail =
    (Leaf (e.ScopeClass) (e.Name) (e.SrcPos))
    <CollectTree e.Tail>;

  = ;
}

CollectTree-Aux {
  (e.Qualifier) (e.SubNames)
  ((e.Qualifier '::' e.SubName) (e.ScopeClass) (e.SrcPos)) e.Tail =
    <CollectTree-Aux
      (e.Qualifier)
      (e.SubNames ((e.SubName) (e.ScopeClass) (e.SrcPos))) e.Tail
    >;

  (e.Qualifier) (e.SubNames) e.Tail =
    (Tree
      (e.Qualifier)
      <CollectTree e.SubNames>
    )
    <CollectTree e.Tail>;
}

PrintNotLinked-AsTree {
  (e.Indent) e.Tree =
    <MLambda::Map
      <MLambda::BindLeft & DoPrintNotLinked-AsTree (e.Indent)>
      e.Tree
    >;
}

DoPrintNotLinked-AsTree {
  () t.Node =
    () <DoPrintNotLinked-AsTree-SwNode () t.Node>;

  (e.Indent) t.Node =
    <DoPrintNotLinked-AsTree-SwNode (e.Indent) t.Node>;
}

DoPrintNotLinked-AsTree-SwNode {
  (e.Indent) (Tree (e.Root) e.SubTrees) =
    (e.Indent e.Root '::')
    <MLambda::Map
      <MLambda::BindLeft & DoPrintNotLinked-AsTree (e.Indent '  ')>
      <MOrder::Sort e.SubTrees>
    >;

  (e.Indent) (Leaf (e.ScopeClass) (e.Name) (e.SrcPos)) =
    (e.Indent e.ScopeClass ': ' e.Name ', (' e.SrcPos ')');
}

$END BE-XLinx::MLinker.
