$MODULE Config::MConfig;

//------------------------------------------------------------------------------

$IMPORT MFileSystem;
$IMPORT MLambda;
$IMPORT MQualifiedName;

//------------------------------------------------------------------------------

$DATA Config;

/*
  Внутреннее представление
  [Config t.Option*]

  t.Option := t.MP-Option | t.BackEndOption | t.FrontEndOption
    | t.MakeModeOption

  t.MP-Option := (ModulePath (e.PtFolder)*)

  t.BackEndOption :=
    (BackEnd
      s.Name
      (Generator t.FnGenerator)
      (Linker t.FnLinker)
      (Folder e.PtFolder) (Ext e.Ext)
    )

  s.Name ::= IDENTIFIER -- имя диспетчера
  t.FnGenerator ::= { t.IModule e.FileName = t.IModule }
  <t.FnLinker (e.OutName) (t.ModuleName e.ObjName)*>
    == Success
    == Fails
  e.Folder -- имя папки
  e.Ext -- расширение файла

  t.FrontEndOption :=
    (FrontEnd
      s.FEName
      (FnParser t.FnParser)
      (Ext e.Ext)
    )

  s.FEName ::= IDENTIFIER -- Имя
  t.FnParser ::= {
    t.hErrorList t.QualifiedName e.FileName =
      t.hErrorList Success s.Result t.IModule;

    t.hErrorList t.QualifiedName e.FileName =
      t.hErrorList Fails;
  }
  s.Result ::= Success | Warnings | Errors
  e.Ext -- Расширение файлов исходного текста
    Функция s.FnParser может предполагать, что файл с заданным именем
  существует.

  t.MakeModeOptions ::= (Mode s.Mode)
  s.Mode ::= Make | Build | LinkOnly
*/

//------------------------------------------------------------------------------

/**
  <Create e.ModulePath>
    == t.Config
  e.PtModulePath = (e.PtPathToFolder)*
*/
$ENTRY Create
  e.PtModulePath =
    [Config (ModulePath e.PtModulePath)];

//------------------------------------------------------------------------------

/**
  <GetModulePath t.Config> == e.PtModulePath
*/
$ENTRY GetModulePath
  [Config e.Opt-B (ModulePath e.PtModulePath) e.Opt-E] =
    e.PtModulePath;

//==============================================================================

/**
  <SetMakeMode t.Config s.Mode>
    == t.Config

  s.Mode ::= Make | Build | LinkOnly
*/
$ENTRY SetMakeMode {
  [Config e.Options] Make =
    [Config e.Options (Mode Make)];

  [Config e.Options] Build =
    [Config e.Options (Mode Build)];

  [Config e.Options] LinkOnly =
    [Config e.Options (Mode LinkOnly)];
}

//------------------------------------------------------------------------------

/**
  <GetMakeMode t.Config> == s.Mode

  s.Mode == Make | Build | LinkOnly
*/
$ENTRY GetMakeMode
  [Config e.Optinons-B (Mode s.Mode) e.Options-E] =
    s.Mode;

//==============================================================================

/**
  <RegisterBackEnd
    t.Config s.Name t.FnGenerator t.FnLinker (e.PtFolder) (e.Ext)
  >
    == t.Config
  s.Name ::= IDENTIFIER -- имя диспетчера
  t.FnGenerator ::= { t.IModule e.FileName = t.IModule }
  <t.FnLinker t.hContext (e.OutName) (t.ModuleName e.ObjName)*>
    == t.hContext Success
    == t.hContext Fails
  e.Folder -- имя папки
  e.Ext -- расширение файла
*/
$ENTRY RegisterBackEnd {
  [Config e.Options-B (BackEnd s.Name e.Options) e.Options-E]
  s.Name t.FnGenerator t.FnLinker (e.PtFolder) (e.Ext) =
    [Config
      e.Options-B
      (BackEnd
        s.Name
        (Generator t.FnGenerator)
        (Linker t.FnLinker)
        (Folder e.PtFolder) (Ext e.Ext)
      )
      e.Options-E
    ];

  [Config e.Options]
  s.Name t.FnGenerator t.FnLinker (e.PtFolder) (e.Ext) =
    [Config
      e.Options
      (BackEnd
        s.Name
        (Generator t.FnGenerator)
        (Linker t.FnLinker)
        (Folder e.PtFolder) (Ext e.Ext)
      )
    ];

}


//------------------------------------------------------------------------------

/**
  <GetExtendedBackEndList t.Config>
    == (s.Name t.FnGenerator t.FnLinker)*
*/
$ENTRY GetExtendedBackEndList {
  [Config e.Options] =
    <MLambda::Map & ExtendedEntry e.Options>;
}

ExtendedEntry {
  (BackEnd
    s.Name
    (Generator t.FnGenerator)
    (Linker t.FnLinker)
    e.OtherOptions
  ) =
    (s.Name t.FnGenerator t.FnLinker);

  t.OtherOption = /* пусто */;
}

//------------------------------------------------------------------------------

/**
  <GetBackEndList t.Config> == e.BackEndName
*/
$ENTRY GetBackEndList
  t.Config =
    <MLambda::Map & BackEnds <GetExtendedBackEndList t.Config>>;

BackEnds {
  (s.Name t.FnGenerator t.FnLinker) = s.Name;

  t.OtherOption = ;
}

//------------------------------------------------------------------------------

/**
  <GetBEPath-T t.Config s.BEName t.ModuleName e.PtBaseFolder>
    == Success e.StrOutPath
    == Fails
*/
$ENTRY GetBEPath-T
  [Config e.Options] s.BEName t.ModuleName e.PtBaseFolder =
    <GetBEPath-T-Aux
      ( <MQualifiedName::ToRelativeFSPath-Pt t.ModuleName> )
      ( e.PtBaseFolder )
      s.BEName <MLambda::Map & GetFolderExt e.Options>
    >;

GetFolderExt {
  (BackEnd s.BackEnd e.Options (Folder e.PtFolder) (Ext e.Ext)) =
    (s.BackEnd (e.PtFolder) e.Ext);

  t.OtherOption = ;
}

GetBEPath-T-Aux {
  ( e.PtRelativePath ) ( e.PtBaseFolder )
  s.BackEnd e.BackEnds-B (s.BackEnd (e.PtFolder) e.Ext) e.BackEnds-E =
    <Concat3 (e.PtBaseFolder) (e.PtFolder) (e.PtRelativePath) e.Ext>;

  ( e.RelativePath ) ( e.BaseFolder )
  s.BackEnd e.BackEnds =
    Fails;
}

Concat3 {
  (e.PtBaseFolder) (e.PtFolder) (e.PtRelativePath) e.Ext =
    <Concat3-Aux1
      ( <MFileSystem::ConcatPath (e.PtBaseFolder) e.PtFolder> )
      (e.PtRelativePath) e.Ext
    >;
}

Concat3-Aux1 {
  (Success e.PtFolder) (e.PtRelativePath) e.Ext =
    <Concat3-Aux2
      ( <MFileSystem::ConcatPath (e.PtFolder) e.PtRelativePath> )
      e.Ext
    >;

  (Fails) (e.PtRelativePath) e.Ext = Fails;
}

Concat3-Aux2 {
  (Success e.PtFullPath) e.Ext =
    Success <MFileSystem::StrFromPath e.PtFullPath> '.' e.Ext;

  (Fails) e.Ext = Fails;
}


//==============================================================================

/**
  <RegisterFrontEnd
    t.Config s.Name t.FnParser (e.Ext)
  >
    == t.Config
*/
$ENTRY RegisterFrontEnd {
  [Config e.Options-B (FrontEnd s.Name e.Options) e.Options-E]
  s.Name t.FnParser (e.Ext) =
    [Config
      e.Options-B
      (FrontEnd s.Name (FnParser t.FnParser) (Ext e.Ext))
      e.Options-E
    ];

  [Config e.Options]
  s.Name t.FnParser (e.Ext) =
    [Config
      e.Options
      (FrontEnd s.Name (FnParser t.FnParser) (Ext e.Ext))
    ];
}

//------------------------------------------------------------------------------


/**
  <GetFEPath-T t.Config t.ModuleName e.PtBaseFolder>
    == Success e.StrFilePath
    == Fails
*/
$ENTRY GetFEPath-T {
  [Config
    e.Options-B
    (FrontEnd s.Name (FnParser t.Parser) (Ext e.Ext))
    e.Options-E
  ]
  s.Name t.ModuleName e.PtBaseFolder =
    <GetFEPath-T-Aux1
      ( <MQualifiedName::ToRelativeFSPath-Pt t.ModuleName> )
      ( e.Ext ) e.PtBaseFolder
    >;

  [Config e.Options] s.Name t.ModuleName e.BaseFolder =
    Fails;
}

GetFEPath-T-Aux1 {
  (e.PtRelative) (e.Ext) e.PtBaseFolder =
    <GetFEPath-T-Aux2
      (e.Ext)
      <MFileSystem::ConcatPath (e.PtBaseFolder) e.PtRelative>
    >;
}

GetFEPath-T-Aux2 {
  (e.Ext) Success e.PtFullPath =
    Success <MFileSystem::StrFromPath e.PtFullPath> '.' e.Ext;

  (e.Ext) Fails = Fails;
}

//------------------------------------------------------------------------------

/**
  <GetParser t.Config s.FE-Name>
    == Success t.FnParser
    == Fails
*/
$ENTRY GetParser {
  [Config
    e.Options-B (FrontEnd s.Name (FnParser t.FnParser) t.Ext) e.Options-E
  ]
  s.Name =
    Success t.FnParser;

  [Config e.Options] s.Name = Fails;
}

//------------------------------------------------------------------------------

/**
  <GetFrontEndList t.Config> == e.FrontEndNames
*/
$ENTRY GetFrontEndList
  [Config e.Options] =
    <MLambda::Map & FE-Name e.Options>;

FE-Name {
  (FrontEnd s.Name e.Options) = s.Name;

  t.OtherOption = ;
}

//------------------------------------------------------------------------------

/**
  <GetFrontEndExt t.Config s.FrontEnd> == e.Ext
*/
$ENTRY GetFrontEndExt {
  [Config
    e.Options-B (FrontEnd s.Name t.FnParser (Ext e.Ext)) e.Options-E
  ]
  s.Name =
    e.Ext;

  // отсутствие не проверяем
}

$END Config::MConfig.
