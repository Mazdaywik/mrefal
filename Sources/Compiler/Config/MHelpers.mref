$MODULE ConfiG::MHelpers;

$IMPORT MError;
$IMPORT MFileSystem;
$IMPORT MLambda;

$ENTRY TuneEndConfig = ();

/**
  <GenExtent e.ExtentDescription>
    == t.FnExtent

  e.ExtentDescription ::=
    (s.OptionId (e.OptionName) e.DefaultValue)*
*/
$ENTRY GenExtent
  e.ExtentDescription =
    (
      & TuneEndConfig
      <MLambda::Map
        & GenExtentEntry e.ExtentDescription
      >
    );

GenExtentEntry {
  (Single s.OptionId (e.OptionName) e.DefaultValue) =
    ((Param (e.OptionName))
      <MLambda::BindLeft & Handler-Single s.OptionId (e.OptionName)>
      (Optional)
      OneTime
    );

  (FileList s.OptionId (e.OptionName) e.DefaultValue) =
    ((Naked (e.OptionName))
      <MLambda::BindLeft & Handler-FileList s.OptionId (e.OptionName)>
      (Optional)
      OneTime
      Required & FileList-GroupHandler
    );
}

Handler-Single
  s.OptionName (e.OptionText)
  t.hErrorList (e.TunerConfig) t.SrcPos (e.CompilerCmdLine) NoGroup =
    t.hErrorList
    (e.TunerConfig (s.OptionName (e.OptionText) t.SrcPos e.CompilerCmdLine));

Handler-FileList
  s.OptionName (e.OptionText)
  t.hErrorList (e.TunerConfig) t.SrcPos NoParam (e.FileList) =
    t.hErrorList
    (e.TunerConfig (s.OptionName (e.OptionText) t.SrcPos e.FileList));

FileList-GroupHandler
  =
    (
      & FileList-Config
      ((Param (File))
        & FileList-FileHandler
        (Optional)
        Multiply
      )
      ((Naked (EOG))
        & FileList-EOGHandler
        (Required)
        OneTime
      )
    );

FileList-Config = ();

FileList-FileHandler
  t.hErrorList (e.FileList) t.SrcPos (e.PtFileName) NoGroup =
    t.hErrorList (e.FileList (e.PtFileName));

FileList-EOGHandler
  t.hErrorList (e.FileList) t.SrcPos NoParam NoGroup =
    t.hErrorList (e.FileList);

/**
  <InitConfig s.FnExtentDescription e.Tunings>
    == (e.Config)

  <s.FnExtentDescription>
    == e.ExtentDescription
*/
$ENTRY InitConfig
  s.FnDescription e.Tunings =
    (
      <MLambda::Map
        <MLambda::BindLeft & InitTuning e.Tunings>
        <s.FnDescription>
      >
    );

InitTuning
  e.Tunings (s.OptionType s.OptionId (e.OptionName) e.Default) =
    (<GetTuning s.OptionId e.Tunings (e.Default)>);
    
/*
  <GetTuning s.Tuning e.TunerList (e.Default)>
    == e.TunerValue
*/
GetTuning
  s.Tuning e.Tunings (e.Default) =
    <GetTuning-Aux
      s.Tuning
      e.Tunings (s.Tuning ('default') Default e.Default)
    >;

GetTuning-Aux
  s.Tuning e.Tunings-B (s.Tuning (e.Name) t.SrcPos e.Value) e.Tunigs-E =
    s.Tuning e.Value;

/*
  <ConfigExtract t.Config s.Option>
    == e.Value
*/
$ENTRY ConfigExtract
  (e.Config-B (s.Option e.Value) e.Config-E) s.Option = e.Value;

$END ConfiG::MHelpers.
