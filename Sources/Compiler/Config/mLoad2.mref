$MODULE Config::MLoad2;

$IMPORT CmdLine::MParser;
$IMPORT MError;
$IMPORT MFileSystem;

// Регистраторы

$IMPORT Cpp-SR-BE::MInit;
$IMPORT MSymModule;
$IMPORT MXLinx;
$IMPORT Refal5::MInit;
$IMPORT SRefal-BE::MInit;

/**
  <Load t.hErrorList (e.Argument)>
    == t.hErrorList Success t.Config (e.PtFileName)*
    == t.hErrorList Fails
*/
$ENTRY Load
  t.hErrorList e.CommandLine =
    <Load-Aux
      <CmdLine::MParser::Parse
        t.hErrorList
        & TopLevelDescription
        e.CommandLine
      >
    >;

Load-Aux {
  t.hErrorList Success (Help e.Message) =
    t.hErrorList Success (Help e.Message);

  t.hErrorList Success (Config t.Config e.PtFiles) =
    t.hErrorList Success t.Config e.PtFiles;

  t.hErrorList Fails = t.hErrorList Fails;
}

TopLevelDescription =
  (
    & HelpConfig
    ((Naked ('help') ('h') ('?') (EOG))
      & HelpHandler
      Required
      Multiply
    )
  )
  (
    & RealConfig
    ((Param (File))
      & FileHandler
      Required
      Multiply
      // Здесь возможно будет описание группы
    )
    ((Param ('MP'))
      & ModulePathHandler
      (Optional & DefaultModulePathHandler)
      Multiply
    )
    ((Switch (('make')) (('build')) (('linkonly')))
      & MakeModeHandler
      Required
      OneTime
    )
    ((Param ('be') ('profile'))
      & BackEndSelectorHandler
      Required
      OneTime
    )
    ((Naked ('xlinx'))
      & XLinxOnHandler
      (Optional)
      OneTime
    )
    ((Param ('tune-be'))
      & TuneBEHandler
      (Optional)
      Multiply
      Required & TuneBEGroup
    )
    ((Param ('tune-fe'))
      & TuneFEHandler
      (Optional)
      Multiply
      Required & TuneFEGroup
    )
    ((Naked (EOG))
      & EOGHandler
      Required
      OneTime
    )
  );

HelpConfig =
  (Help
    ('Printing help for compiler')
    ('use mrefal -foo -bar')
  );

HelpHandler
  t.hErrorList t.Help t.SrcPos NoParam NoGroup =
    t.hErrorList t.Help;

RealConfig = ();

FileHandler {
  t.hErrorList
  (e.Config-B (Files e.Files) e.Config-E)
  t.SrcPos (e.FileName) NoGroup =
    t.hErrorList
    (e.Config-B (Files e.Files (e.FileName)) e.Config-E);

  t.hErrorList (e.Config) t.SrcPos (e.FileName) NoGroup =
    t.hErrorList (e.Config (Files (e.FileName)));
}

ModulePathHandler
  t.hErrorList (e.Config) t.SrcPos (e.StrPath) NoGroup =
    <ModulePath-IsCorrectPath
      t.hErrorList (e.Config) t.SrcPos (e.StrPath)
      <MFileSystem::PathFromStr e.StrPath>
    >;

ModulePath-IsCorrectPath {
  t.hErrorList
  (e.Config-B (ModulePath e.Paths) e.Config-E)
  t.SrcPos (e.StrPath)
  Success e.PtPath =
    t.hErrorList
    (e.Config-B (ModulePath e.Paths (e.PtPath)) e.Config-E);

  t.hErrorList (e.Config) t.SrcPos (e.SrcPath)
  Success e.PtPath =
    t.hErrorList
    (e.Config (ModulePath (e.PtPath)));

  t.hErrorList (e.Config) t.SrcPos (e.StrPath) Fails =
    <MError::AddCmdLineError
      t.hErrorList t.SrcPos 'Incorrect path \'' e.StrPath '\''
    >
    (e.Config);
}

DefaultModulePathHandler
  t.hErrorList (e.Config) t.SrcPos NoParam NoGroup =
    <ModulePathHandler
      t.hErrorList (e.Config) t.SrcPos ('.') NoGroup
    >;

MakeModeHandler
  t.hErrorList (e.Config) t.SrcPos (e.Mode) NoGroup =
    t.hErrorList
    (e.Config (Mode <MakeModeFromStr e.Mode>));

MakeModeFromStr {
  'make' = Make; 'build' = Build; 'linkonly' = LinkOnly;
}

BackEndSelectorHandler
  t.hErrorList (e.Config) t.SrcPos (e.BackEnd) NoGroup =
    <SwBackEndSelector
      t.hErrorList (e.Config) t.SrcPos (e.BackEnd)
      <ProfileBackEnd>
    >;

SwBackEndSelector {
  t.hErrorList (e.Config) t.SrcPos (e.BackEndName)
  e.BEProfiles-B
  (s.ProfileName (e.Depended) e.Names-B (e.BackEndName) e.Names-E)
  e.BEProfiles-E =
    t.hErrorList
    (<AddProfile s.ProfileName (e.Depended) e.Config>);

  t.hErrorList (e.Config) t.SrcPos (e.BackEndName) e.BEProfiles =
    <MError::AddCmdLineError
      t.hErrorList t.SrcPos 'Unknown profile \"' e.BackEndName '\"'
    >
    (e.Config);
}

AddProfile {
  s.Profile (e.Depended) e.Config-B XLinxOn e.Config-E =
    e.Config-B e.Config-E (Profile s.Profile (e.Depended XLinx-BE));

  s.Profile (e.Depended) e.Config =
    e.Config (Profile s.Profile (e.Depended));
}

XLinxOnHandler {
  t.hErrorList
  (e.Config-B (Profile s.Profile (e.Depended)) e.Config-E)
  t.SrcPos NoParam NoGroup =
    t.hErrorList
    (e.Config-B (Profile s.Profile (e.Depended XLinx-BE)) e.Config-E);

  t.hErrorList (e.Config) t.SrcPos NoParam NoGroup =
    t.hErrorList (e.Config XLinxOn);
}

EOGHandler
  t.hErrorList
  (e.Config-B (Files e.Files) e.Config-E) t.SrcPos NoParam NoGroup =
    <EOGHandler-Aux-MakeMode
      t.hErrorList
      (Files e.Files)
      (e.Config-B e.Config-E)
    >;

EOGHandler-Aux-MakeMode
  t.hErrorList (Files e.Files)
  (e.Config-B (Mode s.Mode) e.Config-E) =
    <EOGHandler-Aux-ModulePath
      t.hErrorList
      (Files e.Files)
      (Mode s.Mode)
      (e.Config-B e.Config-E)
    >;

EOGHandler-Aux-ModulePath
  t.hErrorList (Files e.Files) (Mode s.Mode)
  (e.Config-B (ModulePath e.ModulePath) e.Config-E) =
    <EOGHandler-Aux-Profile
      t.hErrorList
      (Files e.Files) (Mode s.Mode) (ModulePath e.ModulePath)
      (e.Config-B e.Config-E)
    >;

EOGHandler-Aux-Profile
  t.hErrorList
  (Files e.Files) (Mode s.Mode) (ModulePath e.ModulePath)
  (e.Config-B (Profile s.Profile (e.Depended)) e.Config-E) =
    <EOGHandler-Aux-Depended
      t.hErrorList
      (Files e.Files) (Mode s.Mode) (ModulePath e.ModulePath)
      (Profile s.Profile)
      (e.Depended)
      (e.Config-B e.Config-E)
    >;

EOGHandler-Aux-Depended
  t.hErrorList
  (Files e.Files) (Mode s.Mode) (ModulePath e.ModulePath)
  (Profile s.Profile) (e.Depended) (e.Config) =
    <EOGHandler-Aux-DoDepended
      t.hErrorList
      (Files e.Files) (Mode s.Mode) (ModulePath e.ModulePath)
      (Profile s.Profile)
      (/* scanned back-ends */)
      (e.Config)
      (e.Depended)
    >;

EOGHandler-Aux-DoDepended {
  t.hErrorList
  (Files e.Files) (Mode s.Mode) (ModulePath e.ModulePath) (Profile s.Profile)
  (e.ScannedBackEnds) (e.Config) () =
    <EOGHandler-Aux-CheckDirExt
      t.hErrorList
      (Files e.Files) (Mode s.Mode) (ModulePath e.ModulePath)
      (Profile s.Profile) (BackEnds e.ScannedBackEnds) (e.Config)
    >;

  t.hErrorList
  t.Files t.Mode t.ModulePath t.Profile
  (e.ScannedBackEnds) (e.Config) (s.NextId e.Ids) =
    <EOGHandler-Aux-DoDepended
      t.hErrorList
      t.Files t.Mode t.ModulePath t.Profile
      <ScanDepended-Ext
        (e.ScannedBackEnds) (e.Config) s.NextId
      >
      (e.Ids)
    >;
}

ScanDepended-Ext {
  (e.ScannedBackEnds)
  (
    e.Config-B
    (BackEnd s.Id
      e.Tweaks-B
      (Ext (e.OptName) t.SrcPos e.Ext)
      e.Tweaks-E
    )
    e.Config-E
  )
  s.Id =
    <ScanDepended-Dir
      (e.ScannedBackEnds)
      s.Id (Ext t.SrcPos e.Ext)
      (e.Config-B (BackEnd s.Id e.Tweaks-B e.Tweaks-E) e.Config-E)
    >;

  (e.ScannedBackEnds) (e.Config) s.Id =
    <ScanDepended-Dir
      (e.ScannedBackEnds)
      s.Id (Ext Default <LookupDefault-BE-Ext s.Id>)
      (e.Config)
    >;
}
    

//------------------------------------------------------------------------------

TuneBEGroup =
  (
    & TuneEndConfig
    ((Param ('ext'))
      & ExtHandler
      (Optional)
      OneTime
    )
    ((Param ('dir'))
      & DirHandler
      (Optional)
      OneTime
    )
    ((Naked (EOG))
      & TunerEOGHandler
      Required
      OneTime
    )
  );

TuneEndConfig = ();

ExtHandler
  t.hErrorList (e.TunerConfig) t.SrcPos (e.Ext) NoGroup =
    /*
      Возможно, здесь следует встроить проверку на корректность расширения.
    */
    t.hErrorList
    (e.TunerConfig (Ext ('ext') t.SrcPos e.Ext));

DirHandler
  t.hErrorList (e.TunerConfig) t.SrcPos (e.StrDirectory) NoGroup =
    <DirHandler-SwCorrectDir
      t.hErrorList (e.TunerConfig) t.SrcPos
      (e.StrDirectory)
      <MFileSystem::PathFromStr e.StrDirectory>
    >;

DirHandler-SwCorrectDir {
  t.hErrorList (e.TunerConfig) t.SrcPos
  (e.StrDirectory) Success (e.PtDirectory) =
    t.hErrorList
    (e.TunerConfig (Dir ('dir') t.SrcPos e.PtDirectory));

  t.hErrorList (e.TunerConfig) t.SrcPos
  (e.StrDirectory) Fails =
    <MError::AddCmdLineError
      t.hErrorList t.SrcPos 'Illegal folder path'
    >
    (e.TunerConfig);
}

TunerEOGHandler
  t.hErrorList (e.TunerConfig) t.SrcPos NoParam NoGroup =
    t.hErrorList (e.TunerConfig);

TuneBEHandler
  t.hErrorList (e.Config) t.SrcPos (e.BackEndName) (e.Options) =
    <SwTuneBEHandler
      t.hErrorList (e.Config) t.SrcPos
      <BackEnd-IdFromName e.BackEndName>
      (e.Options)
    >;

SwTuneBEHandler {
  t.hErrorList
  (e.Config-B (BackEnd s.BackEndId e.Options) e.Config-E)
  t.SrcPos Success s.BackEndId (e.NewOptions) =
    <MergeOptions
      t.hErrorList
      (e.Config-B) (e.Config-E)
      t.SrcPos
      BackEnd
      s.BackEndId
      (/* merged options */)
      (e.Options)
      (e.NewOptions)
    >;

  t.hErrorList (e.Config) t.SrcPos Success s.BackEndId (e.Options) =
    t.hErrorList (e.Config (BackEnd s.BackEndId e.Options));

  t.hErrorList (e.Config) t.SrcPos Fails e.BackEndName (e.Options) =
    <MError::AddCmdLineError
      t.hErrorList t.SrcPos
      'Illegal name of back-end: \'' e.BackEndName '\''
    >
    (e.Config);
}

MergeOptions {
  t.hErrorList (e.Config-B) (e.Config-E)
  t.SrcPos s.EndType s.EndId
  (e.Merged)
  ((s.NextOption (e.Name) t.OldSrcPos e.OldValue) e.OldOptions)
  (e.NewOptions-B (s.NextOption (e.Name) t.NewSrcPos e.NewValue) e.NewOptions-E) =
    <MergeOptions
      <MError::AddCmdLineError
        t.SrcPos t.NewSrcPos 'Redefinition of option \'-' e.Name '\''
      >
      (e.Config-B) (e.Config-E)
      t.SrcPos s.EndType s.EndId
      (e.Merged
        (s.NextOption (e.Name) t.OldSrcPos e.OldValue)
      )
      (e.OldOptions) (e.NewOptions-B e.NewOptions-E)
    >;

  t.hErrorList (e.Config-B) (e.Config-E)
  t.SrcPos s.EndType s.EndId
  (e.Merged)
  ((s.NextOption (e.Name) t.SrcPos e.Value) e.OldOptions)
  (e.NewOptions) =
    <MergeOptions
      t.hErrorList (e.Config-B) (e.Config-E)
      t.SrcPos s.EndType s.EndId
      (e.Merged
        (s.NextOption (e.Name) t.SrcPos e.Value)
      )
      (e.OldOptions) (e.NewOptions)
    >;

  t.hErrorList (e.Config-B) (e.Config-E)
  t.SrcPos s.EndType s.EndId
  (e.Merged) (/* old options */)
  (e.NewOptions) =
    t.hErrorList
    (
      e.Config-B
      (s.EndType s.EndId e.Merged e.NewOptions)
      e.Config-E
    );
}

//------------------------------------------------------------------------------

TuneFEGroup =
  (
    & TuneEndConfig
    ((Param ('ext'))
      & ExtHandler
      (Optional)
      OneTime
    )
    ((Naked (EOG))
      & TunerEOGHandler
      Required
      OneTime
    )
  );

TuneFEHandler
  t.hErrorList (e.Config) t.SrcPos (e.FrontEndName) (e.Options) =
    <SwTuneFEHandler
      t.hErrorList (e.Config) t.SrcPos
      <FrontEnd-IdFromName e.FrontEndName>
      (e.Options)
    >;

SwTuneFEHandler {
  t.hErrorList
  (e.Config-B (FrontEnd s.BackEndId e.Options) e.Config-E)
  t.SrcPos Success s.FrontEndId (e.NewOptions) =
    <MergeOptions
      t.hErrorList
      (e.Config-B) (e.Config-E)
      t.SrcPos
      FrontEnd
      s.FrontEndId
      (/* merged options */)
      (e.Options)
      (e.NewOptions)
    >;

  t.hErrorList (e.Config) t.SrcPos Success s.FrontEndId (e.Options) =
    t.hErrorList (e.Config (FrontEnd s.FrontEndId e.Options));

  t.hErrorList (e.Config) t.SrcPos Fails e.FrontEndName (e.Options) =
    <MError::AddCmdLineError
      t.hErrorList t.SrcPos
      'Illegal name of front-end: \'' e.FrontEndName '\''
    >
    (e.Config);
}


//------------------------------------------------------------------------------

BackEndsTable =
  (Refal5BE
    ('Refal5')
    ((Relative) ('~ROut'))
    ('rout')
    & Refal5.MInit.Register
    & ExtentNone
  )
  (SymInfo
    ('SymInfo')
    ((Relative) ('~Defs'))
    ('rsym')
    & MSymModule.Register
    & ExtentNone
  )
  (
    XLinxBE
    ('XLinx')
    ((Relative) ('~XLinx'))
    ('xlinx')
    & MXLinx.Register
    & ExtentNone
  )
  (SRefal-BE
    ('SRefal-BE')
    ((Relative) ('~SimRef'))
    ('sref')
    & SRefal-BE.MInit.Register
    & ExtentNone
  )
  (Cpp-SR-BE
    ('Cpp-SR-BE')
    ((Relative) ('~CppSR'))
    ('cpp')
    & Cpp-SR-BE.MInit.Register
    & ExtentNone
  );

ExtentNone = ;

ProfileBackEnd =
  (Refal5 (Refal5BE SymInfo) ('Refal5') ('R5'))
  (SimpleRefal (SRefal-BE SymInfo)
    ('SRefal') ('Simple') ('SimpleRefal') ('SR')
  )
  (Cpp-SR (Cpp-SR-BE SymInfo) ('CPPSR'));

//$ENTRY DefTuners =
//  (TuneFE MRefal_FrontEnd ('mref'));
//
//$ENTRY TunerName {
//  MRefal_FrontEnd = 'MRefal';
//}
//
//$ENTRY EndMakerFunc {
//  MRefal_FrontEnd = & MRefal-FE.MInit.Register;
//}
//
//$ENTRY SelectLowFrontEnd {
//  'MRefal' = (MRefal_FrontEnd ('mref'));
//  e.Other = Unknown (e.Other);
//}


$END Config::MLoad2.
