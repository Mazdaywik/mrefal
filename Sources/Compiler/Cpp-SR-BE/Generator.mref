$MODULE Cpp-SR-BE::Generator;

$IMPORT Cpp-SR-BE::Algorithm;
$IMPORT Cpp-SR-BE::LibraryEx;
$IMPORT Cpp-SR-BE::Library;
$IMPORT MLambda;
$IMPORT MQualifiedName;

QNameCode {
  t.Name = <DoQNameCode <MQualifiedName::Parse t.Name>>;
}

DoQNameCode {
  (e.First) = <NameCode e.First>;

  (e.First) (e.Second) =
    <NameCode e.First> 'P_' <NameCode e.Second>;

  (e.First) (e.Second) e.Tail =
    <NameCode e.First> 'P_' <DoQNameCode (e.Second) e.Tail>;
}

NameCode {
  e.Name = <MLambda::Map & NameCodeChar e.Name>;
}

NameCodeChar {
  '!' = 'B_'; '?' = 'Q_'; '_' = 'U_'; '-' = 'D_'; s.Other = s.Other;
}

FuncArguments {
  = 'refalrts::Iter arg_begin, refalrts::Iter arg_end';
}

NakedArguments {
  = 'refalrts::Iter, refalrts::Iter';
}

TextFromMemoryClass {
  Local = 'static '; Entry = ;
}

SwGenFnStart {
  s.MemoryClass s.FnArguments t.Name =
    (
      <TextFromMemoryClass s.MemoryClass>
      'refalrts::FnResult '
      <QNameCode t.Name>
      '(' <s.FnArguments> ') {'
    )
    ('  refalrts::this_is_generated_function();');
}

$ENTRY GenFnStart {
  s.MemoryClass t.Name =
    <SwGenFnStart s.MemoryClass & FuncArguments t.Name>;
}

$ENTRY GenFnEnd {
  = ('  return refalrts::cRecognitionImpossible;') ('}') ();
}

$ENTRY GenEEnum {
  t.Name = <SwGenFnStart Entry & NakedArguments t.Name> <GenFnEnd>;
}

$ENTRY GenEnum {
  t.Name = <SwGenFnStart Local & NakedArguments t.Name> <GenFnEnd>;
}

$ENTRY GenExtern {
  t.Name =
    (
      'extern refalrts::FnResult '
      <QNameCode t.Name>
      '(' <FuncArguments> ');'
    )
    ();
}

$ENTRY GenForward {
  t.Name =
    (
      'static refalrts::FnResult '
      <QNameCode t.Name>
      '(' <FuncArguments> ');'
    )
    ();
}

$ENTRY GenESwap {
  t.Name = <GenSwap_Aux Entry t.Name>;
}

$ENTRY GenSwap {
  t.Name = <GenSwap_Aux Local t.Name>;
}

GenSwap_Aux {
  s.MemoryClass t.Name =
    <GenFnStart s.MemoryClass t.Name>
    ('  refalrts::Iter func_name = arg_begin;')
    ()
    ('  refalrts::move_left( func_name, arg_end );')
    ()
    ('  refalrts::Iter info_b = func_name;')
    ('  refalrts::Iter info_e = arg_end;')
    ()
    ('  refalrts::move_left( info_b, info_e );')
    ('  refalrts::move_right( info_b, info_e );')
    ()
    ('  static refalrts::Iter s_head = refalrts::initialize_swap_head( func_name );')
    ()
    ('  refalrts::Iter saved_b;')
    ('  refalrts::Iter saved_e;')
    ()
    ('  refalrts::swap_info_bounds( saved_b, saved_e, s_head );')
    ('  refalrts::splice_evar( arg_begin, saved_b, saved_e );')
    ('  refalrts::swap_save( s_head, info_b, info_e );')
    ('  refalrts::splice_to_freelist( arg_begin, arg_end );')
    ()
    ('  return refalrts::cSuccess;')
    ('}')
    ();
}

$ENTRY GenIdent {
  e.Name =
    ('//$LABEL ' e.Name)
    ('template <typename T>')
    ('struct ' <NameCode e.Name> 'L_ {')
    ('  static const char *name() {')
    ('    return "' e.Name '";')
    ('  }')
    ('};')
    ();
}

$ENTRY GenCommonHeaders {
  = ('// Automatically generated file. Don\'t edit!')
  ('#include "refalrts.h"') () ();
}


$ENTRY GenSentence {
  e.Algorithm =
    ('  do {')
    ('    refalrts::Iter ' <BracketsVar_B 0> ' = arg_begin;')
    ('    refalrts::Iter ' <BracketsVar_E 0> ' = arg_end;')
    ('    refalrts::move_left( ' <BracketsVar_B 0> ', ' <BracketsVar_E 0> ' );')
    ('    refalrts::move_left( ' <BracketsVar_B 0> ', ' <BracketsVar_E 0> ' );')
    ('    refalrts::move_right( ' <BracketsVar_B 0> ', ' <BracketsVar_E 0> ' );')
    <GenSentence_Aux
      <Cpp-SR-BE.LibraryEx.MapReduce
        & GenCommand
        ('    ' /* indent */)
        e.Algorithm
      >
    >;
}

GenSentence_Aux {
  (e.Indent) e.Generated =
    e.Generated <GenCloseBrackets e.Indent> ();
}

BracketsVar_B {
  s.BracketNumber = 'bb_' <Cpp-SR-BE.Library.StrFromInt s.BracketNumber>;
}

BracketsVar_E {
  s.BracketNumber = 'be_' <Cpp-SR-BE.Library.StrFromInt s.BracketNumber>;
}

//BracketsVar-OE {
//  s.BracketNumber = 'boe_' <StrFromInt s.BracketNumber>;
//}

/*
  Величина отступа также определяет режим работы. Отступ в 4 пробела --
  вне цикла по открытой e-переменной, отступ больше -- внутри оного цикла.
*/

PrintStkBracket {
  e.Indent s.StkBracket =
    (e.Indent
      'refalrts::Iter ' <BracketsVar_B s.StkBracket> '_stk = '
        <BracketsVar_B s.StkBracket> ';'
    )
    (e.Indent
      'refalrts::Iter ' <BracketsVar_E s.StkBracket> '_stk = '
        <BracketsVar_E s.StkBracket> ';'
    );
}

PrintRecoverStackBracket {
  e.Indent s.StkBracket =
    (e.Indent
      <BracketsVar_B s.StkBracket> ' = ' <BracketsVar_B s.StkBracket> '_stk,'
    )
    (e.Indent
      <BracketsVar_E s.StkBracket> ' = ' <BracketsVar_E s.StkBracket> '_stk,'
    );
}

BracketExcept {
  e.Brackets_B s.Except e.Brackets_E s.Except = e.Brackets_B e.Brackets_E;
}

GenCommand {
  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdComment e.Text) = (e.Indent) (e.Indent '//' e.Text);

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdDeclareEVar e.VarInfo) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <PrintEVar_B e.VarInfo> ';')
    (e.Indent 'refalrts::Iter ' <PrintEVar_E e.VarInfo> ';');

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdDeclareVar e.VarInfo) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <PrintVar e.VarInfo> ';');

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdChar s.Direction s.BracketNumber s.Char) =
    (e.Indent)
    <PrintMatchChar (e.Indent) s.Direction s.BracketNumber s.Char>;

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdNumber s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    <PrintMatchNumber (e.Indent) s.Direction s.BracketNumber s.Number>;

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdName s.Direction s.BracketNumber t.Name) =
    (e.Indent)
    <PrintMatchName (e.Indent) s.Direction s.BracketNumber t.Name>;

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdIdent s.Direction s.BracketNumber e.Name) =
    (e.Indent)
    <PrintMatchIdent (e.Indent) s.Direction s.BracketNumber e.Name>;

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdBrackets s.Direction s.BracketNumber s.InnerBrackets) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <BracketsVar_B s.InnerBrackets> ' = 0;')
    (e.Indent 'refalrts::Iter ' <BracketsVar_E s.InnerBrackets> ' = 0;')
    <PrintMatchBrackets (e.Indent) s.Direction s.BracketNumber s.InnerBrackets>;

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdADT s.Direction s.BracketNumber s.InnerBrackets e.Name) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <BracketsVar_B s.InnerBrackets> ' = 0;')
    (e.Indent 'refalrts::Iter ' <BracketsVar_E s.InnerBrackets> ' = 0;')
    <PrintMatchADT
      (e.Indent) s.Direction s.BracketNumber s.InnerBrackets e.Name
    >;

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdEmpty s.BracketNumber) =
    (e.Indent)
    <PrintMatchEmpty (e.Indent) s.BracketNumber>;

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdVar s.Direction s.BracketNumber s.Mode e.Info) =
    (e.Indent)
    <PrintMatchSTVar (e.Indent) s.Direction s.BracketNumber s.Mode e.Info>;

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdRepeated s.Direction s.BracketNumber e.VarInfo) =
    (e.Indent)
    <PrintMatchRepeated (e.Indent) s.Direction s.BracketNumber e.VarInfo>;

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdClosedE & Cpp-SR-BE.Algorithm.AlgLeft s.BracketNumber 'e' e.Index) =
    (e.Indent)
    (e.Indent
      <PrintEVar_B 1 'e' e.Index> ' = ' <BracketsVar_B s.BracketNumber> ';'
    )
    (e.Indent 'refalrts::use( ' <PrintEVar_B 1 'e' e.Index> ' );')
    (e.Indent
      <PrintEVar_E 1 'e' e.Index> ' = ' <BracketsVar_E s.BracketNumber> ';'
    )
    (e.Indent 'refalrts::use( ' <PrintEVar_E 1 'e' e.Index> ' );');

  (e.Indent)
  (& Cpp-SR-BE.Algorithm.CmdOpenedE & Cpp-SR-BE.Algorithm.AlgLeft s.BracketNumber 'e' e.Index (e.BracketsForSave)) =
    (e.Indent '  ')
    <Cpp-SR-BE.LibraryEx.Map (& PrintStkBracket e.Indent) e.BracketsForSave>
    (e.Indent 'for( ')
    (e.Indent '  refalrts::Iter')
    (e.Indent
      '    ' <PrintEVar_B 1 'e' e.Index> ' = '
        <BracketsVar_B s.BracketNumber> '_stk,'
    )
    (e.Indent
      '    ' <PrintEVar_OE 1 'e' e.Index> ' = '
        <BracketsVar_B s.BracketNumber> '_stk,'
    )
    (e.Indent
      '    ' <BracketsVar_B s.BracketNumber> ' = '
        <BracketsVar_B s.BracketNumber> '_stk,'
    )
    (e.Indent
      '    ' <BracketsVar_E s.BracketNumber> ' = '
        <BracketsVar_E s.BracketNumber> '_stk;'
    )
    (e.Indent '  '
      '! empty_seq( ' <PrintEVar_OE 1 'e' e.Index> ', '
      <BracketsVar_E s.BracketNumber> ' );'
    )
    <Cpp-SR-BE.LibraryEx.Map (& PrintRecoverStackBracket e.Indent '  ') e.BracketsForSave>
    (e.Indent '  '
      'refalrts::next_term( ' <PrintEVar_OE 1 'e' e.Index> ', '
      <BracketsVar_E s.BracketNumber> ' )'
    )
    (e.Indent ') {')
    (e.Indent '  '
      <BracketsVar_B s.BracketNumber> ' = ' <PrintEVar_OE 1 'e' e.Index> ';'
    )
    (e.Indent '  '
      <PrintEVar_B 1 'e' e.Index> ' = ' <BracketsVar_B s.BracketNumber> '_stk;'
    )
    (e.Indent '  '
      <PrintEVar_E 1 'e' e.Index> ' = ' <PrintEVar_OE 1 'e' e.Index> ';'
    )
    (e.Indent
      '  refalrts::move_right( ' <PrintEVar_B 1 'e' e.Index> ', '
      <PrintEVar_E 1 'e' e.Index> ' );'
    );

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdEmptyResult) =
    (e.Indent)
    ()
    (e.Indent 'refalrts::reset_allocator();')
    (e.Indent 'refalrts::Iter res = arg_begin;');

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdCopyEVar s.Usings 'e' e.Index) =
    (e.Indent)
    (e.Indent
      'if( ! refalrts::copy_evar( ' <PrintEVar_B s.Usings 'e' e.Index> ', '
      <PrintEVar_E s.Usings 'e' e.Index> ', '
      <PrintEVar_B <Cpp-SR-BE.LibraryEx.Dec s.Usings> 'e' e.Index> ', '
      <PrintEVar_E <Cpp-SR-BE.LibraryEx.Dec s.Usings> 'e' e.Index>
      ' ) )'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdCopyVar s.Usings s.Mode e.Index) =
    (e.Indent)
    (e.Indent
      'if( ! refalrts::copy_stvar( ' <PrintVar s.Usings s.Mode e.Index> ', '
      <PrintVar <Cpp-SR-BE.LibraryEx.Dec s.Usings> s.Mode e.Index> ' ) )'
    )
    (e.Indent '  return refalrts::cNoMemory;');

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdAllocateElem s.ElemNumber e.ElemInfo) =
    (e.Indent)
    (e.Indent 'refalrts::Iter ' <PrintElemVar s.ElemNumber> ' = 0;')
    <PrintAllocateElem (e.Indent) s.ElemNumber e.ElemInfo>;

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdLinkBrackets s.Left s.Right) =
    (e.Indent)
    (e.Indent
      'refalrts::link_brackets( '
      <PrintElemVar s.Left> ', ' <PrintElemVar s.Right>
      ' );'
    );

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdPushStack s.ElemNumber) =
    (e.Indent)
    (e.Indent 'refalrts::push_stack( ' <PrintElemVar s.ElemNumber> ' );');

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdInsertElem & Cpp-SR-BE.Algorithm.ElElem s.ElemNumber) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_elem( res, ' <PrintElemVar s.ElemNumber> ' );'
    );

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdInsertElem & Cpp-SR-BE.Algorithm.ElSTVar s.Usings s.Mode e.Index) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_stvar( res, '
      <PrintVar s.Usings s.Mode e.Index> ' );'
    );

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdInsertEVar s.Usings 'e' e.Index) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_evar( res, '
      <PrintEVar_B s.Usings 'e' e.Index> ', '
      <PrintEVar_E s.Usings 'e' e.Index> ' );'
    );

  (e.Indent) (& Cpp-SR-BE.Algorithm.CmdReturnResult) =
    (e.Indent)
    (e.Indent 'refalrts::use( res );')
    (e.Indent 'refalrts::splice_to_freelist( arg_begin, arg_end );')
    (e.Indent 'return refalrts::cSuccess;');
}

PrintVar {
  s.Usings s.Mode e.Index =
    s.Mode <NameCode e.Index> '_' <Cpp-SR-BE.Library.StrFromInt s.Usings>;
}

PrintEVar_B {
  s.Usings s.Mode e.Index =
    s.Mode <NameCode e.Index> '_b_' <Cpp-SR-BE.Library.StrFromInt s.Usings>;
}

PrintEVar_E {
  s.Usings s.Mode e.Index =
    s.Mode <NameCode e.Index> '_e_' <Cpp-SR-BE.Library.StrFromInt s.Usings>;
}

PrintEVar_OE {
  s.Usings s.Mode e.Index =
    s.Mode <NameCode e.Index> '_oe_' <Cpp-SR-BE.Library.StrFromInt s.Usings>;
}

Escape {
  '\n' = '\\n';
  '\t' = '\\t';
  '\r' = '\\r';
  '\\' = '\\\\';
  '\'' = '\\' '\'';
  s.Other = s.Other;
}

PrintMatchChar {
  (e.Indent) s.Direction s.BracketNumber s.Char =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('char') '\'' <Escape s.Char> '\''
    >;
}

PrintMatchNumber {
  (e.Indent) s.Direction s.BracketNumber s.Number =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('number') <Cpp-SR-BE.Library.StrFromInt s.Number> 'UL'
    >;
}

PrintMatchName {
  (e.Indent) s.Direction s.BracketNumber t.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('function') '& ' <QNameCode t.Name>
    >;
}

PrintMatchIdent {
  (e.Indent) s.Direction s.BracketNumber e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('ident') ' & ' <NameCode e.Name> 'L_<int>::name'
    >;
}

PrintMatchBrackets {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('brackets')
      <BracketsVar_B s.InnerNum> ', ' <BracketsVar_E s.InnerNum>
    >;
}

PrintMatchADT {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum t.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('adt')
      <BracketsVar_B s.InnerNum> ', '
      <BracketsVar_E s.InnerNum> ', '
      '& ' <QNameCode t.Name>
    >;
}

BreakerFromIndent {
  '    ' = 'break;';

  e.OtherIndent = 'continue;';
}

PrintMatchEmpty {
  (e.Indent) s.BracketNumber =
    (e.Indent
      'if( ! empty_seq( ' <BracketsVar_B s.BracketNumber> ', '
      <BracketsVar_E s.BracketNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

StrFromDirection {
  & Cpp-SR-BE.Algorithm.AlgLeft = 'left'; & Cpp-SR-BE.Algorithm.AlgRight = 'right';
}

VarMatchFunction { 's' = 'svar'; 't' = 'tvar'; }

PrintMatchSTVar {
  (e.Indent) s.Direction s.BracketNumber s.Mode e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      (<VarMatchFunction s.Mode>) <PrintVar 1 s.Mode e.Index>
    >;
}

PrintMatchRepeated {
  (e.Indent) s.Direction s.BracketNumber s.Usings 'e' e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('repeated_evar')
      <PrintEVar_B s.Usings 'e' e.Index> ', '
      <PrintEVar_E s.Usings 'e' e.Index> ', '
      <PrintEVar_B <Cpp-SR-BE.LibraryEx.Dec s.Usings> 'e' e.Index> ', '
      <PrintEVar_E <Cpp-SR-BE.LibraryEx.Dec s.Usings> 'e' e.Index>
    >;

  (e.Indent) s.Direction s.BracketNumber s.Usings s.Mode e.Index =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('repeated_stvar') <PrintVar s.Usings s.Mode e.Index>
      ', ' <PrintVar <Cpp-SR-BE.LibraryEx.Dec s.Usings> s.Mode e.Index>
    >;
}

PrintMatch {
  (e.Indent) s.Direction s.BracketNumber (e.Function) e.TextRep =
    (e.Indent
      'if( ! refalrts::' e.Function '_' <StrFromDirection s.Direction>
      '( ' e.TextRep ', ' <BracketsVar_B s.BracketNumber> ', '
      <BracketsVar_E s.BracketNumber> ' ) ) '
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

PrintElemVar {
  s.Number = 'n' <Cpp-SR-BE.Library.StrFromInt s.Number>;
}

PrintAllocateElem {
  (e.Indent) s.ElemNumber s.ElementType e.Info =
    <PrintAllocate_Aux
      (e.Indent) s.ElemNumber
      ( <SwAllocator s.ElementType> )
      ( <SwInfo s.ElementType e.Info> )
    >
    (e.Indent '  return refalrts::cNoMemory;');
}

PrintAllocate_Aux {
  (e.Indent) s.ElemNumber (e.Constructor) (e.Value) =
    (e.Indent
      'if( ! refalrts::' e.Constructor '( ' <PrintElemVar s.ElemNumber>
      e.Value ' ) )'
    );
}

SwAllocator {
  & Cpp-SR-BE.Algorithm.ElChar = 'alloc_char';
  & Cpp-SR-BE.Algorithm.ElName = 'alloc_name';
  & Cpp-SR-BE.Algorithm.ElNumber = 'alloc_number';
  & Cpp-SR-BE.Algorithm.ElIdent = 'alloc_ident';

  & Cpp-SR-BE.Algorithm.ElOpenADT = 'alloc_open_adt';
  & Cpp-SR-BE.Algorithm.ElCloseADT = 'alloc_close_adt';

  & Cpp-SR-BE.Algorithm.ElOpenBracket = 'alloc_open_bracket';
  & Cpp-SR-BE.Algorithm.ElCloseBracket = 'alloc_close_bracket';

  & Cpp-SR-BE.Algorithm.ElOpenCall = 'alloc_open_call';
  & Cpp-SR-BE.Algorithm.ElCloseCall = 'alloc_close_call';
}

SwInfo {
  & Cpp-SR-BE.Algorithm.ElChar s.Char = ', ' '\'' <Escape s.Char> '\'';

  & Cpp-SR-BE.Algorithm.ElName t.Name =
    ', & ' <QNameCode t.Name>
    ', "' <MQualifiedName::ToPrintable-Dot t.Name> '"';

  & Cpp-SR-BE.Algorithm.ElNumber s.Number = ', ' <Cpp-SR-BE.Library.StrFromInt s.Number> 'UL';

  & Cpp-SR-BE.Algorithm.ElIdent e.Name =
    ', & ' <NameCode e.Name> 'L_<int>::name';

  // Остальное -- скобки
  s.Other = ;
}

GenCloseBrackets {
  '    ' = ('  } while ( 0 );');

  '  ' e.Indent =
    (e.Indent '}') <GenCloseBrackets e.Indent>;
}

ElemVarName {
  s.Num = 'h' <Cpp-SR-BE.Library.StrFromInt s.Num>;
}

InsertElem {
  & Cpp-SR-BE.Algorithm.ElElem s.Number = <ElemVarName s.Number>;

  & Cpp-SR-BE.Algorithm.ElSTVar s.Usings s.Mode e.Index =
    <PrintVar s.Usings s.Mode e.Index>;
}

SwStringFromCommand {
  & Cpp-SR-BE.Algorithm.CmdReturnResult = 'RETURN res';
}

StringFromCommand {
  (s.Command e.Arguments) =
    ( '    // ' <SwStringFromCommand s.Command e.Arguments> );
}

$END Cpp-SR-BE::Generator.
