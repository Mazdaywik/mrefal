$MODULE Cpp-SR-BE::LibraryEx;
// Расширения библиотеки и функции, реализуемые
// средствами самого Простого Рефала

$ENTRY Apply {
  s.Fn e.Argument = <s.Fn e.Argument>;

  (t.Closure e.Bounded) e.Argument =
    <& Apply t.Closure e.Bounded e.Argument>;
}

$ENTRY Map {
  t.Fn t.Next e.Tail = <& Apply t.Fn t.Next> <& Map t.Fn e.Tail>;

  t.Fn = ;
}

$ENTRY Reduce {
  t.Fn t.Acc t.Next e.Tail =
    <& Reduce
      t.Fn <& Apply t.Fn t.Acc t.Next> e.Tail
    >;

  t.Fn t.Acc = t.Acc;
}

 

$ENTRY MapReduce {
  t.Fn t.Acc e.Tail =
    <& DoMapReduce t.Fn t.Acc () e.Tail>;
}

 

DoMapReduce {
  t.Fn t.Acc (e.Scanned) t.Next e.Tail =
    <& DoMapReduce
      t.Fn
      <& MapReduce__AddScanned
        <& Apply t.Fn t.Acc t.Next> (e.Scanned)
      >
      e.Tail
    >;

  t.Fn t.Acc (e.Scanned) = t.Acc e.Scanned;
}

MapReduce__AddScanned {
  t.Acc e.StepScanned (e.Scanned) =
    t.Acc (e.Scanned e.StepScanned);
}

$ENTRY UnBracket {
  (e.Expr) = e.Expr;
}

$ENTRY DelAccummulator {
  t.Acc e.Tail = e.Tail;
}

$IMPORT Cpp-SR-BE::Library;
    

 

$ENTRY LoadFile {
  e.FileName =
    <& DoLoadFile
      <& Cpp-SR-BE.Library.FReadLine <& Cpp-SR-BE.Library.FOpen 'r' e.FileName>>
    >;
}

DoLoadFile {
  t.File 0 = <& Cpp-SR-BE.Library.FClose t.File>;

  t.File e.Line 0 = (e.Line) <& Cpp-SR-BE.Library.FClose t.File>;

  t.File e.Line =
    (e.Line)
    <& DoLoadFile
      <& Cpp-SR-BE.Library.FReadLine t.File>
    >;
}

 

$ENTRY SaveFile {
  (e.FileName) e.Lines =
    <& Cpp-SR-BE.Library.FClose
      <& Reduce
        & WriteBracketLine
        <& Cpp-SR-BE.Library.FOpen 'w' e.FileName>
        e.Lines
      >
    >;
}

WriteBracketLine {
  t.File (e.Line) = <& Cpp-SR-BE.Library.FWriteLine t.File e.Line>;
}

 
  

$ENTRY Inc {
  s.Num = <& Cpp-SR-BE.Library.Add s.Num 1>;
}

$ENTRY Dec {
  s.Num = <& Cpp-SR-BE.Library.Sub s.Num 1>;
}

 
   

FastIntFromStr_Guard {
  & Cpp-SR-BE.Library.Success s.Number = s.Number;
}

$ENTRY FastIntFromStr {
  e.Digits =
    <& FastIntFromStr_Guard
      <& Cpp-SR-BE.Library.IntFromStr e.Digits>
    >;
}

 
 

 

$ENTRY ArgList {
  = <& DoArgList 0>;
}

 

DoArgList {
  s.Next = <& SwDoArgList <& Inc s.Next> <& Cpp-SR-BE.Library.Arg s.Next>>;
}

SwDoArgList {
  s.Next = ;

  s.Next e.Arg = (e.Arg) <& DoArgList s.Next>;
}

 

 
 

$ENTRY Compare {
  (e.Left) (e.Right) = <& Lexicon (e.Left) (e.Right)>;

  (e.Left) s.Right = '>';
  s.Left (e.Right) = '<';

  s.Left s.Right = <& Cpp-SR-BE.Library.SymbCompare s.Left s.Right>;
}

 

Lexicon {
  (t.FirstLeft e.Left) (t.FirstRight e.Right) =
    <& Lexicon_Aux
      <& Compare t.FirstLeft t.FirstRight>
      (e.Left) (e.Right)
    >;

  () () = '=';

  () (e.Right) = '<';
  (e.Left) () = '>';
}

Lexicon_Aux {
  '<' (e.Left) (e.Right) = '<';
  '=' (e.Left) (e.Right) = <& Lexicon (e.Left) (e.Right)>;
  '>' (e.Left) (e.Right) = '>';
}

 

$ENTRY Compare_T {
  (e.Left) (e.Right) = <& Lexicon_T () (e.Left) () (e.Right)>;

  (e.Left) s.Right = '>' (e.Left) s.Right;
  s.Left (e.Right) = '<' s.Left (e.Right);

  s.Left s.Right = <& Cpp-SR-BE.Library.SymbCompare s.Left s.Right> s.Left s.Right;
}

 

Lexicon_T {
  (e.ScannedLeft) (t.FirstLeft e.Left)
  (e.ScannedRight) (t.FirstRight e.Right) =
    <& Lexicon_T_Aux
      (e.ScannedLeft) (e.ScannedRight)
      <& Compare_T t.FirstLeft t.FirstRight>
      (e.Left) (e.Right)
    >;

  (e.ScannedLeft) () (e.ScannedRight) () =
    '=' (e.ScannedLeft) (e.ScannedRight);

  (e.ScannedLeft) () (e.ScannedRight) (e.Right) =
    '<' (e.ScannedLeft) (e.ScannedRight e.Right);

  (e.ScannedLeft) (e.Left) (e.ScannedRight) () =
    '>' (e.ScannedLeft e.Left) (e.ScannedRight);
}

Lexicon_T_Aux {
  (e.ScannedLeft) (e.ScannedRight)
  '<' t.NextLeft t.NextRight (e.Left) (e.Right) =
    '<' (e.ScannedLeft t.NextLeft e.Left)
    (e.ScannedRight t.NextRight e.Right);

  (e.ScannedLeft) (e.ScannedRight)
  '=' t.NextLeft t.NextRight (e.Left) (e.Right) =
    <& Lexicon_T
      (e.ScannedLeft t.NextLeft) (e.Left)
      (e.ScannedRight t.NextRight) (e.Right)
    >;

  (e.ScannedLeft) (e.ScannedRight)
  '>' t.NextLeft t.NextRight (e.Left) (e.Right) =
    '>' (e.ScannedLeft t.NextLeft e.Left)
    (e.ScannedRight t.NextRight e.Right);
}

 
 

 $ENTRY TypeBracket { }

$ENTRY Type {
  (e.InBracket) = & TypeBracket;
  s.Symbol = <& Cpp-SR-BE.Library.SymbType s.Symbol>;
}

$ENTRY Type_T {
  (e.InBrackets) e.Tail = & TypeBracket (e.InBrackets) e.Tail;
  s.Symbol e.Tail = <& Cpp-SR-BE.Library.SymbType s.Symbol> s.Symbol e.Tail;
  = '*';
}

 

$ENTRY Trim {
  ' ' e.Line = <& Trim e.Line>;
  '\t' e.Line = <& Trim e.Line>;
  e.Line = <& Trim_R e.Line>;
}

Trim_R {
  e.Line ' ' = <& Trim_R e.Line>;
  e.Line '\t' = <& Trim_R e.Line>;
  e.Line = e.Line;
}
$END Cpp-SR-BE::LibraryEx.
