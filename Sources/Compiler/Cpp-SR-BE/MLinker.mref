$MODULE Cpp-SR-BE::MLinker;

$IMPORT MError;
$IMPORT MFileSystem;
$IMPORT MHelpers = Config::MHelpers;
$IMPORT MLambda;

$IMPORT C-Link = C-Link::MLinker;

/**
  <Link t.L-Config (e.ProgName) (t.ModuleName e.OutName)>
    == Success
    == Fails
*/
$ENTRY Link
  t.Config (e.ProgName) e.Modules =
    Success
    <C-Link::C-Link
      (Compiler
        (ProgName <MHelpers::ConfigExtract t.Config CCompiler>)
        (Prologue <MHelpers::ConfigExtract t.Config Prologue>)
        (Epilogue <MHelpers::ConfigExtract t.Config Epilogue>)
      )
      (Include
        <C-LinkOption t.Config IncludeOpt>
        <MLambda::Map
          <MLambda::Composite
            & MLambda.UnBracket
            & MFileSystem.StrFromPath
            & MLambda.Bracket
          >
          <MHelpers::ConfigExtract t.Config RunTimeDirs>
        >
      )
      (Define
        <C-LinkOption t.Config DefineOpt>
        ('MODULE_REFAL')
      )
      (Output
        <C-LinkOption t.Config ExecutableFile>
        e.ProgName '.cpp.exe'
      )
      <MLambda::Map & PrepareName e.Modules>
      <GetRunTimeFiles t.Config>
    >;

C-LinkOption
  t.Config s.OptName =
    <SwC-LinkOption
      <MHelpers::ConfigExtract t.Config s.OptName>
    >;

SwC-LinkOption {
  /* пусто */ = (Option NotSupport);
  e.Value = (Option e.Value);
}

PrepareName
  (t.ModuleName e.StrFileName) = (e.StrFileName);

GetRunTimeFiles
  t.Config =
    <GetRunTimeFiles-SwFound
      <C-Link::LookupRuntimeFiles
        (('cpp'))
        (<MHelpers::ConfigExtract t.Config RunTimeDirs>)
        <MHelpers::ConfigExtract t.Config RunTimeFiles>
      >
    >;

GetRunTimeFiles-SwFound {
  e.Files-B (NotFound e.PtNotFound) e.Files-E =
    <MError::LinkError
      'Run-time file '
      <MFileSystem::StrFromPath e.PtNotFound>
      ' not found'
    >;

  e.Files =
    <MLambda::Map & PrepareRtsName e.Files>;
}

PrepareRtsName
  (Found (e.Ext) e.PtFullPath) =
    (<MFileSystem::StrFromPath e.PtFullPath>);

$END Cpp-SR-BE::MLinker.
