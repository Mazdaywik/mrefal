$PROGRAM Cpp-SR-BE::Srefc1;$IMPORT Cpp-SR-BE::Driver;
 

$IMPORT Cpp-SR-BE::LibraryEx;
  

$IMPORT Cpp-SR-BE::Library;
    

//------------------------------------------------------------------------------

 

$ENTRY Go {
  = <& Main <& Cpp-SR-BE.LibraryEx.ArgList>>;
}

  

$IMPORT Cpp-SR-BE::ParseCmdLine;
    

Main {
  (e.ProgName) e.Arguments =
    <& Compile_And_Link
      <& FindFiles_Compilers
        <& Cpp-SR-BE.ParseCmdLine.ParseCommandLine e.Arguments>
      >
    >;
}

$IMPORT Cpp-SR-BE::FindFile;
 

FindFiles_Compilers {
  t.Compilers (e.Folders) e.Files =
    t.Compilers <& Cpp-SR-BE.FindFile.FindFiles (e.Folders) e.Files>;
}

 
   

   

  

Compile_And_Link {
  (& Cpp-SR-BE.ParseCmdLine.CmdLineError e.Message) =
    <& Cpp-SR-BE.Library.WriteLine 'COMMAND LINE ERROR: ' e.Message>;

  t.Compiler e.Files_B (& Cpp-SR-BE.FindFile.NotFound e.FileName) e.Files_E =
    <& Cpp-SR-BE.LibraryEx.Map & PrintNotFound (& Cpp-SR-BE.FindFile.NotFound e.FileName) e.Files_E>;

  t.Compiler e.Files =
    <& ScanCollisions
      t.Compiler <& Cpp-SR-BE.LibraryEx.Map & GetFileName e.Files>
    >;
}

PrintNotFound {
  (& Cpp-SR-BE.FindFile.NotFound e.FileName) =
    <& Cpp-SR-BE.Library.WriteLine 'COMMAND LINE ERROR: file ' e.FileName ' not found'>;

  (& Cpp-SR-BE.FindFile.Output e.FileName) = ;

  (& Cpp-SR-BE.FindFile.Source (e.Source) e.Output) = ;
}


  

GetFileName {
  (& Cpp-SR-BE.FindFile.Output e.FileName) =
    (
      <& GetFileName_Aux e.FileName> 0 (& Cpp-SR-BE.FindFile.Output e.FileName)
    );

  (& Cpp-SR-BE.FindFile.Source (e.Source) e.Output) =
    (
      <& GetFileName_Aux e.Output> 0
      (& Cpp-SR-BE.FindFile.Source (e.Source) e.Output)
    );
}

GetFileName_Aux {
  e.FileName '.cpp' = <& DoGetFileName e.FileName>;
}

 

DoGetFileName {
  e.FileName '/' = ;
  e.FileName '\\' = ;
  e.FileName s.Last =
    <& DoGetFileName e.FileName>
    <& Lower s.Last>;
  = ;
}

 

Lower {
  s.Char =
    <& DoLower
      s.Char 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'
    >;
}

DoLower {
  s.Upper s.Upper s.Lower e.Tail = s.Lower;

  s.Char s.Upper s.Lower e.Tail = <& DoLower s.Char e.Tail>;

  s.Char = s.Char;
}

 

 
  

ScanCollisions {
  t.Compiler
  e.Files_B (e.FileName 0 (& Cpp-SR-BE.FindFile.Output e.Output1)) e.Files_M
  (e.FileName 0 (& Cpp-SR-BE.FindFile.Output e.Output2)) e.Files_E =
    <& Cpp-SR-BE.Library.WriteLine
      'COMMAND LINE ERROR: output files ' e.Output1 ' and '
      e.Output2 ' has some filename ' e.FileName
    >;

  t.Compiler
  e.Files_B (e.FileName 0 t.Location) e.Files_M
  (e.FileName 0 (& Cpp-SR-BE.FindFile.Output e.Output)) e.Files_E =
    <& ScanCollisions
      t.Compiler
      e.Files_B (e.FileName 1 t.Location) e.Files_M
      (e.FileName 0 (& Cpp-SR-BE.FindFile.Output e.Output))
      <& Cpp-SR-BE.LibraryEx.DelAccummulator
        <& Cpp-SR-BE.LibraryEx.MapReduce
          (& Renumerate e.FileName) 2 e.Files_E
        >
      >
    >;

  t.Compiler
  e.Files_B (e.FileName 0 (& Cpp-SR-BE.FindFile.Output e.Output)) e.Files_M
  (e.FileName 0 t.Location) e.Files_E =
    <& ScanCollisions
      t.Compiler
      e.Files_B (e.FileName 0 (& Cpp-SR-BE.FindFile.Output e.Output)) e.Files_M
      (e.FileName 1 t.Location)
      <& Cpp-SR-BE.LibraryEx.DelAccummulator
        <& Cpp-SR-BE.LibraryEx.MapReduce
          (& Renumerate e.FileName) 2 e.Files_E
        >
      >
    >;

  t.Compiler
  e.Files_B (e.FileName 0 t.Location1) e.Files_M
  (e.FileName 0 t.Location2) e.Files_E =
    <& ScanCollisions
      t.Compiler
      e.Files_B (e.FileName 0 t.Location1)
      e.Files_M (e.FileName 1 t.Location2)
      <& Cpp-SR-BE.LibraryEx.DelAccummulator
        <& Cpp-SR-BE.LibraryEx.MapReduce
          (& Renumerate e.FileName) 2 e.Files_E
        >
      >
    >;

  t.Compiler e.Files =
    <& Link t.Compiler <& Cpp-SR-BE.LibraryEx.Map & CompileEachFile e.Files>>;
}

 
 

Renumerate {
  e.FileName s.NextNumber
  (e.FileName 0 (& Cpp-SR-BE.FindFile.Source (e.Source) e.Output)) =
    <& Cpp-SR-BE.LibraryEx.Inc s.NextNumber>
    (e.FileName s.NextNumber (& Cpp-SR-BE.FindFile.Source (e.Source) e.Output));

  e.FileName s.NextNumber t.NextFile =
    s.NextNumber t.NextFile;
}

  

CompileEachFile {
  (e.FileName s.Num (& Cpp-SR-BE.FindFile.Output e.OutputName)) =
    <& Cpp-SR-BE.Library.WriteLine '+Linking ' e.OutputName> (e.OutputName);

  (e.FileName s.Num (& Cpp-SR-BE.FindFile.Source (e.Source) e.Output)) =
    <& SwCompiled
      <& Cpp-SR-BE.Library.WriteLine '*Compiling ' e.Source ':'>
      <& Cpp-SR-BE.Driver.CompileFile (e.Source) <& FileNum s.Num e.Output>>
    >;
}

 
 

FileNum {
  0 e.File = e.File;

  s.Number e.File '.cpp' =
    e.File '@' <& Cpp-SR-BE.Library.StrFromInt s.Number> '.cpp';
}

SwCompiled {
  & Cpp-SR-BE.Library.Success e.OutputName = (e.OutputName);

  & Cpp-SR-BE.Library.Fails = & Cpp-SR-BE.Library.Fails;
}

UnBracketSpace {
  (e.FileName) = ' "' e.FileName '"';
}

 

Link {
  (& Cpp-SR-BE.ParseCmdLine.NoCompile) e.Files = ;

  (& Cpp-SR-BE.ParseCmdLine.CompileCommand e.Command) e.Outputs_B & Cpp-SR-BE.Library.Fails e.Outputs_E = ;

  (& Cpp-SR-BE.ParseCmdLine.CompileCommand e.Command) e.Outputs =
    <& Cpp-SR-BE.Library.System e.Command <& Cpp-SR-BE.LibraryEx.Map & UnBracketSpace e.Outputs>>
    <& Cpp-SR-BE.Library.WriteLine '** Compilation successed **'>;
}

$END Cpp-SR-BE::Srefc1.
