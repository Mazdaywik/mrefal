$MODULE Cpp-SR-BE::MCompiler;

$IMPORT Algorithm = Cpp-SR-BE::Algorithm;
$IMPORT FileIO;
$IMPORT Generator = Cpp-SR-BE::Generator;
$IMPORT MIModule;
$IMPORT MLambda;

/**
  <Generate t.hIModule e.OutName>
    == t.hIModule
*/
$ENTRY Generate
  t.hIModule e.OutName =
    <Generate-Aux
      (e.OutName)
      <MLambda::MapReduce
        <MLambda::Composite
          <MLambda::Parallel-H
            & MLambda.Identity
            & MIModule.AbsolutName
          >
          & GenerateFunction
        >
        <MIModule::GetFunctionList t.hIModule>
      >
    >;

/*
  <GenerateFunction t.hIModule t.RelativeName t.AbsolutName>
    == t.hIModule ( (e.Definitions) (e.FunctionCode) )
*/
GenerateFunction
  t.hIModule t.RelativeName t.AbsolutName =
    <GenerateFunction-Aux
      <MLambda::Apply
        <MLambda::Parallel-H
          <MLambda::BindLeft-H
            & MIModule.GetFunctionAttribute ScopeClass t.RelativeName
          >
          <MLambda::BindLeft-H
            & MIModule.GetFunctionAttribute Body t.RelativeName
          >
        >
        t.hIModule
      >
      t.AbsolutName
    >;

GenerateFunction-Aux {
  t.hIModule Found Swap NoAttrib t.AbsolutName =
    t.hIModule
    (Define Function t.AbsolutName (& Generator.GenSwap t.AbsolutName));

  t.hIModule Found s.ScopeClass Found (e.Sentences) t.AbsolutName =
    t.hIModule
    <GenFunction t.AbsolutName s.ScopeClass e.Sentences>;
}

Generate-Aux
  (e.OutName) t.hIModule e.Info =
    t.hIModule
    <FileIO::Save
      (e.OutName)
      <FilterDecls e.Info>
    >;

FilterDecls {
  e.Info = <DoFilterDecls () e.Info>;
}

DoFilterDecls {
  (e.Known-B (s.Known s.Type t.Name t.Gen) e.Known-E)
  (Declare s.Type t.Name t.Gen2) e.Tail =
    <DoFilterDecls
      (e.Known-B (s.Known s.Type t.Name t.Gen) e.Known-E) e.Tail
    >;

  (e.Known) (Declare s.Type t.Name t.Gen) e.Tail =
    <DoFilterDecls
      (e.Known (Declare s.Type t.Name t.Gen)) e.Tail
    >;

  (e.Known) (Define s.Type t.Name t.Gen) e.Tail =
    <DoFilterDecls
      (e.Known (Define s.Type t.Name t.Gen)) e.Tail
    >;

  (e.Known) =
    <MLambda::Map & GenerateElem e.Known>;
}

GenerateElem {
  (s.DeclareDefine s.Type t.Name (s.Generator e.Arguments)) =
    <s.Generator e.Arguments>;
}

//------------------------------------------------------------------------------

GenSwap
  t.AbsolutName =
    <Generator::GenSwap t.AbsolutName>;

GenFunction {
  t.AbsolutName s.ScopeClass e.Sentences =
    <GenFunction-Declarations e.Sentences>
    (Define
      Function
      t.AbsolutName
      (& GenFunction-Code t.AbsolutName s.ScopeClass e.Sentences)
    );
}

GenFunction-Declarations {
  ( (Pattern e.PatternExpr) (Result e.ResultExpr) ) e.Tail =
    <Declarations-Expr e.PatternExpr>
    <Declarations-Expr e.ResultExpr>
    <GenFunction-Declarations e.Tail>;

  = ;
}

Declarations-Expr {
  (Structure e.InBrackets) e.Tail =
    <Declarations-Expr e.InBrackets e.Tail>;

  (Abstract t.Callable e.InBrackets) e.Tail =
    <Declarations-Callable t.Callable>
    <Declarations-Expr e.InBrackets e.Tail>;

  (Function t.Callable e.InBrackets) e.Tail =
    <Declarations-Callable t.Callable>
    <Declarations-Expr e.InBrackets e.Tail>;

  (IndirectCall (SVar e.Index) e.InBrackets) e.Tail =
    <Declarations-Expr e.InBrackets e.Tail>;

  t.SimpleTerm e.Tail =
    <Declarations-Term t.SimpleTerm>
    <Declarations-Expr e.Tail>;

  = ;
}

Declarations-Callable {
  (s.CallType t.SrcPos t.QualifiedName) =
    (Declare
      Function
      t.QualifiedName
      (& GenFunction-Decl s.CallType t.QualifiedName)
    );
}

Declarations-Term {
  (Identifier t.SrcPos e.Name) =
    (Declare Identifier (e.Name) (& Generator.GenIdent e.Name));

  (EVar e.Index) = ;
  (TVar e.Index) = ;
  (SVar e.Index) = ;

  (Literal e.Content) = ;
  (Macro s.Value) = ;

  (FnPtr t.Callable) = <Declarations-Callable t.Callable>;
}

GenFunction-Decl {
  Entry t.FunctionName =
    <Generator::GenExtern t.FunctionName>;

  Local t.FunctionName =
    <Generator::GenForward t.FunctionName>;

  ADT t.FunctionName =
    <Generator::GenEnum t.FunctionName>;

  Swap t.FunctionName =
    <Generator::GenForward t.FunctionName>;
}

GenFunction-Code {
  t.FuncName s.ScopeClass e.Sentences =
    <Generator::GenFnStart s.ScopeClass t.FuncName>
    <Generator::GenFnEnd>;
}

$END Cpp-SR-BE::MCompiler.
