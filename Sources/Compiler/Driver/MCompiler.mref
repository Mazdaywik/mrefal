$MODULE Driver::MCompiler;

$IMPORT Driver::MResolveTable;
$IMPORT Driver::MResolver;
$IMPORT MClusters = Driver::MClusters;
$IMPORT MConfig = Config::MConfig;
$IMPORT MContext = Driver::MContext;
$IMPORT MError;
$IMPORT MFileSystem;
$IMPORT MIModule;
$IMPORT MLambda;
$IMPORT MOutModuleStatus;
$IMPORT MSelfDiag;
$IMPORT MSymModule = Driver::MSymModule;
$IMPORT MQualifiedName;

/**
  <Make t.hContext t.hErrorList t.Config t.RootModuleName>
    == t.hContext t.hErrorList Success
    == t.hContext t.hErrorList Fails
*/
$ENTRY Make
  t.hContext t.hErrorList t.Config t.RootModuleName =
    <Make-SwResult
      t.Config t.RootModuleName
      <Generic-ScanSubModule
        Recompile
        <SelectMaker t.Config>
        () t.Config (t.hContext t.hErrorList) t.RootModuleName
      >
    >;

SelectMaker
  t.Config =
    <SwSelectMaker
      <MConfig::GetMakeMode t.Config>
    >;

SwSelectMaker {
  Make = & MClusters.CheckNeedCompile-Make;

  Build = & MClusters.CheckNeedCompile-Build;

  LinkOnly = & MClusters.CheckNeedCompile-LinkOnly;
}

Make-SwResult {
  t.Config t.RootModuleName
  (t.hContext t.hErrorList) Success t.hIModule Main =
    <MIModule::Destroy t.hIModule>
    <Make-Aux
      <Link t.Config t.hContext t.RootModuleName>
      t.hErrorList
    >;

  t.Config t.RootModuleName
  (t.hContext t.hErrorList) Success t.hIModule Regular =
    <MIModule::Destroy t.hIModule>
    <MOutModuleStatus::Flush>
    t.hContext t.hErrorList Success;

  t.Config t.RootModuleName
  (t.hContext t.hErrorList) Fails t.ModuleName =
    t.hContext t.hErrorList Fails;
}

Make-Aux
  t.hContext s.Result t.hErrorList =
    t.hContext t.hErrorList s.Result;

/**
  <Link t.Config t.hContext t.RootModuleName>
    == t.hContext Success
    == t.hContext Fails
*/
Link {
  t.Config t.hContext t.RootModuleName =
    <Link-Aux-Target
      t.Config t.RootModuleName
      <Link-GetTarget t.hContext t.RootModuleName>
    >;
}

Link-Aux-Target {
  t.Config t.RootModuleName t.hContext e.PtTargetFile =
    <Link-Aux-ListForLinking
      t.Config (e.PtTargetFile)
      <MClusters::ListForLinking t.hContext t.RootModuleName>
    >;
}

Link-Aux-ListForLinking {
  t.Config (e.PtTarget) t.hContext Success e.Modules =
    <MOutModuleStatus::Linking
      <MFileSystem::StrFromPath e.PtTarget>
    >
    <MOutModuleStatus::Flush>
    <MConfig::Link
      t.Config t.hContext (e.PtTarget) e.Modules
    >;

  t.Config (e.PtTarget) t.hContext Fails =
    t.hContext Fails;
}

Link-GetTarget {
  t.hContext t.RootModuleName =
    <Link-GetTarget-SwKnown
      <MContext::GetTarget t.hContext t.RootModuleName>
      t.RootModuleName
    >;
}

Link-GetTarget-SwKnown {
  t.hContext Success Default t.RootModule =
    t.hContext
    <Link-GetTarget-SwKnown-CalcTarget
      <MQualifiedName::Parse t.RootModule>
    >;

  t.hContext Success e.PtTarget t.RootModule =
    t.hContext e.PtTarget;
}

Link-GetTarget-SwKnown-CalcTarget {
  e.PacketPrefix (e.LastSegment) =
    (Relative) (e.LastSegment);
}

//------------------------------------------------------------------------------

/**
  <LoadInfo t.Config t.hContext t.hErrorList t.ModuleName>
    == t.hContext t.hErrorList Success s.Result t.hSymIModule
    == t.hContext t.hErrorList Fails

  s.Result ::= Success | Warnings | Errors
*/
LoadInfo {
  t.Config t.hContext t.hErrorList t.ModuleName =
    <MSymModule::LoadInfo t.hContext t.hErrorList t.ModuleName>;
}

//------------------------------------------------------------------------------

/**
  <Parse t.Config t.hContext t.hErrorList t.ModuleName>
    == t.hContext t.hErrorList Success s.Result t.hRawIModule
    == t.hContext t.hErrorList Fails

  s.Result ::= Success | Warnings | Errors
*/
Parse
  t.Config t.hContext t.hErrorList t.ModuleName =
    <Parse-SelectFE
      t.Config t.hErrorList t.ModuleName
      <MContext::GetFrontEnd t.hContext t.ModuleName>
    >;

Parse-SelectFE {
  t.Config t.hErrorList t.ModuleName t.hContext Success None =
    // Неожиданно. Вообще-то тут не может быть библиотека.
    t.hContext t.hErrorList Fails;

  t.Config t.hErrorList t.ModuleName t.hContext Success s.FEName e.Path =
    t.hContext
    <MConfig::Load t.Config s.FEName t.hErrorList t.ModuleName e.Path>;

  t.Config t.hErrorList t.ModuleName t.hContext Fails s.Reason =
    t.hContext t.hErrorList Fails;
}

//------------------------------------------------------------------------------

Compile-Recompile-CheckSubModules
  t.Config t.ModuleName t.hRawIModule s.Result
  (t.hContext t.hErrorList)
  e.SubModules =
    <Compile-Recompile-Resolve
      t.Config t.ModuleName t.hContext
      <MLambda::MapReduce
        <MLambda::Composite
          & AnalyzeValidSubModule
          & RelativeModuleName
        >
        (t.hErrorList t.hRawIModule s.Result)
        e.SubModules
      >
    >;

RelativeModuleName {
  (t.hErrorList t.hRawIModule s.Result) =
    (t.hErrorList t.hRawIModule s.Result);

  (t.hErrorList t.hRawIModule s.Result)
  (t.hImportIModule t.ImportModuleAlias) =
    <RelativeModuleName-Aux
      t.hErrorList s.Result t.hImportIModule
      <MIModule::RelativeName t.hRawIModule t.ImportModuleAlias>
    >;
}

RelativeModuleName-Aux
  t.hErrorList s.Result t.hImportIModule
  t.hRawIModule Success t.RelativeImportAlias =
    (t.hErrorList t.hRawIModule s.Result)
    (t.RelativeImportAlias t.hImportIModule);

/**
  <Compile-Recompile-Resolve
    t.Config t.ModuleName t.hContext s.Result
    (t.hErrorList t.hRawModule)
    (t.SubModuleAlias t.hISubModule)*
  >
*/
Compile-Recompile-Resolve
  t.Config t.ModuleName t.hContext
  (t.hErrorList t.hRawModule s.Result) e.ImportInfo =
    <Compile-Recompile-SwResolve
      t.Config t.ModuleName t.hContext s.Result
      <Driver::MResolver::Resolve
        t.hRawModule
        t.hErrorList
        <MLambda::Reduce
          & AddImportedInfoToResolveTable
          <Driver::MResolveTable::Create>
          e.ImportInfo
        >
      >
    >;

AddImportedInfoToResolveTable
  t.hResolveTable (t.SubModuleAlias t.hImportedIModule) =
    <AddImportedInfoToResolveTable-Aux
      <Driver::MResolver::AddModuleInfo
        t.hResolveTable t.SubModuleAlias t.hImportedIModule
      >
    >;

AddImportedInfoToResolveTable-Aux
  t.hResolveTable t.hImportedIModule =
    t.hResolveTable
    <MIModule::Destroy t.hImportedIModule>;

Compile-Recompile-SwResolve {
  t.Config t.ModuleName t.hContext s.Result t.hIModule Errors t.hErrorList =
    <MIModule::Destroy t.hIModule>
    (t.hContext t.hErrorList) Fails t.ModuleName;

  t.Config t.ModuleName t.hContext Errors t.hIModule Success t.hErrorList =
    <MIModule::Destroy t.hIModule>
    (t.hContext t.hErrorList) Fails t.ModuleName;

  t.Config t.ModuleName t.hContext s.SuccessOrWarnings
  t.hIModule Success t.hErrorList =
    <Compile-Recompile-SwGenerate
      t.hErrorList t.ModuleName
      <MConfig::Generate t.Config t.hContext t.hIModule t.ModuleName>
    >;
}

Compile-Recompile-SwGenerate {
  t.hErrorList t.ModuleName t.hContext t.hIModule Success =
    <Compile-Recompile-UpdateCache
      t.hContext t.hErrorList t.ModuleName
      <MIModule::GetModuleAttribute
        <MSymModule::SymReduce t.hIModule>
        ModuleType
      >
    >;

  t.hErrorList t.ModuleName t.hContext t.hIModule Fails =
    <MIModule::Destroy t.hIModule>
    (t.hContext t.hErrorList) Fails t.ModuleName;
}

Compile-Recompile-UpdateCache {
  t.hContext t.hErrorList t.ModuleName
  t.hIModule Found s.ModuleType =
    <Compile-Recompile-UpdateCache-Aux
      t.hContext t.hErrorList t.ModuleName
      s.ModuleType
      <MIModule::GetImportList-RealNames t.hIModule>
    >;
}

Compile-Recompile-UpdateCache-Aux {
  t.hContext t.hErrorList t.ModuleName s.ModuleType
  t.hIModule e.ImportList =
    <Compile-Recompile-UpdateCache-Finish
      t.hErrorList s.ModuleType
      <MContext::SetCachedImports_ t.hContext t.ModuleName e.ImportList>
      t.hIModule
    >;
}

Compile-Recompile-UpdateCache-Finish {
  t.hErrorList s.ModuleType t.hContext Success t.hIModule =
    (t.hContext t.hErrorList) Success t.hIModule s.ModuleType;
}

//------------------------------------------------------------------------------

/**
  <Compile-Generic
    s.Type
    s.FnAnalyzer (e.Stack) t.Config t.hErrorList t.hContext t.ModuleName
  >
    == (t.hContext t.hErrorList) Success t.hIModule s.ModuleType
    == (t.hContext t.hErrorList) Fails t.ModuleName

  s.Type ::= Updated | Library
*/
Compile-Generic {
  s.Type
  s.FnAnalyzer (e.Stack) t.Config t.hErrorList t.hContext t.ModuleName =
    <OutModuleStatus-Start-ByType s.Type t.ModuleName>
    <UpdateContext
      s.Type
      <Compile-Generic-Aux
        s.Type
        s.FnAnalyzer (e.Stack) t.Config t.ModuleName
        <MLambda::Apply
          <LoadInfo-ByType s.Type>
          t.Config t.hContext t.hErrorList t.ModuleName
        >
      >
    >;
}

LoadInfo-ByType {
  Recompile = & Parse;
  s.Other   = & LoadInfo;
}

OutModuleStatus-Start-ByType {
  Recompile t.ModuleName = <MOutModuleStatus::Compiling-Q t.ModuleName>;
  s.Other   t.ModuleName = /* ничего */;
}

/**
  <Compile-Generic-Aux
    s.Type
    s.FnAnalyzer (e.Stack) t.Config t.ModuleName
    t.hContext t.hErrorList Success s.Errors t.hSymIModule / Fails
  >
    == (t.hContext t.hErrorList) Success t.hIModule s.ModuleType
    == (t.hContext t.hErrorList) Fails t.ModuleName

  s.Type ::= Updated | Library
*/
Compile-Generic-Aux {
  s.Type
  s.FnAnalyzer (e.Stack) t.Config t.ModuleName
  t.hContext t.hErrorList Success s.Errors t.hSymIModule =
    <Compile-Generic-AnalyzeImports
      s.Type s.FnAnalyzer s.Errors
      <GetImportList
        (e.Stack) t.Config t.ModuleName
        t.hContext t.hErrorList t.hSymIModule
      >
    >;

  s.Type
  s.FnAnalyzer (e.Stack) t.Config t.ModuleName
  t.hContext t.hErrorList Fails =
    (t.hContext t.hErrorList) Fails t.ModuleName;
}

SelectResult {
  s.Result Fails = Errors;
  s.Result Success = s.Result;
}

Compile-Generic-AnalyzeImports {
  s.Type
  s.FnAnalyzer s.Result s.RecResult (e.Stack) t.Config t.ModuleName
  t.hContext t.hErrorList t.hSymIModule e.Imports =
    <Compile-Generic-AnalyzeImports-Aux
      s.Type
      s.FnAnalyzer (e.Stack) t.Config t.ModuleName
      t.hContext <SelectResult s.Result s.RecResult>
      t.hErrorList t.hSymIModule e.Imports
    >;
}

Compile-Generic-AnalyzeImports-Aux {
  Recompile
  s.FnAnalyzer (e.Stack) t.Config t.ModuleName
  t.hContext s.Result
  t.hErrorList t.hRawIModule e.Imports =
    <Compile-Recompile-CheckSubModules
      t.Config t.ModuleName t.hRawIModule s.Result
      <MLambda::MapReduce
        <MLambda::BindLeft
          & Scan-Generic-SubModule
          Recompile s.FnAnalyzer (e.Stack t.ModuleName) t.Config
        >
        (t.hContext t.hErrorList) e.Imports
      >
    >;

  s.Type
  s.FnAnalyzer (e.Stack) t.Config t.ModuleName
  t.hContext Errors
  t.hErrorList t.hSymIModule e.Imports =
    <MIModule::Destroy t.hSymIModule>
    (t.hContext t.hErrorList) Fails t.ModuleName;

  s.Type
  s.FnAnalyzer (e.Stack) t.Config t.ModuleName
  t.hContext s.SuccessWarnings
  t.hErrorList t.hSymIModule e.Imports =
    <Compile-Generic-ScanSubModules
      s.Type
      <MIModule::GetModuleName t.hSymIModule>
      <MLambda::MapReduce
        <MLambda::BindLeft
          & Scan-Generic-SubModule
          s.Type s.FnAnalyzer (e.Stack t.ModuleName) t.Config
        >
        (t.hContext t.hErrorList) e.Imports
      >
    >;
}

Scan-Generic-SubModule {
  s.Type s.FnAnalyzer (e.Stack) t.Config
  (t.hContext t.hErrorList) (t.AliasName t.RealName) =
    <Scan-Generic-SubModule-Aux
      s.Type t.AliasName
      <Generic-ScanSubModule
        s.Type
        s.FnAnalyzer (e.Stack) t.Config (t.hContext t.hErrorList) t.RealName
      >
    >;
}

Scan-Generic-SubModule-Aux {
  s.Type t.AliasName (t.hContext t.hErrorList) Success t.hIModule s.ModuleType =
    (t.hContext t.hErrorList) (Success t.hIModule s.ModuleType t.AliasName);

  s.Type t.AliasName (t.hContext t.hErrorList) Fails t.RealName =
    (t.hContext t.hErrorList) (Fails t.RealName t.AliasName);

  Library t.AliasName (t.hContext t.hErrorList) IsNotLibrary t.RealName =
    (t.hContext t.hErrorList) (IsNotLibrary t.RealName t.AliasName);
}

Compile-Generic-ScanSubModules {
  s.Type
  t.hSymIModule t.ModuleName (t.hContext t.hErrorList) e.ScannedImports =
    <Compile-Generic-SwScanSubModules
      s.Type t.hContext t.ModuleName
      <MLambda::MapReduce
        & AnalyzeValidSubModule
        (t.hErrorList t.hSymIModule Success)
        e.ScannedImports
      >
    >;
}

Compile-Generic-SwScanSubModules {
  s.Type t.hContext t.ModuleName
  (t.hErrorList t.hSymIModule Success)
  e.ValidScannedImports =
    <Compile-Generic-ScanSubModules-Cache
      s.Type t.hErrorList t.ModuleName
      <MIModule::GetModuleAttribute t.hSymIModule ModuleType>
      <MContext::SetCachedImports_
        t.hContext t.ModuleName
        <MLambda::Map
          & ModuleNameFromValidImport e.ValidScannedImports
        >
      >
    >;

  s.Type t.hContext t.ModuleName
  (t.hErrorList t.hSymIModule Errors)
  e.InvalidScannedImports =
    (t.hContext t.hErrorList) Fails t.ModuleName
    <MIModule::Destroy t.hSymIModule>
    <MLambda::Map & DestroyScannedImports e.InvalidScannedImports>;
}

DestroyScannedImports
  (t.hSymIModule t.Alias) =
    <MIModule::Destroy t.hSymIModule>;

ModuleNameFromValidImport
  (t.hSymIModule t.Alias) =
    <ModuleNameFromValidImport-Aux
      <MIModule::GetModuleName t.hSymIModule>
    >;

ModuleNameFromValidImport-Aux
  t.hIModule t.ModuleName =
    <MIModule::Destroy t.hIModule> t.ModuleName;

Compile-Generic-ScanSubModules-Cache {
  s.Type t.hErrorList t.ModuleName
  t.hSymIModule Found s.ModuleType
  t.hContext Success =
    (t.hContext t.hErrorList) Success t.hSymIModule s.ModuleType;
}

//------------------------------------------------------------------------------

/**
  <Generic-ScanSubModule
    s.Type
    s.FnAnalyzer (e.Stack) t.Config (t.hContext t.hErrorList) t.ImportName
  >
    == (t.hContext t.hErrorList) Success t.hIModule s.ModuleType
    == (t.hContext t.hErrorList) Fails t.RealName
    == (t.hContext t.hErrorList) IsNotLibrary t.RealName
  s.Type ::= Updated | Library
  big switch
*/
Generic-ScanSubModule {
  s.Type
  s.FnAnalyzer (e.Stack) t.Config (t.hContext t.hErrorList) t.ImportName =
    <Generic-ScanSubModule-SwNeedRecompile
      s.Type
      s.FnAnalyzer (e.Stack) t.Config
      <s.FnAnalyzer
        t.hErrorList t.hContext t.Config t.ImportName
      >
    >;
}

Generic-ScanSubModule-SwNeedRecompile {
  s.TypeMode
  s.FnAnalyzer (e.Stack) t.Config t.hErrorList
  t.hContext t.ModuleName Success s.Status s.Type =
    <Generic-ScanSubModule-Call
      <Generic-ScanSubModule-Select s.TypeMode s.Status s.Type>
      s.FnAnalyzer (e.Stack) t.Config t.hErrorList t.hContext
      t.ModuleName
    >;

  s.Type
  s.FnAnalyzer (e.Stack) t.Config t.hErrorList
  t.hContext t.ModuleName Fails MismatchCase =
    (t.hContext t.hErrorList) Fails t.ModuleName;
}

Generic-ScanSubModule-Select {
  // Вот     так      мы            страдаем                   хернёй       .
  s.ModeType s.Status Errors    = & Compile-Const              Fails        ;

  Updated    Cluster  Recompile = & Compile-Const              Fails        ;
  Library    Cluster  Recompile = & Compile-Const              IsNotLibrary ;

  Library    Cluster  Updated   = & Compile-Const              IsNotLibrary ;

  s.ModeType Cluster  s.Type    = & Compile-Generic            s.Type       ;

  Recompile  Ready    s.Type    = & Compile-OnSuccessCompiled               ;
  Updated    Ready    Recompile = & Compile-Const              Fails        ;
  Library    Ready    Recompile = & Compile-Const              IsNotLibrary ;

  Updated    Ready    s.Type    = & Compile-OnSuccessCompiled               ;
  Library    Ready    Updated   = & Compile-Const              IsNotLibrary ;

  Library    Ready    Library   = & Compile-OnSuccessCompiled               ;
}

Generic-ScanSubModule-Call {
  s.Performer e.Append
  s.FnAnalyzer (e.Stack) t.Config t.hErrorList t.hContext t.ModuleName =
    <s.Performer
      e.Append
      s.FnAnalyzer (e.Stack) t.Config t.hErrorList t.hContext t.ModuleName
    >;
}

Compile-Const {
  s.Const
  s.FnAnalyzer (e.Stack) t.Config t.hErrorList t.hContext t.ModuleName =
    (t.hContext t.hErrorList) s.Const t.ModuleName;
}

MakeSuccessResult
  t.hIModule Found s.ModuleType =
    Success t.hIModule s.ModuleType;

Compile-OnSuccessCompiled {
  s.FnAnalyzer (e.Stack) t.Config t.hErrorList t.hContext t.ModuleName =
    <Compile-OnSuccessCompiled-Aux
      t.ModuleName
      <MSymModule::LoadInfo t.hContext t.hErrorList t.ModuleName>
    >;
}

Compile-OnSuccessCompiled-Aux {
  t.ModuleName t.hContext t.hErrorList Success s.Errors t.hSymIModule =
    (t.hContext t.hErrorList)
    <MakeSuccessResult
      <MIModule::GetModuleAttribute t.hSymIModule ModuleType>
    >;

  t.ModuleName t.hContext t.hErrorList Fails =
    /*
      Compile-OnSuccessCompiled вызывается только на стадии Ready,
      это значит, что стадия грозди была выполнена успешно,
      а на ней считывается информация о межмодульных связях.
      Поэтому ошибочное прочтение тут совершенно неожиданно.
    */
    <MSelfDiag::Error
      'Compile-OnSuccessCompiled-Aux:\n'
      '  Unexpected fail on reading module interface information (MII).\n'
      '  Glitch appears while loading MII in module '
      <MQualifiedName::ToPrintable-Dot t.ModuleName> '.'
    >;
}

//------------------------------------------------------------------------------

/**
  <UpdateContext s.Type e.CompileResult>
    == e.CompileResult
  e.CompileResult ::=
    (t.hContext t.hErrorList) e.SubResult
  e.SubResult ::= Success t.hIModule s.ModuleType | Fails t.ModuleName
*/

UpdateContext {
  s.Type
  (t.hContext t.hErrorList) Success t.hIModule s.ModuleType =
    <UpdateContext-Aux
      s.Type (t.hContext t.hErrorList) s.ModuleType
      <MIModule::GetModuleName t.hIModule>
    >;

  s.Type
  (t.hContext t.hErrorList) Fails t.ModuleName =
    <MOutModuleStatus::Fails-Q t.ModuleName>
    (
      <GuardUpdate
        <MContext::FinishModule_
          t.hContext t.ModuleName Regular Errors
        >
      >
      t.hErrorList
    )
    Fails t.ModuleName;
}

GuardUpdate
  t.hContext Success = t.hContext;

UpdateContext-Aux {
  s.Type (t.hContext t.hErrorList) s.ModuleType
  t.hIModule t.ModuleName =
    <OutModuleStatus-Finish-ByType s.Type t.ModuleName>
    <UpdateContext-AfterUpdate
      t.hErrorList t.hIModule s.ModuleType
      <MContext::FinishModule_
        t.hContext t.ModuleName s.ModuleType s.Type
      >
    >;
}

UpdateContext-AfterUpdate
  t.hErrorList t.hIModule s.ModuleType t.hContext Success =
    (t.hContext t.hErrorList) Success t.hIModule s.ModuleType;

OutModuleStatus-Finish-ByType {
  Recompile t.ModuleName = <MOutModuleStatus::Compiled-Q t.ModuleName>;
  Updated   t.ModuleName = <MOutModuleStatus::Updated-Q  t.ModuleName>;
  Library   t.ModuleName = <MOutModuleStatus::Library-Q  t.ModuleName>;
}

//------------------------------------------------------------------------------

/**
  <GetImportList
    (e.Stack) t.Config t.ModuleName t.hContext t.hErrorList t.hIModule
  >
    == s.Result (e.Stack) t.Config t.ModuleName
      t.hContext t.hErrorList t.hIModule e.Import
  s.Result ::= Success | Fails
  e.Import ::= (t.AliasName t.RealName)*
*/
GetImportList {
  (e.Stack) t.Config t.ModuleName t.hContext t.hErrorList t.hIModule =
    <GetImportList-CheckValidNames
      <GetImportList-AnalyzeRecursiveLinks
        (e.Stack) t.Config t.ModuleName t.hContext t.hErrorList
        <MLambda::MapReduce
          & PrepareImportList-Aliases
          <MIModule::GetImportList-Aliases t.hIModule>
        >
      >
    >;
}

/*
  <PrepareImportList-Aliases t.hIModule t.NextImportAlias>
    == t.hIModule (t.NextImport t.RealName)
*/
PrepareImportList-Aliases
  t.hIModule t.NextImport =
    <PrepareImportList-Aux
      t.NextImport
      <MIModule::GetImportAttribute-AliasName
        t.hIModule RealName t.NextImport
      >
    >;

PrepareImportList-Aux
  t.NextImport t.hIModule Found t.RealName =
    t.hIModule (t.NextImport t.RealName);

/*
  <GetImportList-AnalyzeRecursiveLinks
    (e.Stack) t.Config t.ModuleName
    t.hContext t.hErrorList t.hIModule e.Imports
  >
    == Success (e.Stack) t.Config t.ModuleName
    t.hContext t.hErrorList t.hIModule e.NonRecursiveImports
    == Fails (e.Stack) t.Config t.ModuleName
    t.hContext t.hErrorList t.hIModule e.Imports
  e.Imports ::= (t.AliasName t.RealName)
*/
GetImportList-AnalyzeRecursiveLinks {
  (e.Stack-B t.RecursiveLink e.Stack-E) t.Config t.ModuleName
  t.hContext t.hErrorList t.hIModule
  e.Imports-B (t.Alias t.RecursiveLink) e.Imports-E =
    <GetImportList-TypeRecursiveImports
      t.hContext t.hErrorList t.ModuleName
      (
        <Recursives-SetDifference
          (e.Imports-B e.Imports-E)
          (e.Stack-B e.Stack-E)
        >
      )
      t.Config (e.Stack-B t.RecursiveLink e.Stack-E)
      <MLambda::MapReduce
        & GetSrcPosForImport
        t.hIModule
        <Recursives-SetIntersect
          (e.Imports-B (t.Alias t.RecursiveLink) e.Imports-E)
          (e.Stack-B t.RecursiveLink e.Stack-E)
        >
      >
    >;

  (e.Stack) t.Config t.ModuleName
  t.hContext t.hErrorList t.hIModule e.Imports =
    Success (e.Stack) t.Config t.ModuleName
    t.hContext t.hErrorList t.hIModule e.Imports;
}

Recursives-SetDifference {
  (e.Imports-B (t.Alias t.Recursive) e.Imports-E)
  (e.Stack-B t.Recursive e.Stack-E) =
    <Recursives-SetDifference
      (e.Imports-B e.Imports-E) (e.Stack-B e.Stack-E)
    >;

  (e.Imports) (e.Stack) = e.Imports;
}

Recursives-SetIntersect {
  (e.Imports-B (t.Alias t.Recursive) e.Imports-E)
  (e.Stack-B t.Recursive e.Stack-E) =
    t.Alias
    <Recursives-SetIntersect
      (e.Imports-B e.Imports-E) (e.Stack-B e.Stack-E)
    >;

  (e.Imports) (e.Stack) = ;
}

GetSrcPosForImport
  t.hIModule t.ImportNameAlias =
    <GetSrcPosForImport-Aux
      t.ImportNameAlias
      <MIModule::GetImportAttribute-AliasName
        t.hIModule Position t.ImportNameAlias
      >
    >;

GetSrcPosForImport-Aux
  t.ImportName t.hIModule Found t.SrcPos =
    t.hIModule (t.SrcPos t.ImportName);

GetImportList-TypeRecursiveImports
  t.hContext t.hErrorList t.ModuleName
  (e.Imports) t.Config (e.Stack)
  t.hIModule e.RecursiveLinks =
    Fails (e.Stack) t.Config t.ModuleName
    t.hContext
    <MLambda::MapReduce
      <MLambda::Composite
        & MLambda.UnBracket-H
        & MError.AddRecursiveLink
      >
      t.hErrorList e.RecursiveLinks
    >
    t.hIModule e.Imports;

GetImportList-CheckValidNames {
  s.Result (e.Stack) t.Config t.ModuleName
  t.hContext t.hErrorList t.hIModule e.ImportList =
    <GetImportList-CheckValidNames-UpdateResult
      s.Result (e.Stack) t.Config t.ModuleName t.hContext
      <DoCheckValidNames
        Success t.hErrorList t.hIModule () e.ImportList
      >
    >;
}

GetImportList-CheckValidNames-UpdateResult {
  s.Result (e.Stack) t.Config t.ModuleName t.hContext
  s.SubResult t.hErrorList t.hIModule e.ImportList =
    <MultiplyResult s.Result s.SubResult>
    (e.Stack) t.Config t.ModuleName
    t.hContext t.hErrorList t.hIModule e.ImportList;
}

MultiplyResult {
  Success s.Result2 = s.Result2;
  s.Result1 s.Result2 = Fails;
}

DoCheckValidNames {
  s.Result t.hErrorList t.hIModule (e.Scanned)
  (t.Alias t.RealName) e.Tail =
    <DoCheckValidNames-SwValid
      s.Result t.hErrorList t.hIModule (e.Scanned)
      <CheckName t.Alias t.RealName>
      e.Tail
    >;

  s.Result t.hErrorList t.hIModule (e.Scanned) =
    s.Result t.hErrorList t.hIModule e.Scanned;
}

CheckName {
  t.Alias t.RealName =
    <CheckName-Parsed
      t.Alias t.RealName
      <MQualifiedName::Parse t.RealName>
    >;
}

CheckName-Parsed {
  t.Alias t.RealName
  e.Segments-B (e.Name-B '?' e.Name-E) e.Segments-E =
    Invalid t.Alias t.RealName;

  t.Alias t.RealName e.Segments =
    Valid t.Alias t.RealName;
}

DoCheckValidNames-SwValid {
  s.Result t.hErrorList t.hIModule (e.Scanned)
  Valid t.Alias t.RealName e.Tail =
    <DoCheckValidNames
      s.Result t.hErrorList t.hIModule
      (e.Scanned (t.Alias t.RealName)) e.Tail
    >;

  s.Result t.hErrorList t.hIModule (e.Scanned)
  Invalid t.Alias t.RealName e.Tail =
    <DoCheckValidNames
      Fails
      <CheckImportName-AddError
        t.hErrorList t.RealName
        <MIModule::GetImportAttribute-AliasName
          t.hIModule Position t.Alias
        >
      >
      (e.Scanned) e.Tail
    >;
}

CheckImportName-AddError {
  t.hErrorList t.ImportName t.hRawIModule Found t.SrcPos =
    <MError::AddInvalidImportName
      t.hErrorList t.SrcPos t.ImportName
    >
    t.hRawIModule;
}

//------------------------------------------------------------------------------

/**
  <AnalyzeValidSubModule (t.hErrorList t.hIModule s.Result) t.ImportRes>
    == (t.hErrorList t.hIModule s.Result) (t.hISubModule t.SubModuleAlias)
    == (t.hErrorList t.hIModule Errors)
  t.ImportRes ::=
    (t.Success t.hISubModule s.ModuleType t.Alias)
    | (Fails t.ImportName t.Alias)
    | (IsNotLibrary t.ImportName t.Alias)
*/
AnalyzeValidSubModule {
  (t.hErrorList t.hRawIModule s.Result)
  (Fails t.ImportName t.Alias) =
    <AnalyzeValidSubModule-AddError
      & MError.AddBrokenImport
      t.hErrorList t.ImportName
      <MIModule::GetImportAttribute-RealName
        t.hRawIModule Position t.ImportName
      >
    >;

  /*
    Возникает только при анализе зависимостей библиотеки.
  */
  (t.hErrorList t.hRawIModule s.Result)
  (IsNotLibrary t.ImportName t.Alias) =
    <AnalyzeValidSubModule-AddError
      & MError.DependedFromSource
      t.hErrorList t.ImportName
      <MIModule::GetImportAttribute-RealName
        t.hRawIModule Position t.ImportName
      >
    >;

  (t.hErrorList t.hRawIModule s.Result)
  (Success t.hISubModule Main t.Alias) =
    <AnalyzeValidSubModule-ImportProgram
      t.hErrorList t.hRawIModule t.Alias
      <MIModule::GetModuleName t.hISubModule>
    >;

  (t.hErrorList t.hRawIModule s.Result)
  (Success t.hISubModule Regular t.Alias) =
    (t.hErrorList t.hRawIModule s.Result) (t.hISubModule t.Alias);
}

AnalyzeValidSubModule-AddError
  s.FnAddError t.hErrorList t.Alias
  t.hRawIModule Found t.SrcPos =
    (
      <s.FnAddError t.hErrorList t.SrcPos t.Alias>
      t.hRawIModule
      Errors
    );

AnalyzeValidSubModule-ImportProgram
  t.hErrorList t.hRawIModule t.Alias t.hISubModule t.ImportName =
    <MIModule::Destroy t.hISubModule>
    <AnalyzeValidSubModule-AddError
      & MError.AddImportHead
      t.hErrorList t.ImportName
      <MIModule::GetImportAttribute-RealName
        t.hRawIModule Position t.ImportName
      >
    >;

$END Driver::MCompiler.
