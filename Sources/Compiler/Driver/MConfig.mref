$MODULE Driver::MConfig;

$IMPORT Config::MConfig;
$IMPORT Driver::MClusters;
$IMPORT Driver::MContext;
$IMPORT MCreateDirIfNeed;
$IMPORT MFileSystem;
$IMPORT MLambda;
$IMPORT MOutModuleStatus;
$IMPORT MQualifiedName;

$IMPORT MProfiler;

/**
  <Generate t.Config t.hContext t.hIModule t.ModuleName>
    == t.hContext t.hIModule Success
    == t.hContext t.hIModule Fails
*/
$ENTRY Generate
  t.Config t.hContext t.hIModule t.ModuleName =
    <MProfiler::Quantify
      &Profiling-Generate t.Config t.hContext t.hIModule t.ModuleName
    >;

Profiling-Generate
  t.Config t.hContext t.hIModule t.ModuleName =
    <DoGenerate
      Success t.hContext t.hIModule t.ModuleName
      <MLambda::Map
        & GetFnCompiler
        <Config::MConfig::GetExtendedBackEndList t.Config>
      >
    >;

GetFnCompiler {
  (s.Name t.FnGenerator t.FnLinker) = (s.Name t.FnGenerator);
}

DoGenerate {
  Fails t.hContext t.hIModule t.ModuleName e.Tail =
    t.hContext t.hIModule Fails;

  Success t.hContext t.hIModule t.ModuleName
  (s.BackEnd t.FnGenerator) e.Tail =
    <DoGenerate
      <GenerateBy
        t.hContext t.hIModule t.ModuleName s.BackEnd t.FnGenerator
      >
      e.Tail
    >;

  Success t.hContext t.hIModule t.ModuleName =
    t.hContext t.hIModule Success;
}

GenerateBy
  t.hContext t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    <GenerateBy-Aux
      <Driver::MContext::GetBackEnd t.hContext t.ModuleName s.BackEndName>
      t.hIModule t.ModuleName s.BackEndName t.FnGenerator
    >;

GenerateBy-Aux {
  t.hContext Success e.FileName
  t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    Success t.hContext
    <MLambda::Apply
      t.FnGenerator
      t.hIModule
      <MCreateDirIfNeed::CreatePathToFile e.FileName>
    >
    t.ModuleName;

  t.hContext Fails ModuleNotFound
  t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    Fails t.hContext t.hIModule t.ModuleName;

  t.hContext Fails MismatchCase
  t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    Fails t.hContext t.hIModule t.ModuleName;
}

//------------------------------------------------------------------------------

/**
  <Link t.Config t.hContext t.RootModuleName>
    == t.hContext Success
    == t.hContext Fails
*/
$ENTRY Link
  t.Config t.hContext t.RootModuleName =
    <MProfiler::Quantify
      &Profiling-Link t.Config t.hContext t.RootModuleName
    >;

Profiling-Link {
  t.Config t.hContext t.RootModuleName =
    <Link-Aux-Target
      t.Config t.RootModuleName
      <Link-GetTarget t.hContext t.RootModuleName>
    >;
}

Link-Aux-Target {
  t.Config t.RootModuleName t.hContext e.PtTargetFile =
    <Link-Aux-ListForLinking
      t.Config (e.PtTargetFile)
      <Driver::MClusters::ListForLinking t.hContext t.RootModuleName>
    >;
}

Link-Aux-ListForLinking {
  t.Config (e.PtTarget) t.hContext Success e.Modules =
    <MOutModuleStatus::Linking
      <MFileSystem::StrFromPath e.PtTarget>
    >
    <MOutModuleStatus::Flush>
    <Link-Aux
      t.Config t.hContext (e.PtTarget) e.Modules
    >;

  t.Config (e.PtTarget) t.hContext Fails =
    t.hContext Fails;
}

Link-GetTarget {
  t.hContext t.RootModuleName =
    <Link-GetTarget-SwKnown
      <Driver::MContext::GetTarget t.hContext t.RootModuleName>
      t.RootModuleName
    >;
}

Link-GetTarget-SwKnown {
  t.hContext Success Default t.RootModule =
    t.hContext
    <Link-GetTarget-SwKnown-CalcTarget
      <MQualifiedName::Parse t.RootModule>
    >;

  t.hContext Success e.PtTarget t.RootModule =
    t.hContext e.PtTarget;
}

Link-GetTarget-SwKnown-CalcTarget {
  e.PacketPrefix (e.LastSegment) =
    (Relative) (e.LastSegment);
}

//------------------------------------------------------------------------------

/**
  <Link-Aux t.Config t.hContext (e.OutName) e.OrderedFiles>
    == t.hContext Success
    == t.hContext Fails
  e.OrderedFiles ::= t.ModuleName*
*/
Link-Aux
  t.Config t.hContext (e.OutName) e.OrderedFiles =
    <DoLink
      t.hContext Success (e.OutName) (e.OrderedFiles)
      <MLambda::Map
        & GetLinker <Config::MConfig::GetExtendedBackEndList t.Config>
      >
    >;

GetLinker {
  (s.BackEnd t.FnGenerator t.FnLinker) = (s.BackEnd t.FnLinker);
}

DoLink {
  t.hContext Fails (e.OutName) (e.OrderedFiles) e.Tail =
    t.hContext Fails;

  t.hContext Success (e.OutName) (e.OrderedFiles) =
    t.hContext Success;

  t.hContext Success (e.OutName) (e.OrderedFiles)
  (s.BackEnd t.FnLinker) e.Tail =
    <DoLink-Aux
      t.FnLinker
      (e.OutName)
      <MLambda::MapReduce
        <MLambda::BindLeft & MakeObjName s.BackEnd>
        t.hContext e.OrderedFiles
      >
      (e.OrderedFiles) (e.Tail)
    >;
}

DoLink-Aux {
  t.FnLinker (e.OutName) t.hContext e.InputLinker
  (e.OrderedFiles) (e.Tail) =
    <DoLink
      t.hContext
      <MLambda::Apply t.FnLinker (e.OutName) e.InputLinker>
      (e.OutName) (e.OrderedFiles) e.Tail
    >;
}

MakeObjName
  s.L-BackEnd t.hContext t.ModuleName =
    <MakeObjName-Aux
      t.ModuleName
      <Driver::MContext::GetBackEnd t.hContext t.ModuleName s.L-BackEnd>
    >;

MakeObjName-Aux
  t.ModuleName t.hContext Success e.Path =
    t.hContext (t.ModuleName e.Path);

//------------------------------------------------------------------------------

//------------------------------------------------------------------------------

/**
  <CheckNeedCompile
    t.hErrorList t.hContext t.Config t.ModuleName
  >
    == t.hErrorList t.hContext Success s.Status s.Type
    == t.hErrorList t.hContext Fails MismatchCase
*/
$ENTRY CheckNeedCompile
  t.hErrorList t.hContext t.Config t.ModuleName =
    <MProfiler::Quantify
      &Profiling-CheckNeedCompile
      t.hErrorList t.hContext t.Config t.ModuleName
    >;

Profiling-CheckNeedCompile {
  t.hErrorList t.hContext t.Config t.ModuleName =
    <CheckNeedCompile-Aux
      <Config::MConfig::GetMakeMode t.Config>
      t.hErrorList t.hContext t.Config t.ModuleName
    >;
}

CheckNeedCompile-Aux {
  s.MakeMode t.hErrorList t.hContext t.Config t.ModuleName =
    <MLambda::Apply
      <SwitchMakeMode s.MakeMode>
      t.hErrorList t.hContext t.Config t.ModuleName
    >;
}

SwitchMakeMode {
  Make     = & Driver.MClusters.CheckNeedCompile-Make;
  Build    = & Driver.MClusters.CheckNeedCompile-Build;
  LinkOnly = & Driver.MClusters.CheckNeedCompile-LinkOnly;
}

$END Driver::MConfig.
