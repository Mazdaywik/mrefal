$MODULE Driver::MModuleFinder;

$IMPORT MConfig = Config::MConfig;
$IMPORT MContext = Driver::MContext;
$IMPORT MFileSystem;
$IMPORT MLambda;
$IMPORT MStrings;
$IMPORT MQualifiedName;

/**
  <PhysicalCompare t.Qualified1 t.Qualified2>
    == Equal
    == NotEqual
*/
$ENTRY PhysicalCompare {
  t.Name1 t.Name2 =
    <PhysicalCompare-Aux
      (<PhysicalTransform t.Name1>)
      (<PhysicalTransform t.Name2>)
    >;
}

PhysicalTransform {
  t.Name =
    <MFileSystem::CanonicalPath-Pt
      <MQualifiedName::ToRelativeFSPath-Pt t.Name>
    >;
}

PhysicalCompare-Aux {
  ((Relative) e.Name) ((Relative) e.Name) = Equal;

  ((Relative) e.Name1) ((Relative) e.Name2) = NotEqual;
}

//=============================================================================

/**
  <LookupCmdLineModule
    t.hContext t.Config e.PtCmdLinePath
  >
    == t.hContext Found
      t.QualifiedName s.FrontEndName e.PtBaseDirectory
    == t.hContext NotFound
    == t.hContext Redefinition
*/
$ENTRY LookupCmdLineModule
  t.hContext t.Config e.PtCmdLinePath (e.FileName) =
    <GenVariants-CmdLine
      t.hContext t.Config e.PtCmdLinePath
      <FindExt e.FileName>
    >;

FindExt
  e.FileName = <DoFindExt e.FileName ()>;

DoFindExt {
  e.FileName '.' (e.Ext) = (e.FileName) (e.Ext);

  (e.FileName) = (e.FileName) ();

  e.FileName s.Last (e.Ext) = <DoFindExt e.FileName (s.Last e.Ext)>;
}

GenVariants-CmdLine
  t.hContext t.Config e.PtPath (e.FileName) (e.Ext) =
    <GenVariants-CmdLine-Aux
      t.hContext t.Config
      <MLambda::Map
        <MLambda::BindLeft & CrossName (e.PtPath)>
        <MConfig::GetModulePath t.Config>
      >
      <MLambda::Map
        <MLambda::BindLeft & AppendName (e.PtPath)>
        <MConfig::GetModulePath t.Config>
      >
      (e.FileName)
      (<AvailFrontEnds t.Config <MStrings::Lower e.Ext>>)
    >;

/*
  <CrossName (e.L-PtFolder) (e.PtMPDirectory)>
    == ( e.PtBaseFolder t.QualifiedName )
    == empty
*/
CrossName
  (e.L-PtFolder) (e.PtMPDirectory) =
    <DoCrossName
      ( <MFileSystem::CanonicalPath-Pt e.L-PtFolder> )
      ( <MFileSystem::CanonicalPath-Pt e.PtMPDirectory> )
      () e.L-PtFolder
    >;

DoCrossName {
  // C- -- canonical
  // t.[C-]Next ::= t.RootType | (e.SubDir)

  ( t.C-Next e.C-ModuleFolder ) ( t.C-Next e.C-MPDirectory )
  ( e.Scanned ) t.Next e.ModuleFolder =
    <DoCrossName
      ( e.C-ModuleFolder ) ( e.C-MPDirectory )
      ( e.Scanned t.Next ) e.ModuleFolder
    >;

  // Начало e.[C-]ModuleFolder совпадает с e.C-MPDirectory
  ( e.C-PtModuleFolder-Tail ) ()
  (e.PtBaseFolder) e.PtModuleFolder-Tail =
    ( e.PtBaseFolder <MQualifiedName::Create e.PtModuleFolder-Tail> );

  // Не совпадает
  ( e.C-ModuleFolder ) ( e.C-MPDirectory )
  ( e.Scanned ) e.ModuleFolder =
    /* Пусто */;
}

/*
  <AppendName (e.L-PtFolder) (e.PtMPDirectory)>
    == ( e.PtBaseFolder t.QualifiedName )
    == empty
*/
AppendName {
  (e.L-PtFolder) (e.PtMPDirectory) =
    <AppendName-CanConcat
      (e.L-PtFolder) (e.PtMPDirectory)
      <MFileSystem::ConcatPath (e.PtMPDirectory) e.L-PtFolder>
    >;
    //( e.PtMPDirectory <QNameFromRelativePath e.L-Folder> );
}

AppendName-CanConcat {
  (t.Root e.Folder) (e.PtMPDirectory) Success e.Path =
    (e.PtMPDirectory <MQualifiedName::Create e.Folder>);

  (t.Root e.Folder) (e.PtMPDirectory) Fails =
    /* пусто */;
}

AvailFrontEnds {
  // Расширение не указано -- все доступные front-end'ы
  t.Config = <MConfig::GetFrontEndList t.Config>;

  // Фильтруем по расширению
  t.Config e.Ext =
    <MLambda::Map
      <MLambda::BindRight & FilterFrontEnd e.Ext>
      <MLambda::Map
        <MLambda::Composite
          <MLambda::Parallel
            & MLambda.Identity
            <MLambda::BindLeft & MConfig.GetFrontEndExt t.Config>
          >
          & MLambda.Bracket
        >
        <MConfig::GetFrontEndList t.Config>
      >
    >;
}

FilterFrontEnd {
  ( s.FrontEnd e.Ext ) e.Ext = s.FrontEnd;

  ( s.FrontEnd e.Ext1 ) e.Ext2 = ;
}

GenVariants-CmdLine-Aux {
  /*
    То, что front-end'ов нет, означает, что расширение неправильное.
    Выдавать осмысленную ошибку пока не будем, достаточно сообщения
    об отсутствии модуля.
  */
  t.hContext t.Config e.RawVariants (e.ModuleName) () =
    t.hContext NotFound;

  t.hContext t.Config e.RawVariants (e.ModuleName) (e.AvailFrontEnds) =
    <CorrectFormat-CmdLine
      <CheckVariants
        t.hContext t.Config
        <MLambda::Map
          <MLambda::BindLeft & FinishVariant e.ModuleName>
          <MStrings::Decart (e.RawVariants ) (e.AvailFrontEnds Library)>
        >
      >
    >;
}

FinishVariant
  e.L-ModuleName ( (e.PtBaseDirectory t.QualifiedPacketName) s.FrontEnd ) =
    ( s.FrontEnd
      <MQualifiedName::AddSubName t.QualifiedPacketName e.L-ModuleName>
      e.PtBaseDirectory
    );

CorrectFormat-CmdLine {
  t.hContext Found s.Type t.ModuleName s.FrontEnd e.PtBaseDirectory =
    t.hContext Found t.ModuleName s.FrontEnd e.PtBaseDirectory;

  t.hContext Redefinition = t.hContext Redefinition;

  t.hContext NotFound = t.hContext NotFound;
}

//------------------------------------------------------------------------------

/**
  <LookupImportModule
    t.hContext t.Config t.QualifiedName
  >
    == t.hContext Success s.Status s.Type
    == t.hContext Fails MismatchCase
*/
$ENTRY LookupImportModule
  t.hContext t.Config t.ModuleName =
    <LookupImportModule-SwKnown
      t.Config t.ModuleName
      <MContext::GetStatusType t.hContext t.ModuleName>
   >;

LookupImportModule-SwKnown {
  t.Config t.ModuleName
  t.hContext Success s.Status s.Type =
    t.hContext Success s.Status s.Type;

  t.Config t.ModuleName
  t.hContext Fails ModuleNotFound =
    <LookupImportModule-Unknown
      t.hContext t.ModuleName t.Config
    >;

  t.Config t.ModuleName
  t.hContext Fails MismatchCase =
    t.hContext Fails MismatchCase;
}

LookupImportModule-Unknown
  t.hContext t.QualifiedName t.Config =
    <CheckVariants-Import-CorrectFormat
      t.QualifiedName
      <CheckVariants
        t.hContext t.Config
        <MLambda::Map
          <MLambda::BindLeft
            & MakeImportVariant t.QualifiedName
          >
          <MStrings::Decart
            ( <MConfig::GetModulePath t.Config> )
            ( <MConfig::GetFrontEndList t.Config> Library )
          >
        >
      >
    >;

MakeImportVariant
  t.L-ModuleName ((e.MP-PtCatalog) s.FrontEnd) =
    ( s.FrontEnd t.L-ModuleName e.MP-PtCatalog );

CheckVariants-Import-CorrectFormat {
  t.ModuleName
  t.hContext Found s.Type t.QualifiedName s.FrontEnd e.BaseDirectory =
    t.hContext Success Found s.Type;

  t.ModuleName
  t.hContext NotFound =
    <GuardInvariant
      <MContext::CreateModule
        t.hContext t.ModuleName
        (Type Errors)
        (FrontEnd None)
        (BackEnds Unknown)
      >
    >
    Success Found Errors;
}

GuardInvariant
  t.hContext Success = t.hContext;

//------------------------------------------------------------------------------

/*
  <CheckVariants t.hContext t.Config e.Variants>
    == t.hContext Found s.Type t.QualifiedName s.FrontEnd e.BaseDirectory
    == t.hContext NonFound;
*/
CheckVariants
  t.hContext t.Config e.Variants =
    <DoCheckVariants
      t.hContext t.Config
      <MLambda::Map & FilterInvalidNames e.Variants>
    >;

FilterInvalidNames {
  (s.FrontEnd t.ModuleName e.PtBaseDirectory) =
    <FilterInvalidNames-Aux
      (s.FrontEnd t.ModuleName e.PtBaseDirectory)
      <MQualifiedName::Parse t.ModuleName>
    >;
}

FilterInvalidNames-Aux {
  (s.FrontEnd t.ModuleName e.PtBaseDirectory) e.Segments =
    <FilterInvalidNames-Aux-SwValidSegments
      (s.FrontEnd t.ModuleName e.PtBaseDirectory)
      <MLambda::Map
        & FilterInvalidNames-CheckSegment e.Segments
      >
    >;
}

FilterInvalidNames-Aux-SwValidSegments {
  (s.FrontEnd t.ModuleName e.PtBaseDirectory)
  e.Segments-B Invalid e.Segments-E =
    /* пусто */;

  (s.FrontEnd t.ModuleName e.PtBaseDirectory) e.Segments =
    (s.FrontEnd t.ModuleName e.PtBaseDirectory);
}

FilterInvalidNames-CheckSegment {
  (e.Name-B '?' e.Name-E) = Invalid;

  (e.Name) =
    <FilterInvalidNames-CheckSegment-FirstLetter
      (e.Name) <MStrings::Upper e.Name>
    >;
}

FilterInvalidNames-CheckSegment-FirstLetter {
  (s.First e.Name) s.First e.NameUpper = (s.First e.Name);

  (s.FirstLower e.Name) s.FirstUpper e.NameUpper = Invalid;
}

DoCheckVariants {
  t.hContext t.Config (s.FrontEnd t.QualifiedName e.PtBaseDirectory) e.Tail =
    <SwDoCheckVariant
      <CheckVariant-T
        t.hContext t.Config
        s.FrontEnd t.QualifiedName e.PtBaseDirectory
      >
      e.Tail
    >;

  t.hContext t.Config = t.hContext NotFound;
}

SwDoCheckVariant {
  t.hContext t.Config
  (Found s.Type t.QualifiedName s.FrontEndName e.PtBaseDirectory)
  e.Tail =
    t.hContext Found s.Type t.QualifiedName s.FrontEndName e.PtBaseDirectory;

  t.hContext t.Config Redefinition e.Tail =
    t.hContext Redefinition;

  t.hContext t.Config NotFound e.Tail =
    <DoCheckVariants
      t.hContext t.Config e.Tail
    >;
}

CheckVariant-T {
  t.hContext t.Config Library t.ModuleName e.PtBaseDirectory =
    <CheckVariant-T-LibAux
      t.hContext t.Config t.ModuleName
      <MLambda::Map
        <MLambda::Composite
          <MLambda::Parallel
            & MLambda.Identity
            <MLambda::BindLeft
              <MLambda::BindRight
                & MConfig.GetBEPath-T
                t.ModuleName e.PtBaseDirectory
              >
              t.Config
            >
          >
          & MLambda.Bracket
        >
        <MConfig::GetBackEndList t.Config>
      >
      (e.PtBaseDirectory)
    >;

  t.hContext t.Config s.FrontEnd t.ModuleName e.PtBaseDirectory =
    <CheckVariant-T-SrcAux
      t.hContext t.Config t.ModuleName
      <MConfig::GetFEPath-T t.Config s.FrontEnd t.ModuleName e.PtBaseDirectory>
      (s.FrontEnd e.PtBaseDirectory)
    >;
}

CheckVariant-T-SrcAux {
  t.hContext t.Config t.ModuleName
  Success e.FilePath (s.FrontEnd e.PtBaseDirectory) =
    <CheckVariant-T-SrcAux-SwExist
      t.hContext t.Config
      (s.FrontEnd t.ModuleName e.PtBaseDirectory)
      <MFileSystem::ExistFile-T e.FilePath>
    >;

  t.hContext t.Config t.ModuleName
  Fails (s.FrontEnd e.PtBaseDirectory) =
    t.hContext t.Config (NotFound);
}

CheckVariant-T-SrcAux-SwExist {
  t.hContext t.Config
  (s.FrontEnd t.ModuleName e.PtBaseDirectory)
  True e.FrontEndName =
    <CheckVariant-T-SrcAux-SwExist-Finish
      t.hContext t.Config t.ModuleName
      (s.FrontEnd e.FrontEndName)
      (e.PtBaseDirectory)
      <MLambda::Map
        <MLambda::BindLeft
          & GetBEPath-CheckExist t.Config t.ModuleName e.PtBaseDirectory
        >
        <MConfig::GetBackEndList t.Config>
      >
    >;

  t.hContext t.Config
  (s.FrontEnd t.ModuleName e.BaseDirectory)
  False e.FrontEndName =
    t.hContext t.Config NotFound;
}

GetBEPath-CheckExist
  t.Config t.ModuleName e.PtBaseDirectory s.BackEndName =
    <GetBEPath-CheckExist-Aux
      s.BackEndName
      <MConfig::GetBEPath-T t.Config s.BackEndName t.ModuleName e.PtBaseDirectory>
    >;

GetBEPath-CheckExist-Aux
  s.BackEndName Success e.Path =
    (s.BackEndName <MFileSystem::ExistFile-T e.Path>);

CheckVariant-T-SrcAux-SwExist-Finish {
  t.hContext t.Config t.ModuleName
  (s.FrontEnd e.FrontEndName)
  (e.PtBaseDirectory)
  e.BackEnds =
    <CheckVariant-T-SwRedefinition
      <MContext::CreateModule
        t.hContext t.ModuleName
        (Type <BackEnds-CalcType e.BackEnds>)
        (FrontEnd s.FrontEnd e.FrontEndName)
        (BackEnds <MLambda::Map & BackEnds-DelTF e.BackEnds>)
      >
      t.Config
      (Found
        <BackEnds-CalcType e.BackEnds>
        t.ModuleName s.FrontEnd e.PtBaseDirectory
      )
    >;
}

BackEnds-CalcType {
  e.BackEnds-B (s.BEName False e.Path) e.BackEnds-E = Recompile;

  e.BackEnds = Updated;
}

BackEnds-DelTF
  (s.BEName s.TrueFalse e.Path) = (s.BEName e.Path);

CheckVariant-T-SwRedefinition {
  t.hContext Success t.Config t.FoundInfo =
    t.hContext t.Config t.FoundInfo;

  t.hContext Fails Redefinition t.Config t.FoundInfo =
    t.hContext t.Config Redefinition;
}

CheckVariant-T-LibAux {
  t.hContext t.Config t.QualifiedName
  e.BE-Files-B (s.BackEnd Fails) e.BE-Files-E
  (e.PtBaseDirectory) =
    t.hContext t.Config (NotFound);

  t.hContext t.Config t.QualifiedName e.BE-Files (e.PtBaseDirectory) =
    <CheckVariant-T-LibAux-SwExist
      t.hContext t.Config t.QualifiedName (e.PtBaseDirectory)
      <MLambda::Map
        &Lib-CheckExist e.BE-Files
      >
    >;
}

Lib-CheckExist {
  ( s.BackEnd Success e.FilePath ) =
    <SwLib-CheckExist
      s.BackEnd <MFileSystem::ExistFile-T e.FilePath>
    >;
}

SwLib-CheckExist {
  s.BackEnd True e.FilePath =
    (s.BackEnd e.FilePath);

  s.BackEnd False e.FilePath =
    NotExist;
}

CheckVariant-T-LibAux-SwExist {
  t.hContext t.Config t.QualifiedName (e.PtBaseDirectory)
  e.BE-Files-B NotExist e.BE-Files-E =
    t.hContext t.Config NotFound;

  t.hContext t.Config t.QualifiedName (e.PtBaseDirectory) e.BE-Files =
    <CheckVariant-T-SwRedefinition
      <MContext::CreateModule
        t.hContext t.QualifiedName
        (Type Library)
        (FrontEnd None)
        (BackEnds e.BE-Files)
      >
      t.Config
      (Found Library t.QualifiedName Library e.PtBaseDirectory)
    >;
}

$END Driver::MModuleFinder.
