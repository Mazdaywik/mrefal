$MODULE Driver::MSymModule;

/**
  Модуль инкапсулирует работу с файлами межмодульной информации: загрузку
  данных из них и очистку t.hIModule от данных реализации.
*/

$IMPORT Driver::MContext;
$IMPORT FE-MRefal::MParser_Sym;
$IMPORT MIModule;
$IMPORT MLambda;
$IMPORT MQualifiedName;

/*------------------------------------------------------------------------------
  Загрузка символической информации
------------------------------------------------------------------------------*/

/**
  <LoadInfo t.Context t.hErrorList t.ModuleName>
    == t.Context t.hErrorList Success s.Errors t.hIModule
    == t.Context t.hErrorList Fails
  t.ModuleName ::= t.QualifiedName
  s.Errors ::= Success | Warnings
*/
$ENTRY LoadInfo
  t.hContext t.hErrorList t.ModuleName =
    <LoadInfo-SwBroken
      <LoadInfo-SaveBroken t.hContext t.hErrorList t.ModuleName>
    >;

LoadInfo-SwBroken {
  t.hContext t.hErrorList Success Errors t.hIModule =
    t.hContext t.hErrorList Fails
    <MIModule::Destroy t.hIModule>;

  t.hContext t.hErrorList Success s.Error t.hIModule =
    t.hContext t.hErrorList Success s.Error t.hIModule;

  t.hContext t.hErrorList Fails =
    t.hContext t.hErrorList Fails;
}

/**
  <LoadInfo-SaveBroken t.Context t.hErrorList t.ModuleName>
    == t.Context t.hErrorList Success s.Errors t.hIModule
    == t.Context t.hErrorList Fails
  t.ModuleName ::= t.QualifiedName
  s.Errors ::= Success | Warnings | Errors
*/
$ENTRY LoadInfo-SaveBroken
  t.hContext t.hErrorList t.ModuleName =
    <LoadInfo-SwGetName
      t.ModuleName t.hErrorList
      <Driver::MContext::GetBackEnd t.hContext t.ModuleName BE-ModuleIF>
    >;

LoadInfo-SwGetName {
  t.ModuleName t.hErrorList t.hContext Success e.FilePath =
    t.hContext
    <FE-MRefal::MParser_Sym::SymModule
      t.hErrorList t.ModuleName e.FilePath
    >;

  t.ModuleName t.hErrorList t.hContext Fails s.Reason =
    <MQualifiedName::Destroy t.ModuleName>
    t.hContext t.hErrorList Fails;
}

//------------------------------------------------------------------------------

/**
  <SymReduce-T t.hIModule>
    == t.hIModule t.hISymModule
*/
$ENTRY SymReduce-T
  t.hIModule =
    <SymReduce-ModuleName
      <MIModule::GetModuleName t.hIModule>
    >;

SymReduce-ModuleName
  t.hIModule t.ModuleName =
    <SymReduce-ModuleType
      <MIModule::GetModuleAttribute t.hIModule ModuleType>
      t.ModuleName
    >;

SymReduce-ModuleType {
  t.hIModule Found s.ModuleType t.ModuleName =
    <SymReduce-Imports
      <MLambda::MapReduce
        <MLambda::Composite
          <MLambda::Parallel-H
            <MLambda::Composite
              <MLambda::BindLeft-H
                & MIModule.GetImportAttribute-AliasName RealName
              >
              & MLambda.Bracket-H
            >
            <MLambda::Composite
              <MLambda::BindLeft-H
                & MIModule.GetImportAttribute-AliasName Position
              >
              & MLambda.Bracket-H
            >
            <MLambda::MakeHandled
              & MLambda.Identity
            >
          >
          & MLambda.Bracket-H
        >
        <MIModule::GetImportList-Aliases t.hIModule>
      >
      <MIModule::Create
        t.ModuleName
        (ModuleType s.ModuleType)
      >
    >;

  /*
    Остальные ситуации (ошибки) свидетельствуют о нарушении инварианта.
  */
}

SymReduce-Imports
  t.hIModule e.Imports t.hISymModule Success =
    <SymReduce-Functions
      <MLambda::MapReduce
        <MLambda::Composite
          <MLambda::Parallel-H
            <MLambda::MakeHandled & MLambda.Identity>
            <MLambda::Composite
              <MLambda::BindLeft-H & MIModule.GetFunctionAttribute ScopeClass>
              & MLambda.Bracket-H
            >
            <MLambda::Composite
              <MLambda::BindLeft-H & MIModule.GetFunctionAttribute Position>
              & MLambda.Bracket-H
            >
            <MLambda::Composite
              <MLambda::BindLeft-H & MIModule.GetFunctionAttribute Qualified>
              & MLambda.Bracket-H
            >
          >
          & MLambda.Bracket-H
        >
        <MIModule::GetFunctionList
          t.hIModule
        >
      >
      <MLambda::Reduce
        & AddImport t.hISymModule e.Imports
      >
    >;

AddImport
  t.hISymModule ((Found t.RealName) (Found t.SrcPos) t.AliasName) =
    <UpdateIModule-Guard
      <MIModule::UpdateImport-X
        t.hISymModule
        (Position t.SrcPos)
        (RealName t.RealName)
        (AliasName t.AliasName)
      >
    >;

UpdateIModule-Guard
  t.hISymModule Success = t.hISymModule;

SymReduce-Functions
  t.hIModule e.Functions t.hISymModule =
    t.hIModule
    <MLambda::Reduce
      & AddFunction t.hISymModule e.Functions
    >;

AddFunction {
  t.hISymModule
  (t.FunctionName
    (Found Entry) (Found t.SrcPos) (Found t.QualifiedName)
  ) =
    <UpdateIModule-Guard
      <MIModule::UpdateFunction
        t.hISymModule t.FunctionName
        (ScopeClass Entry)
        (Position t.SrcPos)
        (Qualified t.QualifiedName)
      >
    >;

  t.hISymModule
  (t.FunctionName
    (Found s.ScopeClass)
    (Found t.SrcPos)
    (Found t.QualifiedName)
  ) =
    t.hISymModule;
}

/**
  <SymReduce t.hIModule> == t.hISymModule
*/
$ENTRY SymReduce
  t.hIModule =
    <SymReduce-DeleteIModule
      <SymReduce-T t.hIModule>
    >;

SymReduce-DeleteIModule
  t.hIModule t.hISymModule =
    <MIModule::Destroy t.hIModule>
    t.hISymModule;

$END Driver::MSymModule.
