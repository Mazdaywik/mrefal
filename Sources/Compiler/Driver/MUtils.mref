$MODULE Driver::MUtils;

$IMPORT Config::MConfig;
$IMPORT Driver::MContext;
$IMPORT FE-MRefal::MParser_Sym;
$IMPORT MError;
$IMPORT MIModule;
$IMPORT MLambda;
$IMPORT MOutModuleStatus;
$IMPORT MQualifiedName;

/**
  <LoadModule s.Type t.Config t.hTables t.hErrorList t.ModuleName>
    == t.hTables t.hErrorList Success s.ParseResult t.hRawIModule
    == t.hTables t.hErrorList Fails
  s.ParseResult ::= Success | Warnings | Errors
*/
$ENTRY LoadModule {
  Recompile t.Config t.hTables t.hErrorList t.ModuleName =
    <LoadModule-SelectFE
      t.Config t.hErrorList t.ModuleName
      <Driver::MContext::GetFrontEnd t.hTables t.ModuleName>
    >;

  // Library или Updated
  s.Type t.Config t.hTables t.hErrorList t.ModuleName =
    <LoadInfo-SaveBroken
      t.hTables t.hErrorList t.ModuleName
    >;
}

LoadModule-SelectFE {
  t.Config t.hErrorList t.ModuleName
  t.hTables Success s.FEName t.Path-Head e.Path-Tail /*v.Path*/ =
    t.hTables
    <Load
      t.Config s.FEName t.hErrorList t.ModuleName
      t.Path-Head e.Path-Tail
    >;

  t.Config t.hErrorList t.ModuleName t.hContext Fails s.Reason =
    t.hContext t.hErrorList Fails;
}

Load {
  t.Config s.Name t.hErrorList t.ModuleName e.StrFilePath =
    <Load-Aux
      <Config::MConfig::GetParser t.Config s.Name>
      t.hErrorList t.ModuleName e.StrFilePath
    >;
}

Load-Aux {
  Success t.FnParser t.hErrorList t.ModuleName e.StrFilePath =
    <MLambda::Apply
      t.FnParser t.hErrorList t.ModuleName e.StrFilePath
    >;

  Fails s.Name t.hErrorList t.ModuleName e.StrFilePath =
    Fails t.hErrorList;
}

/*------------------------------------------------------------------------------
  Загрузка символической информации
------------------------------------------------------------------------------*/

/**
  <LoadInfo-SaveBroken t.hContext t.hErrorList t.ModuleName>
    == t.hContext t.hErrorList Success s.Errors t.hIModule
    == t.hContext t.hErrorList Fails
  t.ModuleName ::= t.QualifiedName
  s.Errors ::= Success | Warnings | Errors
*/
$ENTRY LoadInfo-SaveBroken
  t.hContext t.hErrorList t.ModuleName =
    <LoadInfo-SwGetName
      t.ModuleName t.hErrorList
      <Driver::MContext::GetBackEnd t.hContext t.ModuleName BE-ModuleIF>
    >;

LoadInfo-SwGetName {
  t.ModuleName t.hErrorList t.hContext Success e.FilePath =
    t.hContext
    <FE-MRefal::MParser_Sym::SymModule
      t.hErrorList t.ModuleName e.FilePath
    >;

  t.ModuleName t.hErrorList t.hContext Fails s.Reason =
    <MQualifiedName::Destroy t.ModuleName>
    t.hContext t.hErrorList Fails;
}

$ENTRY OutModuleStatus-Start-ByType {
  Recompile t.ModuleName = <MOutModuleStatus::Compiling-Q t.ModuleName>;
  s.Other   t.ModuleName = /* ничего */;
}

$ENTRY OutModuleStatus-Finish-ByType {
  Recompile t.ModuleName = <MOutModuleStatus::Compiled-Q t.ModuleName>;
  Updated   t.ModuleName = <MOutModuleStatus::Updated-Q  t.ModuleName>;
  Library   t.ModuleName = <MOutModuleStatus::Library-Q  t.ModuleName>;
}

/**
  <GetImportList t.hErrorList t.hIModule>
    == s.Result t.hErrorList t.hIModule e.Import
  s.Result ::= Success | Fails
  e.Import ::= (t.SrcPos t.AliasName t.RealName)*
*/
$ENTRY GetImportList {
  t.hErrorList t.hIModule =
    <GetImportList-CheckValidNames
      t.hErrorList
      <MLambda::MapReduce
        & PrepareImportList-Aliases
        <MIModule::GetImportList-Aliases t.hIModule>
      >
    >;
}

/*
  <PrepareImportList-Aliases t.hIModule t.NextImportAlias>
    == t.hIModule (t.NextImport t.RealName)
*/
PrepareImportList-Aliases
  t.hIModule t.NextImport =
    <PrepareImportList-RealName
      t.NextImport
      <MIModule::GetImportAttribute-AliasName
        t.hIModule RealName t.NextImport
      >
    >;

PrepareImportList-RealName {
  t.NextImport t.hIModule Found t.RealName =
    <PrepareImportList-SrcPos
      t.NextImport t.RealName
      <MIModule::GetImportAttribute-AliasName
        t.hIModule Position t.NextImport
      >
    >;
}

PrepareImportList-SrcPos {
  t.NextImport t.RealName t.hIModule Found t.SrcPos =
    <PrepareImportList-RelativeAliasName
      t.SrcPos t.RealName
      <MIModule::RelativeName t.hIModule t.NextImport>
    >;
}

PrepareImportList-RelativeAliasName {
  t.SrcPos t.RealName t.hIModule Success t.AliasName =
    t.hIModule (t.SrcPos t.AliasName t.RealName);
}

GetImportList-CheckValidNames {
  t.hErrorList t.hIModule e.ImportList =
    <GetImportList-CheckValidNames-UpdateResult
      <DoCheckValidNames
        Success t.hErrorList t.hIModule () e.ImportList
      >
    >;
}

GetImportList-CheckValidNames-UpdateResult {
  s.Result t.hErrorList t.hIModule e.ImportList =
    s.Result t.hErrorList t.hIModule e.ImportList;
}

DoCheckValidNames {
  s.Result t.hErrorList t.hIModule (e.Scanned)
  (t.SrcPos t.Alias t.RealName) e.Tail =
    <DoCheckValidNames-SwValid
      s.Result t.hErrorList t.hIModule (e.Scanned)
      t.SrcPos t.Alias <CheckName t.RealName>
      e.Tail
    >;

  s.Result t.hErrorList t.hIModule (e.Scanned) =
    s.Result t.hErrorList t.hIModule e.Scanned;
}

CheckName {
  t.RealName =
    <CheckName-Parsed
      <MQualifiedName::Parse-T t.RealName>
    >;
}

CheckName-Parsed {
  t.RealName e.Segments-B (e.Name-B '?' e.Name-E) e.Segments-E =
    Invalid t.RealName;

  t.RealName e.Segments =
    Valid t.RealName;
}

DoCheckValidNames-SwValid {
  s.Result t.hErrorList t.hIModule (e.Scanned)
  t.SrcPos t.Alias Valid t.RealName e.Tail =
    <DoCheckValidNames
      s.Result t.hErrorList t.hIModule
      (e.Scanned (t.SrcPos t.Alias t.RealName)) e.Tail
    >;

  s.Result t.hErrorList t.hIModule (e.Scanned)
  t.SrcPos t.Alias Invalid t.RealName e.Tail =
    <DoCheckValidNames
      Fails
      <MError::AddInvalidImportName
        t.hErrorList t.SrcPos t.RealName
      >
      t.hIModule
      (e.Scanned) e.Tail
    >;
}

$END Driver::MUtils.

