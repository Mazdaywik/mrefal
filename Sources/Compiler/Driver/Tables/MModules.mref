$MODULE Driver::Tables::MModules;

/*
  Содержит сведения об уже обработанных модулях.
*/


$IMPORT MQualifiedName;
$IMPORT MStrings;
$IMPORT MSymTable;

/*------------------------------------------------------------------------------
  Внутренняя структура:
    t.hContext ::= [Context t.SymTable]
------------------------------------------------------------------------------*/
$DATA Context;

//------------------------------------------------------------------------------

/**
  <Create> == t.hContext
*/
$ENTRY Create = [Context <MSymTable::Create>];

//------------------------------------------------------------------------------

/**
  <Destroy t.hContext> == empty
*/
$ENTRY Destroy
  [Context t.SymTable] =
    <MSymTable::Destroy t.SymTable>;

/**---------------------------------------------------------------------------*/
//STARTCUT
DefaultOptions
  =
    // Вид сущности
    (Kind Module)

    // Информация о входных и выходных частях
    (FrontEnd Unknowns) // Unknowns | None | s.FrontEnd e.FileName
    (BackEnds Unknowns) // e.BackEnds ::= Unknowns | (s.BackEnd e.FileName)*

    // Информация о настоящем имени модуля (контекст индексируется без учёта
    // регистра, но регистр надо проверять)
    (RealName Unknown) // Unknown | t.QualifiedName

    // Информация о имени целевого файла
    (Target Default) // Default | e.PtTargetName

    // Информация о статусе компилирования

    (Type Errors) // Errors | Recompile | Updated | Library
    (Status Found) // Found | Cluster | Ready

    /*
      Время последней модификации. Нужно для того, чтобы определить,
      необходима ли перекомпиляция: импортирующие модули должны быть
      откомпилированы позже импортируемых.
      Unknown -- информация не доступна
      (e.MinTime) (e.MaxTime) -- см. MainStructures.txt
    */
    (MinMaxTime Unknown)

    (ModuleType Main) // Main | Regular
    (CachedSym None) // None | t.ModuleName*
    (CachedModuleIF NotCached) // NotCached | t.ModuleIF
    ;
//ENDCUT
/**---------------------------------------------------------------------------*/

/*
  Внутренние функции реализации контекста
*/

//------------------------------------------------------------------------------

/*
  <Explode t.QualifiedName> == e.ExplodedName
*/
Explode
  t.QualifiedName =
    <MStrings::Lower <MQualifiedName::Parse t.QualifiedName>>;

/**
  e.ContextErrorMessage ::=
    MismatchModuleCase t.KnownModuleName t.InputModuleName
    MismatchPacketCase t.KnownPacketName t.InputPacketName
    ModuleOverPacket t.KnownPacketName t.InputModuleName
    PacketOverModule t.KnownModuleName t.InputPacketName
*/

/*
  <IsKnown t.hContext t.ModuleName>
    == t.hContext Known
    == t.hContext MismatchCase
    == t.hContext NotKnown
*/
IsKnown
  [Context t.SymTable] t.ModuleName =
    <IsKnown-CheckKind
      <MSymTable::GetAttrib
        t.SymTable <Explode t.ModuleName> Kind
      >
    >;

IsKnown-CheckKind {
  t.SymTable Found Module = [Context t.SymTable] Known;

  t.SymTable NoName = [Context t.SymTable] NotKnown;
}

/*
  <UpdateInfo t.hContext t.QualifiedName e.NewOptionList>
    == t.hUpdatedContext Success
    == t.hContext Fails s.Error
  s.Error ::= UnknownOption
*/
UpdateInfo {
  [Context t.SymTable] t.ModuleName e.NewOptions =
    <UpdateInfo-Aux
      t.SymTable
      t.ModuleName (<Explode t.ModuleName>) e.NewOptions
    >;
}

UpdateInfo-Aux {
  t.SymTable t.ModuleName (e.KeyName) e.NewOptions =
    <UpdateInfo-FindKind
      <MSymTable::GetAttrib t.SymTable e.KeyName Kind>
      t.ModuleName (e.KeyName) e.NewOptions
    >;
}

UpdateInfo-FindKind {
  t.SymTable Found Module
  t.RealName (e.KeyName) e.NewOptions =
    <UpdateInfo-UpdateOptions
      t.SymTable (e.KeyName) e.NewOptions
    >;

  t.SymTable NoName
  t.ModuleName (e.KeyName) e.NewOptions =
    <UpdateInfo-UpdateOptions
      <MSymTable::UpdateAttribSet
        t.SymTable (e.KeyName) <DefaultOptions>
      >
      (e.KeyName) e.NewOptions
    >;
}

UpdateInfo-UpdateOptions {
  t.SymTable (e.KeyName) e.Options =
    <UpdateInfo-UpdateOptions-ExistOptions
      t.SymTable (e.KeyName) () e.Options
    >;
}

UpdateInfo-UpdateOptions-ExistOptions {
  t.SymTable (e.KeyName) (e.Scanned)
  (s.NextOption e.NextValue) e.Options =
    <UpdateInfo-UpdateOptions-ExistOptions-SwExist
      <MSymTable::GetAttrib t.SymTable e.KeyName s.NextOption>
      (e.KeyName) (e.Scanned) (s.NextOption e.NextValue) (e.Options)
    >;

  t.SymTable (e.KeyName) (e.Scanned) =
    [Context
      <MSymTable::UpdateAttribSet t.SymTable (e.KeyName) e.Scanned>
    ]
    Success;
}

UpdateInfo-UpdateOptions-ExistOptions-SwExist {
  t.SymTable Found e.Value
  (e.KeyName) (e.Scanned) (s.NextOption e.NewValue) (e.Options) =
    <UpdateInfo-UpdateOptions-ExistOptions
      t.SymTable (e.KeyName) (e.Scanned (s.NextOption e.NewValue))
      e.Options
    >;

  t.SymTable NoAttrib
  (e.KeyName) (e.Scanned) (s.NextOption e.NewValue) (e.Options) =
    [Context t.SymTable] Fails UnknownOption;

  // NoName не рассматриваем
}

//------------------------------------------------------------------------------

/*
  <ExtractOption t.hContext t.QualifiedName s.Option>
    == t.hContext Found e.Option
    == t.hContext OptionNotFound
    == t.hContext ModuleNotFound
*/
ExtractOption {
  [Context t.SymTable] t.QualifiedName s.Option =
    <ExtractOption-Aux
      t.SymTable
      t.QualifiedName <Explode t.QualifiedName> s.Option
    >;
}

ExtractOption-Aux {
  t.SymTable t.ModuleName e.KeyName s.Option =
    <ExtractOption-SwExist
      <MSymTable::GetAttrib t.SymTable e.KeyName s.Option>
      t.ModuleName (e.KeyName)
    >;
}

ExtractOption-SwExist {
  t.SymTable Found e.Info t.ModuleName (e.KeyName) =
    <ExtractOption-SwExist-CheckKind
      e.Info
      <MSymTable::GetAttrib t.SymTable e.KeyName Kind>
    >;

  t.SymTable NoAttrib t.ModuleName (e.KeyName) =
    [Context t.SymTable] OptionNotFound;

  t.SymTable NoName t.ModuleName (e.KeyName) =
    [Context t.SymTable] ModuleNotFound;
}

ExtractOption-SwExist-CheckKind {
  e.Info t.SymTable Found Module =
    [Context t.SymTable] Found e.Info;

  // Остальные варианты не рассматриваем — нарушение инварианта
}

//------------------------------------------------------------------------------

/**
  <GetStatusType t.hContext t.ModuleName>
    == t.hContext Success s.Status s.Type
    == t.hContext Fails ModuleNotFound
*/
$ENTRY GetStatusType
  t.hContext t.ModuleName =
    <GetStatusType-SwKnown
      <IsKnown t.hContext t.ModuleName> t.ModuleName
    >;

GetStatusType-SwKnown {
  t.hContext Known t.ModuleName =
    <GetStatusType-ReadStatus
      <ExtractOption t.hContext t.ModuleName Status>
      t.ModuleName
    >;

  t.hContext NotKnown t.ModuleName =
    t.hContext Fails ModuleNotFound;
}

GetStatusType-ReadStatus
  t.hContext Found s.Status t.ModuleName =
    <GetStatusType-ReadType
      s.Status
      <ExtractOption t.hContext t.ModuleName Type>
    >;

GetStatusType-ReadType
  s.Status t.hContext Found s.Type =
    t.hContext Success s.Status s.Type;

/**---------------------------------------------------------------------------*/

/**
  Функции уровня поиска модулей.
*/

/**
  <CreateModule
    t.hContext t.ModuleName
    (Type s.Type)
    t.FrontEndInfo
    t.BackEndInfo
    (BaseDirectory e.BaseDirectory)
  >
    == t.hContext Success
    == t.hContext Fails Redefinition

  t.FrontEndInfo ::=
    (FrontEnd s.FrontEnd e.PathToFrontEnd) | (FrontEnd None)
  t.BackEndInfo ::=
    (BackEnds (s.BackEnd e.PathToBackEnd)*) | (BackEnds Unknowns)
*/
$ENTRY CreateModule
  t.hContext t.ModuleName
  (Type s.Type)
  (FrontEnd s.FrontEnd e.PathToFrontEnd)
  (BackEnds e.BackEnds) =
    <CreateModule-SwDefined
      <IsKnown t.hContext t.ModuleName>
      t.ModuleName
      (Type s.Type)
      (FrontEnd s.FrontEnd e.PathToFrontEnd)
      (BackEnds e.BackEnds)
      (Status Found)
    >;

CreateModule-SwDefined {
  t.hContext NotKnown
  t.ModuleName e.NewOptions =
    <CreateModule-SwCreated
      <UpdateInfo t.hContext t.ModuleName e.NewOptions>
    >;

  t.hContext Known
  t.ModuleName e.NewOptions =
    t.hContext Fails Redefinition;

  // Вариант UnknownOption не рассматриваем -- нарушение инварианта
}

CreateModule-SwCreated {
  t.hContext Success = t.hContext Success;

  // Вариант UnknownOption не рассматриваем -- нарушение инварианта
}

/**
  <GetFrontEnd t.hContext t.ModuleName>
    == t.hContext Success None
    == t.hContext Success s.FrontEnd e.Path
    == t.hContext Fails ModuleNotFound
*/
$ENTRY GetFrontEnd
  t.hContext t.ModuleName =
    <GetFrontEnd-Aux
      <ExtractOption t.hContext t.ModuleName FrontEnd>
    >;

GetFrontEnd-Aux {
  t.hContext Found None = t.hContext Success None;

  t.hContext Found s.FrontEnd e.Path =
    t.hContext Success s.FrontEnd e.Path;

  t.hContext ModuleNotFound = t.hContext Fails ModuleNotFound;
}

/**
  <GetBackEndList t.hContext t.ModuleName>
    == t.hContext Success (s.BackEnd e.Path)*
    == t.hContext Fails ModuleNotFound
*/
$ENTRY GetBackEndList
   t.hContext t.ModuleName =
     <GetBackEndList-Aux
       <ExtractOption t.hContext t.ModuleName BackEnds>
     >;

GetBackEndList-Aux {
  t.hContext Found e.BackEndList = t.hContext Success e.BackEndList;

  t.hContext ModuleNotFound = t.hContext Fails ModuleNotFound;
}

/**
  <GetBackEnd t.hContext t.ModuleName s.BackEnd>
    == t.hContext Success e.Path
    == t.hContext Fails ModuleNotFound
    == t.hContext Fails BackEndNotFound
*/
$ENTRY GetBackEnd
  t.hContext t.ModuleName s.BackEnd =
    <GetBackEnd-Aux
      <GetBackEndList t.hContext t.ModuleName> s.BackEnd
    >;

GetBackEnd-Aux {
  t.hContext Success e.BackEnds-B (s.BackEnd e.Path) e.BackEnds-E
  s.BackEnd =
    t.hContext Success e.Path;

  t.hContext Success e.BackEnds s.BackEnd =
    t.hContext Fails BackEndNotFound;

  t.hContext Fails ModuleNotFound s.BackEnd =
    t.hContext Fails ModuleNotFound;
}

/**---------------------------------------------------------------------------*/

/**
  Функции "сырого" уровня.
*/

/**
  <SetClusterType t.hContext t.ModuleName s.Type>
    == t.hContext Success
    == t.hContext Fails ModuleNotFound
    == t.hContext Fails CantUpdate
*/
$ENTRY SetClusterType
  t.hContext t.ModuleName s.Type =
   <SetClusterType-SwKnown
      <GetStatusType t.hContext t.ModuleName>
      t.ModuleName s.Type
    >;

SetClusterType-SwKnown {
  t.hContext Success Found s.OldType t.ModuleName s.NewType =
    <GuardUpdateInfo
      <UpdateInfo
        t.hContext t.ModuleName (Status Cluster) (Type s.NewType)
      >
    >;

  t.hContext Success s.OtherStatus s.OldType t.ModuleName s.NewType =
    t.hContext Fails CantUpdate;

  t.hContext Fails ModuleNotFound = t.hContext Fails ModuleNotFound;
}

GuardUpdateInfo {
  t.hContext Success = t.hContext Success;

  // Остальные варианты невозможны
}

/**
  <SetMinMaxTime t.hContext t.ModuleName (e.MinTime) (e.MaxTime)>
    == t.hContext Success
    == t.hContext Fails ModuleNotFound
*/
$ENTRY SetMinMaxTime
  t.hContext t.ModuleName (e.MinTime) (e.MaxTime) =
    <SetMinMaxTime-SwKnown
      <IsKnown t.hContext t.ModuleName>
      t.ModuleName (e.MinTime) (e.MaxTime)
    >;

SetMinMaxTime-SwKnown {
  t.hContext Known t.ModuleName (e.MinTime) (e.MaxTime) =
    <GuardUpdateInfo
      <UpdateInfo
        t.hContext t.ModuleName (MinMaxTime (e.MinTime) (e.MaxTime))
      >
    >;

  t.hContext NotKnown t.ModuleName (e.MinTime) (e.MaxTime) =
    t.hContext Fails ModuleNotFound;
}

/**
  <GetMinMaxTime t.hContext t.ModuleName>
    == t.hContext Success Unknown
    == t.hContext Success (e.MinTime) (e.MaxTime)
    == t.hContext Fails ModuleNotFound
*/
$ENTRY GetMinMaxTime
  t.hContext t.ModuleName =
    <GetMinMaxTime-Aux
      <ExtractOption t.hContext t.ModuleName MinMaxTime>
    >;

GetMinMaxTime-Aux {
  t.hContext Found Unknown = t.hContext Success Unknown;

  t.hContext Found (e.MinTime) (e.MaxTime) =
    t.hContext Success (e.MinTime) (e.MaxTime);

  t.hContext ModuleNotFound = t.hContext Fails ModuleNotFound;
}

/**---------------------------------------------------------------------------*/

/**
  Функции уровня компиляции.
*/

/**
  <FinishModule t.hContext t.RealModuleName s.ModuleType s.Type>
    == t.hContext Success
    == t.hContext Fails ModuleNotFound
    == t.hContext Fails CantUpdate
*/
$ENTRY FinishModule {
  t.hContext t.RealModuleName s.ModuleType Errors =
    <FinishModule-SwKnown
      <GetStatusType t.hContext t.RealModuleName>
      t.RealModuleName
      (Type Errors)
      (Status Ready)
    >;

  t.hContext t.RealModuleName s.ModuleType s.Type =
    <FinishModule-SwKnown
      <GetStatusType t.hContext t.RealModuleName>
      t.RealModuleName
      (Type s.Type)
      (Status Ready)
      (RealName t.RealModuleName)
      (ModuleType s.ModuleType)
    >;
}

FinishModule-SwKnown {
  t.hContext Success Cluster s.Type t.ModuleName e.NewOptions =
    <FinishModule-Aux
      <UpdateInfo t.hContext t.ModuleName e.NewOptions>
    >;

  t.hContext Success s.Status s.Type t.ModuleName e.NewOptions =
    t.hContext Fails CantUpdate;

  t.hContext Fails ModuleNotFound t.ModuleName e.NewOptions =
    t.hContext Fails ModuleNotFound;
}

FinishModule-Aux {
  t.hContext Success = t.hContext Success;

  // Другие варианты недопустимы
}

/**---------------------------------------------------------------------------*/

/**
  Доступ к некоторым полям
*/

/**
  <GetTarget t.hContext t.ModuleName>
    == Success Default
    == Success e.PtTargetName
    == Fails s.Error

  s.Error ::= ModuleNotFound
*/
$ENTRY GetTarget {
  t.hContext t.ModuleName =
    <GetTarget-Aux <ExtractOption t.hContext t.ModuleName Target>>;
}

GetTarget-Aux {
  t.hContext Found Default = t.hContext Success Default;
  t.hContext Found e.PtTarget = t.hContext Success e.PtTarget;
  t.hContext ModuleNotFound = t.hContext Fails ModuleNotFound;

  // MismatchOption не рассматриваем.
}

/**
  <SetTarget t.hContext t.ModuleName e.PtTargetName>
    == t.hContext Succcess
    == t.hContext Fails s.Error

  s.Error ::= ModuleNotFound
*/
$ENTRY SetTarget {
  t.hContext t.ModuleName e.PtTargetName =
    <SetTarget-SwKnown
      <IsKnown t.hContext t.ModuleName>
      t.ModuleName e.PtTargetName
    >;
}

SetTarget-SwKnown {
  t.hContext Known t.ModuleName e.PtTargetName =
    // Должна вернуть Success
    <UpdateInfo t.hContext t.ModuleName (Target e.PtTargetName)>;

  t.hContext NotKnown t.ModuleName e.PtTargetName =
    t.hContext Fails ModuleNotFound;
}

/**
  <GetCachedModuleIF t.hContext t.ModuleName>
    == Success NotCached
    == Success t.ModuleIF
    == Fails s.Error

  s.Error ::= ModuleNotFound
*/
$ENTRY GetCachedModuleIF {
  t.hContext t.ModuleName =
    <GetCachedModuleIF-Aux
      <ExtractOption t.hContext t.ModuleName CachedModuleIF>
    >;
}

GetCachedModuleIF-Aux {
  t.hContext Found NotCached = t.hContext Success NotCached;
  t.hContext Found t.ModuleIF = t.hContext Success t.ModuleIF;
  t.hContext ModuleNotFound = t.hContext Fails ModuleNotFound;

  // MismatchOption не рассматриваем.
}

/**
  <SetCachedModuleIF t.hContext t.ModuleName t.ModuleIF>
    == t.hContext Success
    == t.hContext Fails s.Error

  s.Error ::= ModuleNotFound
*/
$ENTRY SetCachedModuleIF {
  t.hContext t.ModuleName t.ModuleIF =
    <SetCachedModuleIF-SwKnown
      <IsKnown t.hContext t.ModuleName>
      t.ModuleName t.ModuleIF
    >;
}

SetCachedModuleIF-SwKnown {
  t.hContext Known t.ModuleName t.ModuleIF =
    // Должно вернуть Success
    <UpdateInfo t.hContext t.ModuleName (CachedModuleIF t.ModuleIF)>;

  t.hContext NotKnown t.ModuleName t.ModuleIF =
    t.hContext Fails ModuleNotFound;
}

$END Driver::Tables::MModules.
