$MODULE FE-MRefal::MLexer;

$IMPORT MEscape;
$IMPORT MFileIO;
$IMPORT MLambda;
$IMPORT MOrder;
$IMPORT MSrcPos;
$IMPORT MStrings;
$IMPORT MMath;

$IMPORT MProfiler;

/*
  Внутреннее устройство:
  [Lexer (t.Token*) (s.LineNumber e.FileName) t.hFile e.Line]
  e.Line ::= char* | EOF
*/

$DATA Lexer;

$ENTRY Create
  e.FileName = [Lexer () (0 e.FileName) <MFileIO::Open 'br' e.FileName>];

$ENTRY Destroy
  [Lexer (e.Tokens) t.Pos t.hFile e.Line] = <MFileIO::Close t.hFile>;

$ENTRY NextToken
  t.Lexer = <MProfiler::Quantify &Profiling-NextToken t.Lexer>;

Profiling-NextToken {
  [Lexer () t.Pos t.hFile e.Line] =
    <NextToken-Aux
      <UnBlank-Chain (/* no errors */) t.Pos t.hFile e.Line>
    >;

  [Lexer (t.NextToken e.Tokens) t.Pos t.hFile e.Line] =
    [Lexer (e.Tokens) t.Pos t.hFile e.Line]
    t.NextToken;
}

/*
  UnBlank-Chain удаляет пробельные символы и комментарии. Дополнительная
сложность обуславливается тем, что используется комментарий старого стиля
(начинающийся со * в отдельной строке), который удобен при построчном
синтаксическом анализе и неудобен при использовании свободного стиля
(когда перевод строки считается пробельным символом).
*/

NewLine {
  (0 e.FileName) t.hFile =
    (1 e.FileName) <NewLine-Skip-UTF8-BOM <MFileIO::ReadLine t.hFile>>;

  (s.LineNumber e.FileName) t.hFile =
    (<MMath::Inc s.LineNumber> e.FileName) <MFileIO::ReadLine t.hFile>;
}

NewLine-Skip-UTF8-BOM {
  t.hFile '\xEF\xBB\xBF' e.Line = t.hFile e.Line;

  t.hFile e.Other = t.hFile e.Other;
}

UnBlank-Chain {
  (e.Errors) t.Pos t.hFile ' ' e.Line =
    <UnBlank-Chain (e.Errors) t.Pos t.hFile e.Line>;

  (e.Errors) t.Pos t.hFile '\t' e.Line =
    <UnBlank-Chain (e.Errors) t.Pos t.hFile e.Line>;

  (e.Errors) t.Pos t.hFile '\r' e.Line =
    <UnBlank-Chain (e.Errors) t.Pos t.hFile e.Line>;

  // Комментарий C++ в конце файла
  (e.Errors) t.Pos t.hFile '//' e.RestOfLine 0 =
    (e.Errors) t.Pos t.hFile 0;

  // Комментарий C++
  (e.Errors) t.Pos t.hFile '//' e.RestOfLine =
    <UnBlank-NewLine (e.Errors) t.Pos t.hFile>;

  // Комментарий C
  (e.Errors) t.Pos t.hFile '/*' e.Line =
    <UnBlank-C (e.Errors) t.Pos t.hFile e.Line>;

  (e.Errors) t.Pos t.hFile /* пусто */ =
    <UnBlank-NewLine (e.Errors) t.Pos t.hFile>;

  // Уже символ начала лексемы
  (e.Errors) t.Pos t.hFile e.Line =
    (e.Errors) t.Pos t.hFile e.Line;
}

UnBlank-NewLine {
  (e.Errors) t.Pos t.hFile =
    <UnBlank-SwNewLine (e.Errors) <NewLine t.Pos t.hFile>>;
}

UnBlank-SwNewLine {
* Классический комментарий в конце файла
  (e.Errors) t.Pos t.hFile '*' e.RestOfLine 0 =
    (e.Errors) t.Pos t.hFile 0;

* Просто классический комментарий
  (e.Errors) t.Pos t.hFile '*' e.RestOfLine =
    <UnBlank-NewLine (e.Errors) t.Pos t.hFile>;

  // Пропускаем пробельные символы и комментарии C/C++
  (e.Errors) t.Pos t.hFile e.Line =
    <UnBlank-Chain (e.Errors) t.Pos t.hFile e.Line>;
}

UnBlank-C {
  (e.Errors) t.Pos t.hFile '/*' e.Comment =
    <UnBlank-C
      (e.Errors <MakeError t.Pos 'Nested comments is forbidden'>)
      t.Pos t.hFile '*' e.Comment
    >;

  (e.Errors) t.Pos t.hFile '*/' e.Line =
    <UnBlank-Chain (e.Errors) t.Pos t.hFile e.Line>;

  (e.Errors) t.Pos t.hFile 0 =
    (e.Errors <MakeError t.Pos 'Unclosed C comment'>)
    t.Pos t.hFile 0;

  (e.Errors) t.Pos t.hFile s.Next e.Line =
    <UnBlank-C (e.Errors) t.Pos t.hFile e.Line>;

  (e.Errors) t.Pos t.hFile /* пусто */ =
    <UnBlank-C (e.Errors) <NewLine t.Pos t.hFile>>;
}

MakeError {
  (s.LineNumber e.FileName) e.Message =
    (Error
      <MSrcPos::Create-FilePos s.LineNumber e.FileName>
      e.Message
    );
}

NextToken-Aux {
  (e.Errors) t.Pos t.hFile 0 =
    <ReturnToken (e.Errors) t.Pos t.hFile 0 (EndOfText)>;

  (e.Errors) t.Pos t.hFile '{' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (OpenBlock)>;
  (e.Errors) t.Pos t.hFile '}' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (CloseBlock)>;

  (e.Errors) t.Pos t.hFile '<' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (OpenFnCall)>;
  (e.Errors) t.Pos t.hFile '>' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (CloseFnCall)>;

  (e.Errors) t.Pos t.hFile '(' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (OpenBrac)>;
  (e.Errors) t.Pos t.hFile ')' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (CloseBrac)>;

  (e.Errors) t.Pos t.hFile '[' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (OpenSquare)>;
  (e.Errors) t.Pos t.hFile ']' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (CloseSquare)>;

  (e.Errors) t.Pos t.hFile '&' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (Ampersand)>;
  (e.Errors) t.Pos t.hFile '::' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (DoubleColon)>;
  (e.Errors) t.Pos t.hFile ':' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (Colon)>;
  (e.Errors) t.Pos t.hFile ',' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (Comma)>;
  (e.Errors) t.Pos t.hFile '.' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (Dot)>;
  (e.Errors) t.Pos t.hFile ';' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (EndSent)>;
  (e.Errors) t.Pos t.hFile '=' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (Replaces)>;

  (e.Errors) t.Pos t.hFile '\'\'' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (Literal '\'')>;
  (e.Errors) t.Pos t.hFile '\'' e.Line =
    <Quoted (e.Errors) t.Pos t.hFile e.Line>;

  (e.Errors) t.Pos t.hFile '$' e.Line =
    <Directive (e.Errors) t.Pos t.hFile e.Line>;

  (e.Errors) t.Pos t.hFile 'e' e.Line =
    <Variable EVar (e.Errors) t.Pos t.hFile e.Line>;
  (e.Errors) t.Pos t.hFile 's' e.Line =
    <Variable SVar (e.Errors) t.Pos t.hFile e.Line>;
  (e.Errors) t.Pos t.hFile 't' e.Line =
    <Variable TVar (e.Errors) t.Pos t.hFile e.Line>;

  // Разрешим идентификаторы начинать с '?' и '!'
  (e.Errors) t.Pos t.hFile '?' e.Line =
    <Identifier (e.Errors) t.Pos t.hFile '?' e.Line>;
  (e.Errors) t.Pos t.hFile '!' e.Line =
    <Identifier (e.Errors) t.Pos t.hFile '!' e.Line>;

  (e.Errors) t.Pos t.hFile s.First e.Line =
    <SwFirstChar (e.Errors) t.Pos t.hFile <MStrings::CharType s.First> e.Line>;
}

ReturnToken {
  () (s.LineNumber e.FileName) t.hFile e.Line
  (s.TokType e.Info) =
    [Lexer () (s.LineNumber e.FileName) t.hFile e.Line]
    (s.TokType <MSrcPos::Create-FilePos s.LineNumber e.FileName> e.Info);

  (t.Error e.Errors) (s.LineNumber e.FileName) t.hFile e.Line
  (s.TokType e.Info) =
    [Lexer
      (e.Errors
        (s.TokType <MSrcPos::Create-FilePos s.LineNumber e.FileName> e.Info)
      )
      (s.LineNumber e.FileName)
      t.hFile e.Line
    ]
    t.Error;
}

SwFirstChar {
  (e.Errors) t.Pos t.hFile UpAlph s.First e.Line =
    <Identifier (e.Errors) t.Pos t.hFile s.First e.Line>;

  (e.Errors) t.Pos t.hFile Digit s.First e.Line =
    <Macro (e.Errors) t.Pos t.hFile s.First e.Line>;

  (e.Errors) t.Pos t.hFile s.Other s.First e.Line =
    <CreateUndefined (e.Errors) t.Pos t.hFile s.First e.Line>;
}

Identifier
  (e.Errors) t.Pos t.hFile s.First e.Line =
    <Identifier-Tail
      (e.Errors) t.Pos t.hFile
      (<ValidIdentSymbols>) (s.First) e.Line
    >;

Identifier-Tail {
  (e.Errors) t.Pos t.hFile
  (e.Chars-B s.Next e.Chars-E) (e.Scanned) s.Next e.Line =
    <Identifier-Tail
      (e.Errors) t.Pos t.hFile
      (s.Next e.Chars-B e.Chars-E) (e.Scanned s.Next) e.Line
    >;

  (e.Errors) t.Pos t.hFile
  (e.Chars) (e.Scanned) e.Line =
    <ReturnToken
      (e.Errors) t.Pos t.hFile e.Line (Identifier e.Scanned)
    >;
}

ValidIdentSymbols =
  <MStrings::UpAlph> <MStrings::LoAlph> <MStrings::Digits> '?!-_';

Quoted
  (e.Errors) t.Pos t.hFile e.Line =
    <DoQuoted (e.Errors) () t.Pos t.hFile e.Line>;

DoQuoted {
  // Двойная кавычка представляет собой одинарную кавычку
  (e.Errors) (e.Scanned) t.Pos t.hFile '\'\'' e.Line =
    <DoQuoted (e.Errors) (e.Scanned '\'') t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile '\'' e.Line =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (Literal e.Scanned)>;

  (e.Errors) (e.Scanned) t.Pos t.hFile '\\' e.Line =
    <Escaped (e.Errors) (e.Scanned) t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile /* пусто */ =
    <ReturnToken
      (e.Errors <MakeError 'Unclosed quote'>)
      t.Pos t.hFile (Literal e.Scanned)
    >;

  (e.Errors) (e.Scanned) t.Pos t.hFile /* пусто */ 0 =
    <ReturnToken
      (e.Errors <MakeError 'Unclosed quote'>)
      t.Pos t.hFile 0 (Literal e.Scanned)
    >;

  (e.Errors) (e.Scanned) t.Pos t.hFile s.Next e.Line =
    <DoQuoted (e.Errors) (e.Scanned s.Next) t.Pos t.hFile e.Line>;
}

Escaped {
  // Разрешим разрывать закавыченную строку при помощи бэкслеша
  (e.Errors) (e.Scanned) t.Pos t.hFile /* пусто */ =
    <DoQuoted (e.Errors) (e.Scanned) <NewLine t.Pos t.hFile>>;

  (e.Errors) (e.Scanned) t.Pos t.hFile /* пусто */ 0 =
    /*
      Никакой обработки ошибок не делаем: во-первых, конец строки
      (подразумеваемый в конце файла) допустим после '\',
      во-вторых, неожиданный конец файла будет обработан на уровне выше.
    */
    <DoQuoted (e.Errors) (e.Scanned) t.Pos t.hFile 0>;

  (e.Errors) (e.Scanned) t.Pos t.hFile 'a' e.Line =
    <DoQuoted (e.Errors) (e.Scanned '\a') t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile 'b' e.Line =
    <DoQuoted (e.Errors) (e.Scanned '\b') t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile 'f' e.Line =
    <DoQuoted (e.Errors) (e.Scanned '\f') t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile 'n' e.Line =
    <DoQuoted (e.Errors) (e.Scanned '\n') t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile 'r' e.Line =
    <DoQuoted (e.Errors) (e.Scanned '\r') t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile 't' e.Line =
    <DoQuoted (e.Errors) (e.Scanned '\t') t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile 'v' e.Line =
    <DoQuoted (e.Errors) (e.Scanned '\v') t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile '\'' e.Line =
    <DoQuoted (e.Errors) (e.Scanned '\'') t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile '\"' e.Line =
    <DoQuoted (e.Errors) (e.Scanned '\"') t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile '\\' e.Line =
    <DoQuoted (e.Errors) (e.Scanned '\\') t.Pos t.hFile e.Line>;

  (e.Errors) (e.Scanned) t.Pos t.hFile 'x' e.Line =
    <DoQuoted-Hex
      (e.Errors) (e.Scanned) t.Pos t.hFile () e.Line
      ('0123456789ABCDEFabcdef')
    >;

  (e.Errors) (e.Scanned) t.Pos t.hFile s.Next e.Line =
    <DoQuoted-TestOct
      (e.Errors) (e.Scanned) t.Pos t.hFile s.Next e.Line ('01234567')
    >;
}

DoQuoted-TestOct {
  (e.Errors) (e.Scanned) t.Pos t.hFile s.Oct e.Line
  (e.Octs-B s.Oct e.Octs-E) =
    <DoQuoted-Oct
      (e.Errors) (e.Scanned) t.Pos t.hFile (s.Oct) e.Line
      1 ('01234567')
    >;

  (e.Errors) (e.Scanned) t.Pos t.hFile s.First e.Line =
    <DoQuoted
      (e.Errors <MakeError t.Pos 'Bad escape sequence \\' s.First>)
      (e.Scanned) t.Pos t.hFile s.First e.Line
    >;
}

DoQuoted-Hex {
  (e.Errors) (e.Scanned) t.Pos t.hFile (e.Number) s.Hex e.Line
  (e.Hexs-B s.Hex e.Hexs-E) =
    <DoQuoted-Hex
      (e.Errors) (e.Scanned) t.Pos t.hFile (e.Number s.Hex) e.Line
      (e.Hexs-B s.Hex e.Hexs-E)
    >;

  (e.Errors) (e.Scanned) t.Pos t.hFile () e.Line (e.Hexs) =
    <DoQuoted
      (e.Errors <MakeError t.Pos 'Expected hex number after \\x'>)
      (e.Scanned) t.Pos t.hFile e.Line
    >;

  (e.Errors) (e.Scanned) t.Pos t.hFile (e.Number) e.Line (e.Hexs) =
    <DoQuoted
      (e.Errors) (e.Scanned <CharFromHex e.Number>) t.Pos t.hFile e.Line
    >;
}

DoQuoted-Oct {
  (e.Errors) (e.Scanned) t.Pos t.hFile (e.Number) e.Line
  3 (e.Octs) =
    <DoQuoted
      (e.Errors) (e.Scanned <CharFromOct e.Number>) t.Pos t.hFile e.Line
    >;

  (e.Errors) (e.Scanned) t.Pos t.hFile (e.Number) s.Oct e.Line
  s.Length (e.Octs-B s.Oct e.Octs-E) =
    <DoQuoted-Oct
      (e.Errors) (e.Scanned) t.Pos t.hFile (e.Number s.Oct) e.Line
      <MMath::Inc s.Length> ('01234567')
    >;

  (e.Errors) (e.Scanned) t.Pos t.hFile (e.Number) e.Line
  s.Length (e.Octs) =
    <DoQuoted
      (e.Errors) (e.Scanned <CharFromOct e.Number>) t.Pos t.hFile e.Line
    >;
}

DigitFromChar {
  s.Char =
    <DigitFromChar-Aux
      s.Char ('0123456789ABCDEF') ('0123456789abcdef')
    >;
}

DigitFromChar-Aux {
  s.Char e.Sets-B (e.Before s.Char e.After) e.Sets-E =
    <MStrings::Length e.Before>;
}

CharFromHex {
  e.CharLine = <CharFromBase e.CharLine 16>;
}

CharFromOct {
  e.CharLine = <CharFromBase e.CharLine 8>;
}

CharFromBase {
  e.CharLine s.Base =
    <MStrings::Chr
      <MLambda::Reduce
        <MLambda::BindLeft & AppendDigit s.Base>
        0
        <MLambda::Map & DigitFromChar e.CharLine>
      >
    >;
}

AppendDigit {
  s.L-Base s.Accum s.Digit =
    <MMath::Add <MMath::Mul s.L-Base s.Accum> s.Digit>;
}

Directive
  (e.Errors) t.Pos t.hFile e.Line =
    <DoDirective
      (e.Errors) t.Pos t.hFile () e.Line
      (<MStrings::UpAlph> <MStrings::LoAlph>)
    >;

DoDirective {
  (e.Errors) t.Pos t.hFile (e.Scanned) s.Letter e.Line
  (e.Letters-B s.Letter e.Letters-E) =
    <DoDirective
      (e.Errors) t.Pos t.hFile (e.Scanned s.Letter) e.Line
      (e.Letters-B s.Letter e.Letters-E)
    >;

  (e.Errors) t.Pos t.hFile (e.Scanned) e.Line (e.Letters) =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line <SwDirective e.Scanned>>;
}

SwDirective {
  'CLEARMODULE' = (Directive ClearModule);
  'clearmodule' = (Directive ClearModule);

  'DATA' = (Directive Data);
  'data' = (Directive Data);

  'END' = (Directive End);
  'end' = (Directive End);

  'ENTRY' = (Directive Entry);
  'entry' = (Directive Entry);

  'IMPORT' = (Directive Import);
  'import' = (Directive Import);

  'MODULE' = (Directive Module);
  'module' = (Directive Module);

  'PROGRAM' = (Directive Program);
  'program' = (Directive Program);

  'SWAP' = (Directive Swap);
  'swap' = (Directive Swap);

  'INIT' = (Directive Init);
  'init' = (Directive Init);

  'FINAL' = (Directive Final);
  'final' = (Directive Final);

  e.Other = (Error 'unknown directive \'' e.Other '\'');
}

Variable
  s.VarType (e.Errors) t.Pos t.hFile e.Line =
    <SwVarIndex
      s.VarType (e.Errors) t.Pos t.hFile e.Line
      (<MStrings::UpAlph> <MStrings::LoAlph> <MStrings::Digits>)
    >;

SwVarIndex {
  s.VarType (e.Errors) t.Pos t.hFile '.' e.Line (e.IndexSymbols) =
    <LongIndex
      s.VarType (e.Errors) t.Pos t.hFile () e.Line
      (<MStrings::UpAlph> <MStrings::LoAlph> <MStrings::Digits> '-_?!')
    >;

  s.VarType (e.Errors) t.Pos t.hFile s.ShortIndex e.Line
  (e.IndexSymbols-B s.ShortIndex e.IndexSymbols-E) =
    <ReturnToken (e.Errors) t.Pos t.hFile e.Line (Var s.VarType s.ShortIndex)>;

  s.VarType (e.Errors) t.Pos t.hFile e.Line (e.IndexSymbols) =
    <ReturnToken
      (e.Errors) t.Pos t.hFile e.Line (Error 'index of variable not found')
    >;
}

LongIndex {
  s.VarType (e.Errors) t.Pos t.hFile (e.Scanned) s.Next e.Line
  (e.IndexSymbols-B s.Next e.IndexSymbols-E) =
    <LongIndex
      s.VarType (e.Errors) t.Pos t.hFile (e.Scanned s.Next) e.Line
      (s.Next e.IndexSymbols-B e.IndexSymbols-E)
    >;

  s.VarType (e.Errors) t.Pos t.hFile () e.Line (e.IndexSymbols) =
    <ReturnToken
      (e.Errors) t.Pos t.hFile e.Line (Error 'Variable with empty index')
    >;

  s.VarType (e.Errors) t.Pos t.hFile (e.Index) e.Line (e.IndexSymbols) =
    <ReturnToken
      (e.Errors) t.Pos t.hFile e.Line (Var s.VarType e.Index)
    >;
}

// Максимальное значение макрочисла -- <MMath::MaxNum>
Macro
  (e.Errors) t.Pos t.hFile s.First e.Line =
    <DoMacro
      (e.Errors) t.Pos t.hFile (s.First) e.Line ('01234567890')
    >;

DoMacro {
  // Обработка числа, начинающегося на незначащие нули
  (e.Errors) t.Pos t.hFile ('0') s.Digit e.Line
  (e.Digits-B s.Digit e.Digits-E) =
    <DoMacro
      (e.Errors) t.Pos t.hFile (s.Digit) e.Line
      (e.Digits-B s.Digit e.Digits-E)
    >;

  (e.Errors) t.Pos t.hFile (e.Scanned) s.Digit e.Line
  (e.Digits-B s.Digit e.Digits-E) =
    <DoMacro
      (e.Errors) t.Pos t.hFile (e.Scanned s.Digit) e.Line
      (e.Digits-B s.Digit e.Digits-E)
    >;

  (e.Errors) t.Pos t.hFile (e.Scanned) e.Line (e.Digits) =
    <Macro-CheckLimit
      (e.Errors) t.Pos t.hFile (e.Scanned) e.Line
      <MOrder::Compare
        (<MStrings::Length-T e.Scanned>)
        (<MStrings::Length-T <MStrings::Symb <MMath::MaxNum>>>)
      >
    >;
}

Macro-CheckLimit {
  (e.Errors) t.Pos t.hFile (e.Scanned) e.Line '>' =
    <ReturnToken
      (e.Errors) t.Pos t.hFile e.Line
      (Error 'Number ' e.Scanned ' is very big for this implementation')
    >;

  (e.Errors) t.Pos t.hFile (e.Scanned) e.Line s.Comp =
    <ReturnToken
      (e.Errors) t.Pos t.hFile e.Line (Macro <MStrings::Numb e.Scanned>)
    >;
}

CreateUndefined
  (e.Errors) t.Pos t.hFile s.Next e.Line =
    <DoCreateUndefined
      (e.Errors) t.Pos t.hFile (s.Next) e.Line
      (' \t[]{}<>()&:,.;=$\'est' <MStrings::UpAlph> <MStrings::Digits> 0)
    >;

DoCreateUndefined {
  (e.Errors) t.Pos t.hFile (e.BadSeq) s.Valid e.Line
  (e.Valids-B s.Valid e.Valids-E) =
    <ReturnToken
      (e.Errors) t.Pos t.hFile s.Valid e.Line
      (Undefined <EscapeText e.BadSeq>)
    >;

  (e.Errors) t.Pos t.hFile (e.BadSeq) /* пусто */ (e.Valids) =
    <ReturnToken
      (e.Errors) t.Pos t.hFile /* пусто */ (Undefined <EscapeText e.BadSeq>)
    >;

  (e.Errors) t.Pos t.hFile (e.BadSeq) s.Invalid e.Line (e.Valids) =
    <DoCreateUndefined
      (e.Errors) t.Pos t.hFile (e.BadSeq s.Invalid) e.Line (e.Valids)
    >;
}

$ENTRY TokenToString {
  (OpenBlock) = <Q '{'>;
  (CloseBlock) = <Q '}'>;

  (OpenFnCall) = <Q '<'>;
  (CloseFnCall) = <Q '>'>;

  (OpenBrac) = <Q '('>;
  (CloseBrac) = <Q ')'>;

  (OpenSquare) = <Q '['>;
  (CloseSquare) = <Q ']'>;

  (Ampersand) = <Q '&'>;
  (Colon) = <Q ':'>;
  (Comma) = <Q ','>;
  (Dot) = <Q '.'>;
  (DoubleColon) = <Q '::'>;
  (EndSent) = <Q ';'>;
  (Replaces) = <Q '='>;
  (Asterisk) = <Q '*'>;

  (Directive s.Direc) = '$' <DirectiveToString s.Direc>;

  (Literal e.Text) = '\\\'' <EscapeText e.Text> '\\\'';
  (Identifier e.Ident) = 'identifier ' e.Ident;
  (Macro s.Value) = 'macronumber ' <MStrings::Symb s.Value>;

  (Var s.VarType e.Index) = <VarTypeToChar s.VarType> e.Index;

  (EndOfText) = 'end of file';
}

Q e.Text = '\'' e.Text '\'';

DirectiveToString {
  ClearModule = 'CLEARMODULE';
  Data = 'DATA';
  End = 'END';
  Entry = 'ENTRY';
  Import = 'IMPORT';
  Module = 'MODULE';
  Swap = 'SWAP';
  Init = 'INIT';
  Final = 'FINAL';
}

VarTypeToChar { EVar = 'e'; SVar = 's'; TVar = 't'; }

EscapeText {
  '\t' e.Tail = '\\t' <EscapeText e.Tail>;
  '\n' e.Tail = '\\n' <EscapeText e.Tail>;
  '\\' e.Tail = '\\\\' <EscapeText e.Tail>;
  '\'' e.Tail = '\\\'' <EscapeText e.Tail>;
  '\"' e.Tail = '\\\"' <EscapeText e.Tail>;
  s.Other e.Tail =
    <MEscape::EscapeChar-Hex s.Other>
    <EscapeText e.Tail>;
  = ;
}

$END FE-MRefal::MLexer.
