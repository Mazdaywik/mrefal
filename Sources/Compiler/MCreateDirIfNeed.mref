$MODULE MCreateDirIfNeed;

$IMPORT MFileSystem;

//------------------------------------------------------------------------------

/**
  <Create-T e.DirName> == e.DirName
*/
$ENTRY Create-T
  e.DirName =
    <CheckCreated
      (<G_Dirs>)
      <MFileSystem::CanonicalPath-Str e.DirName>
      ( e.DirName )
    >;

$SWAP G_Dirs;

CheckCreated {
  (e.Dirs-B (e.DirName) e.Dirs-E) e.DirName (e.ForMkDir) =
    <G_Dirs e.Dirs-B (e.DirName) e.Dirs-E>
    e.ForMkDir;

  (e.Dirs) e.DirName (e.ForMkDir) =
    <G_Dirs e.Dirs (e.DirName)>
    <MFileSystem::MakeDir e.ForMkDir>
    e.ForMkDir;
}

//------------------------------------------------------------------------------

/**
  <CreatePathToFile e.FileName> == e.FileName
    e.FileName ::= e.Dir1 '\\' e.Dir2 '\\' e.FName
    '>md ' e.Dir1
    '>md ' e.Dir1 '\\' e.Dir2
*/
$ENTRY CreatePathToFile
  e.FileName =
    <DoCreateCatalogs
      () e.FileName
    >;

DoCreateCatalogs {
  (e.Path) '/' e.FileName =
    <DoCreateCatalogs
      (<Create-T e.Path> '\\') e.FileName
    >;

  (e.Path) '\\' e.FileName =
    <DoCreateCatalogs
      (<Create-T e.Path> '\\') e.FileName
    >;

  (e.Path) s.NextChar e.FileName =
    <DoCreateCatalogs
      (e.Path s.NextChar) e.FileName
    >;

  (e.Path) = e.Path;
}

$END MCreateDirIfNeed.
