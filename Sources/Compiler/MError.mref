$MODULE MError;

$IMPORT FileIO = MFileIO;
$IMPORT InOut = MInOut;
$IMPORT MFileSystem;
$IMPORT MOS;
$IMPORT MLambda;
$IMPORT MLexer = FE-MRefal::MLexer;
$IMPORT MOrder;
$IMPORT MSrcPos;
$IMPORT MOutModuleStatus;
$IMPORT MQualifiedName;

//------------------------------------------------------------------------------

/**
  <LinkError e.Message>
    == fail down (errcode 1)
*/
$ENTRY LinkError
  e.Message =
    <MOutModuleStatus::Flush>
    <InOut::WriteLine 'LINKER ERROR: ' e.Message>
    <MOS::Exit 1>;

//------------------------------------------------------------------------------

$DATA ErrorList;

$ENTRY IsErrorList {
  [ErrorList e.Errors] = [ErrorList e.Errors];
}

//------------------------------------------------------------------------------

/**
  <CreateErrList> == t.hErrorList
*/
$ENTRY CreateErrList = [ErrorList];

//------------------------------------------------------------------------------

/**
  <DestroyErrList t.hErrorList> == empty
*/
$ENTRY DestroyErrList
  [ErrorList e.Errors] = ;

//------------------------------------------------------------------------------

/**
  <EmptyList t.hErrorList>
    == t.hErrorList Empty
    == t.hErrorList NotEmpty
*/
$ENTRY EmptyList {
  [ErrorList] = [ErrorList] Empty;

  [ErrorList e.Errors] =
    [ErrorList e.Errors] NotEmpty;
}

//------------------------------------------------------------------------------

/**
  <ContentLevel t.hErrorList>
    == t.hErrorList Empty
    == t.hErrorList Warnings
    == t.hErrorList Errors
*/
$ENTRY ContentLevel
  t.hErrorList =
    <SwContentLevel <EmptyList t.hErrorList>>;

SwContentLevel {
  t.hErrorList Empty = t.hErrorList Empty;

  t.hErrorList NotEmpty = t.hErrorList Errors;
}

//------------------------------------------------------------------------------

AddToList {
  [ErrorList e.Errors-B t.Error e.Errors-E]
  t.Error =
    [ErrorList e.Errors-B t.Error e.Errors-E];

  [ErrorList e.Errors] t.Error =
    [ErrorList e.Errors t.Error];
}

//------------------------------------------------------------------------------

/**
  <MergeLists t.List1 t.List2>
    == t.MergedList
*/
$ENTRY MergeLists
  t.List1 [ErrorList e.Errors2] =
    <MLambda::Reduce & AddToList t.List1 e.Errors2>;

//------------------------------------------------------------------------------

/**
  <AddCmdLineError t.hErrorList t.SrcPos e.Message>
    == t.hErrorList
*/
$ENTRY AddCmdLineError
  t.hErrorList t.SrcPos e.Message =
    <AddToList t.hErrorList (CmdLineError t.SrcPos e.Message)>;

//------------------------------------------------------------------------------

/**
  <IllegalCmdLineArgument t.hErrorList t.SrcPos e.Name>
    == t.hErrorList
*/
$ENTRY IllegalCmdLineArgument
  t.hErrorList t.SrcPos e.Name =
    <AddCmdLineError
      t.hErrorList t.SrcPos 'Illegal option "' e.Name '"'
    >;

//------------------------------------------------------------------------------

/**
  <CmdLine-ExpectParam t.hErrorList t.SrcPos e.Name>
    == t.hErrorList
*/
$ENTRY CmdLine-ExpectParam
  t.hErrorList t.SrcPos e.Name =
    <AddCmdLineError
      t.hErrorList t.SrcPos 'Option "' e.Name '" expect parameter'
    >;

//------------------------------------------------------------------------------

/**
  <CmdLine-ExpectGroup t.hErrorList t.SrcPos e.Name>
    == t.hErrorList
*/
$ENTRY CmdLine-ExpectGroup
  t.hErrorList t.SrcPos e.Name =
    <AddCmdLineError
      t.hErrorList t.SrcPos 'Option "' e.Name '" expect group'
    >;

//------------------------------------------------------------------------------

/**
  <CmdLine-DontExpectParam t.hErrorList t.SrcPos e.Name>
    == t.hErrorList
*/
$ENTRY CmdLine-DontExpectParam
  t.hErrorList t.SrcPos e.Name =
    <AddCmdLineError
      t.hErrorList t.SrcPos 'Option "' e.Name '" don\'t expect parameter'
    >;

//------------------------------------------------------------------------------

/**
  <CmdLine-DontExpectGroup t.hErrorList t.SrcPos e.Name>
    == t.hErrorList
*/
$ENTRY CmdLine-DontExpectGroup
  t.hErrorList t.SrcPos e.Name =
    <AddCmdLineError
      t.hErrorList t.SrcPos 'Option "' e.Name '" don\'t expect group'
    >;

//------------------------------------------------------------------------------

/**
  <CmdLine-AddMissedRequired t.hErrorList t.SrcPos e.Name>
    == t.hErrorList
*/
$ENTRY CmdLine-AddMissedRequired
  t.hErrorList t.SrcPos e.Name =
    <AddCmdLineError
      t.hErrorList t.SrcPos 'Expected option "' e.Name '"'
    >;

//------------------------------------------------------------------------------

/**
  <CmdLine-AlreadyAppeared t.hErrorList t.SrcPos e.Name>
    == t.hErrorList
*/
$ENTRY CmdLine-AlreadyAppeared
  t.hErrorList t.SrcPos e.Name =
    <AddCmdLineError
      t.hErrorList t.SrcPos 'Option "' e.Name '" already appeared'
    >;

//------------------------------------------------------------------------------

/**
  <AddUnexpected t.hErrorList t.UnexpToken e.ExpectedText>
    == t.UpdatedErrorList
*/
$ENTRY AddUnexpected {
  t.hErrorList
  (Error t.SrcPos e.Message) e.ExpectedText =
    <AddToList
      t.hErrorList (LexerError t.SrcPos e.Message )
    >;

  t.hErrorList
  (Undefined t.SrcPos e.Text) e.ExpectedText =
    <AddToList
      t.hErrorList (LexerUndefined t.SrcPos e.Text )
    >;

  t.hErrorList
  t.Unexpected e.ExpectedText =
    <AddToList
      t.hErrorList (Unexpected t.Unexpected e.ExpectedText)
    >;
}

//------------------------------------------------------------------------------

/**
  <AddNamesMismatch
    t.hErrorList t.TailPos
    t.InHead t.InTail
  >
    == t.hErrorList
*/
$ENTRY AddNamesMismatch
  t.hErrorList t.TailPos
  t.InHead t.InTail =
    <AddToList
      t.hErrorList
      ( Semantics t.TailPos
        'Mismatch module names in head \''
        <StringFromQualifiedName t.InHead>
        '\' and in tail \''
        <StringFromQualifiedName t.InTail>
        '\''
      )
    >;

//------------------------------------------------------------------------------

/**
  <AddRecursiveLink t.hErrorList t.SrcPos t.ImportName>
    == t.hErrorList
*/
$ENTRY AddRecursiveLink
  t.hErrorList t.SrcPos t.ImportName =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Recursive link in import '
        <StringFromQualifiedName t.ImportName>
      )
    >;

//------------------------------------------------------------------------------

/**
  <AddRecursiveLoop t.hErrorList t.SrcPos t.ImportName*>
    == t.hErrorList
*/
$ENTRY AddRecursiveLoop
  t.hErrorList t.SrcPos e.ImportNames =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Found recursive loop: '
        <PrintRecursiveLoop e.ImportNames>
      )
    >;

PrintRecursiveLoop {
  t.Name = <StringFromQualifiedName t.Name>;

  t.Name1 t.Name2 =
    <StringFromQualifiedName t.Name1> ' and '
    <StringFromQualifiedName t.Name2>;

  t.Name e.Names =
    <StringFromQualifiedName t.Name> ', '
    <PrintRecursiveLoop e.Names>;
}

//------------------------------------------------------------------------------

/**
  <AddBrokenImport t.hErrorList t.SrcPos t.ImportName>
    == t.hErrorList
*/
$ENTRY AddBrokenImport
  t.hErrorList t.SrcPos t.ImportName =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Can\'t load import module '
        <StringFromQualifiedName t.ImportName>
      )
    >;

//------------------------------------------------------------------------------

/**
  <AddInvalidImportName t.hErrorList t.SrcPos t.ImportName>
    == t.hErrorList
*/
$ENTRY AddInvalidImportName
  t.hErrorList t.SrcPos t.ImportName =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Invalid import module name '
        <StringFromQualifiedName t.ImportName>
      )
    >;

//------------------------------------------------------------------------------

/**
  <DependedFromSource t.hErrorList t.SrcPos t.ImportName>
    == t.hErrorList
*/
$ENTRY DependedFromSource
  t.hErrorList t.SrcPos t.ImportName =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Can\'t load import source module from library '
        <StringFromQualifiedName t.ImportName>
      )
    >;

//------------------------------------------------------------------------------

/**
  <AddImportHead t.hErrorList t.SrcPos t.ImportName>
    == t.hErrorList
*/
$ENTRY AddImportHead
  t.hErrorList t.SrcPos t.ImportName =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Can\'t import $PROGRAM module '
        <StringFromQualifiedName t.ImportName>
      )
    >;

//------------------------------------------------------------------------------

/**
  <AddTreeModulePacketConflict
    t.hErrorList t.SrcPos t.ImportName s.Conflict t.KnownName
  >
    == t.hErrorList
*/
$ENTRY AddTreeModulePacketConflict {
  t.hErrorList t.SrcPos t.ImportName ModuleOverPacket t.PacketName =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Can\'t import module '
        <StringFromQualifiedName t.ImportName>
        ' because it is packet'
      )
    >;

  t.hErrorList t.SrcPos t.ImportName PacketOverModule t.ModuleName =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Can\'t import module '
        <StringFromQualifiedName t.ImportName>
        ' because '
        <StringFromQualifiedName t.ModuleName>
        ' is module, is not packet'
      )
    >;
}

//------------------------------------------------------------------------------

/**
  <AddTreeCaseError t.hErrorList t.SrcPos t.ImportName t.ValidCaseName>
    == t.hErrorList
*/
$ENTRY AddTreeCaseError {
  t.hErrorList t.SrcPos t.ImportName t.ValidCaseName =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Import module '
        <StringFromQualifiedName t.ImportName>
        ' has invalid name case, valid name '
        '(name of module or packet that contains this module) is '
        <StringFromQualifiedName t.ValidCaseName>
      )
    >;
}

//------------------------------------------------------------------------------

/**
  <AddMismatchInternalAndExternalNames
    t.hErrorList t.SrcPos t.InternalName t.ExternalName
  >
    == t.hErrorList
*/
$ENTRY AddMismatchInternalAndExternalNames
  t.hErrorList t.SrcPos t.InternalName t.ExternalName =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Mismatch internal module name '
        <StringFromQualifiedName t.InternalName>
        ' and external name '
        <StringFromQualifiedName t.ExternalName>
      )
    >;

StringFromQualifiedName
  t.QualifiedName =
    <MQualifiedName::ToPrintable-Quad t.QualifiedName>;

//------------------------------------------------------------------------------

/**
  <AddMismatchInternalAndPhysicalNames
    t.hErrorList t.SrcPos t.InternalName t.ExternalName
  >
    == t.hErrorList
*/
$ENTRY AddMismatchInternalAndPhysicalNames
  t.hErrorList t.SrcPos t.InternalName t.ExternalName =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Mismatch internal module name '
        <StringFromQualifiedName t.InternalName>
        ' and external name '
        <CanonicalStringFromQualifiedName t.ExternalName>
      )
    >;

CanonicalStringFromQualifiedName {
  t.QualifiedName =
    <MFileSystem::CanonicalPath-Str
      <MQualifiedName::ToRelativeFSPath-Str t.QualifiedName>
    >;
}

//------------------------------------------------------------------------------

/**
  <AddFailGeneration t.hErrorList t.SrcPos t.ModuleName>
    == t.UpdatedErrorList
*/
$ENTRY AddFailGeneration
  t.hErrorList t.SrcPos t.ModuleName =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Error while generating module ' <StringFromQualifiedName t.ModuleName>
      )
    >;

//------------------------------------------------------------------------------

/**
  <AddRedeclaredIdentifier t.hErrorList t.SrcPos t.Identifier>
    == t.UpdatedErrorList
*/
$ENTRY AddRedeclaredIdentifier
  t.hErrorList t.SrcPos t.Identifier =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos
        'Identifier redeclared ' <StringFromQualifiedName t.Identifier>
      )
    >;

//------------------------------------------------------------------------------

/**
  <AddVarTypeMismatch t.hErrorList t.SrcPos e.VarName>
    == t.hErrorList
*/
$ENTRY AddVarTypeMismatch
  t.hErrorList t.SrcPos e.VarName =
    <AddToList
      t.hErrorList
      ( Semantics
        t.SrcPos 'Two different variables has same index ' e.VarName
      )
    >;

//------------------------------------------------------------------------------

/**
  <AddUndeclaredVariable t.hErrorList t.SrcPos s.VarType e.Index>
    == t.hErrorList
*/
$ENTRY AddUndeclaredVariable
  t.hErrorList t.SrcPos s.VarType e.Index =
    <AddToList
      t.hErrorList
      ( Semantics
        t.SrcPos
        'Undeclared variable ' <VarTypeToPrefix s.VarType> e.Index
      )
    >;

VarTypeToPrefix {
  EVar = 'e.'; SVar = 's.'; TVar = 't.';
}

//------------------------------------------------------------------------------

/**
  <AddUnresolvedFunction t.hErrorList t.SrcPos t.FnName>
    == t.hErrorList
*/
$ENTRY AddUnresolvedFunction {
  t.hErrorList t.SrcPos t.EntityName =
    <AddToList
      t.hErrorList
      ( Semantics
        t.SrcPos
        'Unresolved calling <' <StringFromQualifiedName t.EntityName> ' ... >'
      )
    >;
}

//------------------------------------------------------------------------------

/**
  <AddGoNotFound t.hErrorList t.SrcPos>
    == t.hErrorList
*/
$ENTRY AddGoNotFound {
  t.hErrorList t.SrcPos =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos 'Go function expected in main module' )
    >;
}

//------------------------------------------------------------------------------

/**
  <AddGoNotEntry t.hErrorList t.SrcPos>
    == t.hErrorList
*/
$ENTRY AddGoNotEntry {
  t.hErrorList t.SrcPos =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos 'Go function must be $ENTRY' )
    >;
}

//------------------------------------------------------------------------------

/**
  <AddInitOrFinalInMain t.hErrorList t.SrcPos>
    == t.hErrorList
*/
$ENTRY AddInitOrFinalInMain {
  t.hErrorList t.SrcPos s.Type =
    <AddToList
      t.hErrorList
      ( Semantics
        t.SrcPos 'Unexpected ' <InitFinal s.Type> ' block in $PROGRAM'
      )
    >;
}

InitFinal { Init = '$INIT'; Final = '$FINAL'; }

//------------------------------------------------------------------------------

/**
  <AddInitOrFinalRedeclaration t.hErrorList t.SrcPos>
    == t.hErrorList
*/
$ENTRY AddInitOrFinalRedeclaration {
  t.hErrorList t.SrcPos s.Type =
    <AddToList
      t.hErrorList
      ( Semantics t.SrcPos <InitFinal s.Type> ' block already defined' )
    >;
}

//------------------------------------------------------------------------------

ErrorFile = '__errors';

/**
  <PrintErrors t.hErrorList> == empty
*/
$ENTRY PrintErrors {
  [ErrorList] =
    <DelErrorFile-SwExist
      <MFileSystem::ExistFile-T <ErrorFile>>
    >;

  t.hErrorList =
    <MOutModuleStatus::Flush>
    <FileIO::Save
      (<ErrorFile>)
      <TextFromErrors t.hErrorList>
    >
    <InOut::WriteText
      <TextFromErrors t.hErrorList>
    >;
}

DelErrorFile-SwExist {
  True e.ErrorFile =
    <MFileSystem::RemoveFile e.ErrorFile>;

  False e.ErrorFile = ;
}

TextFromErrors
  [ErrorList e.Errors] =
    <DoTextFromErrors
     // <MOrder::Sort
        e.Errors
     // >
    >;


DoTextFromErrors {
  (e.Error) e.Errors =
    <PrintError e.Error>
    <DoTextFromErrors e.Errors>;

  = ;
}

//------------------------------------------------------------------------------

PrintError {
  LexerError t.SrcPos e.Message =
    <OutError t.SrcPos ('LEXER') e.Message>;

  LexerUndefined t.SrcPos e.Text =
    <OutError t.SrcPos ('LEXER') 'undefined text ' e.Text>;

  Unexpected (s.Type t.SrcPos e.Info) e.Expected =
    <OutError
      t.SrcPos ('SYNTAX') 'Expected ' e.Expected ', got '
      <MLexer::TokenToString (s.Type e.Info)>
    >;

  Semantics t.SrcPos e.Message =
    <OutError t.SrcPos ('SEMANTICS') e.Message>;

  CmdLineError t.SrcPos e.Message =
    <OutError t.SrcPos ('COMMAND LINE') e.Message>;
}

OutError {
  t.SrcPos (e.Kind) e.Message =
    ( <MSrcPos::ToString-Error t.SrcPos> ': ' e.Kind ' ERROR ' e.Message );
}

$END MError.
