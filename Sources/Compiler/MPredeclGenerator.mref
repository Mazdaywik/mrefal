$MODULE MPredeclGenerator;

$IMPORT MError;
$IMPORT MFileIO;
$IMPORT MIModule;
$IMPORT MLambda;
$IMPORT MMath;
$IMPORT MQualifiedName;
$IMPORT MSrcPos;

$IMPORT MProfiler;

/**
  Generate-Properties {
    GenFunction-Code = & GenFunction-Code;
  }

  <Generate-Generic t.FnProperties t.hIModule e.OutName>
    == t.hIModule

  <<t.FnProperties GenSwap> t.AbsolutName> == e.Lines
  <<t.FnProperties SwitchEnum s.ScopeClass> t.AbsolutName> == e.Lines
  s.ScopeClass ::= Entry | Local
  <t.FnProperties GenCommonHeaders> == e.Lines
  <<t.FnProperties GenIdent> e.Name> == e.Lines
  <<t.FnProperties GenFunction-Decl> s.ScopeClass t.AbsolutName>
    == e.Lines
  <<t.FnProperties Generate-EntryCode-Go>
    t.FnProperties t.ModuleName (e.Result) e.Imports
  >
    == e.GenFunctionResult
  <<t.FnProperties Generate-EntryCode-InitFinal>
    t.FnProperties t.ModuleName t.InitSeq t.FinalSeq e.Imports
  >
    == e.GenFunctionResult
  <<t.FnProperties GenFunction-Code>
    t.AbsolutName s.ScopeClass e.Sentences
  >
    == e.Lines

  e.Lines ::= (char*)*
  e.GenFunctionResult — результат выполнения функции GenFunction
*/
$ENTRY Generate-Generic
  t.FnProperties t.hIModule e.OutName =
    <Generate-Aux
      t.FnProperties
      (e.OutName)
      <MLambda::Apply
        <MLambda::Parallel-H
          <MLambda::BindLeft & GenerateFunctions t.FnProperties>
          <MLambda::BindLeft & GenerateEntryCode t.FnProperties>
        >
        t.hIModule
      >
    >;

GenerateFunctions
  t.FnProperties t.hIModule =
    <MLambda::MapReduce
      <MLambda::BindLeft & GenerateEntity t.FnProperties>
      <MIModule::GetEntityList t.hIModule>
    >;

GenerateEntity {
  t.FnProperties t.hIModule (Function t.RelativeName) =
    <GenerateFunction
      t.FnProperties
      <MIModule::AbsolutName t.hIModule t.RelativeName> t.RelativeName
    >;

  t.FnProperties t.hIModule (ADT t.RelativeName) =
    t.hIModule /* пусто */;

  t.FnProperties t.hIModule
  (NativeInsertion s.NativeHandle t.SrcPos s.BackEndID e.Code) =
    t.hIModule
    <Declarations-Expr t.FnProperties e.Code>
    (Native
      <MLambda::Apply t.FnProperties GenNativeInsertion>
      t.SrcPos s.BackEndID e.Code
    );
}

/*
  <GenerateFunction
    t.FnProperties t.hIModule t.AbsolutName t.RelativeName
  >
    == t.hIModule ( (e.Definitions) (e.FunctionCode) )
*/
GenerateFunction
  t.FnProperties t.hIModule t.AbsolutName t.RelativeName =
    <GenerateFunction-Aux
      t.FnProperties
      <MLambda::Apply
        <MLambda::Parallel-H
          <MLambda::BindLeft-H
            & MIModule.GetFunctionAttribute ScopeClass t.RelativeName
          >
          <MLambda::BindLeft-H
            & MIModule.GetFunctionAttribute Body t.RelativeName
          >
          <MLambda::BindLeft-H
            & MIModule.GetFunctionAttribute NativeBody t.RelativeName
          >
        >
        t.hIModule
      >
      t.AbsolutName
    >;

GenerateFunction-Aux {
  t.FnProperties
  t.hIModule Found Swap NoAttrib NoAttrib t.AbsolutName =
    t.hIModule
    (Declare
      Function
      t.AbsolutName
      (<MLambda::Apply t.FnProperties GenFunction-Decl> Swap t.AbsolutName)
    )
    (Define
      Function t.AbsolutName
      (<MLambda::Apply t.FnProperties GenSwap> t.AbsolutName)
    );

  t.FnProperties
  t.hIModule Found s.ScopeClass Found (/* пусто */) NoAttrib t.AbsolutName =
    t.hIModule
    (Declare
      Function
      t.AbsolutName
      (
        <MLambda::Apply t.FnProperties GenFunction-Decl>
        s.ScopeClass t.AbsolutName
      )
    )
    (Define
      Function t.AbsolutName
      (<MLambda::Apply t.FnProperties SwitchEnum s.ScopeClass> t.AbsolutName)
    );

  t.FnProperties
  t.hIModule Found s.ScopeClass Found (e.Sentences) NoAttrib t.AbsolutName =
    t.hIModule
    <GenFunction t.FnProperties t.AbsolutName s.ScopeClass e.Sentences>;

  t.FnProperties
  t.hIModule Found s.ScopeClass NoAttrib Found t.SrcPos Refal5 s.Type e.Native
  t.AbsolutName =
    <MError::LinkError-BadBackEndID t.SrcPos Refal5 'C++/SR or Simple Refal'>;

  t.FnProperties
  t.hIModule Found s.ScopeClass NoAttrib Found t.SrcPos s.BackEndID Code e.Code
  t.AbsolutName =
    t.hIModule
    <Declarations-Expr t.FnProperties e.Code>
    (Define
      Function
      t.AbsolutName
      (<MLambda::Apply t.FnProperties GenNativeInsertion-Body>
        t.AbsolutName s.ScopeClass t.SrcPos s.BackEndID e.Code
      )
    );
}

GenerateEntryCode
  t.FnProperties t.hIModule =
    <Generate-EntryCode-Aux
      t.FnProperties
      <MLambda::Apply
        <MLambda::Parallel-H
          & MIModule.GetModuleName
          <MLambda::Composite
            & MIModule.GetEntryPoint
            & MLambda.Bracket-H
          >
          & MIModule.GetImportList-RealNames
        >
        t.hIModule
      >
    >;

Generate-Aux
  t.FnProperties (e.OutName) t.hIModule e.FunctionsEntries =
    t.hIModule
    <MProfiler::Quantify & Profiling-MFileIO-Save
      (e.OutName)
      <MProfiler::Quantify & PatchSrcPos
        (e.OutName)
        <MLambda::Apply t.FnProperties GenCommonHeaders>
        <FilterDecls e.FunctionsEntries>
      >
    >;

Profiling-MFileIO-Save
  (e.OutName) e.Lines = <MFileIO::Save (e.OutName) e.Lines>;

Generate-EntryCode-Aux {
  t.FnProperties
  t.hIModule t.ModuleName (Go (Result e.Result)) e.Imports =
    t.hIModule
    <MLambda::Apply
      <MLambda::Apply t.FnProperties Generate-EntryCode-Go>
      t.FnProperties t.ModuleName (e.Result) e.Imports
    >;

  t.FnProperties
  t.hIModule t.ModuleName (Regular t.InitSeq t.FinalSeq) e.Imports =
    t.hIModule
    <MLambda::Apply
      <MLambda::Apply t.FnProperties Generate-EntryCode-InitFinal>
      t.FnProperties t.ModuleName t.InitSeq t.FinalSeq e.Imports
    >;
}

FilterDecls {
  e.Info = <DoFilterDecls () e.Info>;
}

DoFilterDecls {
  (e.Known-B (Declare s.Type t.Name t.Gen) e.Known-E)
  (Declare s.Type t.Name t.Gen2) e.Tail =
    <DoFilterDecls
      (e.Known-B (Declare s.Type t.Name t.Gen) e.Known-E) e.Tail
    >;

  (e.Known) (Declare s.Type t.Name t.Gen) e.Tail =
    <DoFilterDecls
      (e.Known (Declare s.Type t.Name t.Gen)) e.Tail
    >;

  (e.Known) (Define s.Type t.Name t.Gen) e.Tail =
    <DoFilterDecls
      (e.Known (Define s.Type t.Name t.Gen)) e.Tail
    >;

  (e.Known) (Native e.Info) e.Tail =
    <DoFilterDecls (e.Known (Native e.Info)) e.Tail>;

  (e.Known) =
    <GenerateElems e.Known>;
}

GenerateElems
  e.Known = <MProfiler::Quantify & Profiling-GenerateElems e.Known>;

Profiling-GenerateElems
  e.Known = <MLambda::Map & GenerateElem e.Known>;

GenerateElem {
  (Native s.FnGenNative t.SrcPos s.BackEndID e.Code) =
    <MProfiler::Quantify s.FnGenNative t.SrcPos s.BackEndID e.Code>;

  (s.DeclareDefine s.Type t.Name (s.Generator e.Arguments)) =
    <MProfiler::Quantify s.Generator e.Arguments>;
}

PatchSrcPos {
  (e.OutName) e.Lines-B PATCH-SHARP-LINE e.Lines-E =
    <DoPatchSrcPos (e.OutName) 2 e.Lines-B PATCH-SHARP-LINE e.Lines-E>;

  (e.OutName) e.Lines = e.Lines;
}

DoPatchSrcPos {
  (e.OutName) s.LineNo (e.Line) e.Lines =
    (e.Line)
    <DoPatchSrcPos (e.OutName) <MMath::Inc s.LineNo> e.Lines>;

  (e.OutName) s.LineNo PATCH-SHARP-LINE e.Lines =
    (<MSrcPos::SharpLine <MSrcPos::Create-FilePos s.LineNo e.OutName>>)
    <DoPatchSrcPos (e.OutName) <MMath::Inc s.LineNo> e.Lines>;

  (e.OutName) s.LineNo /* всё */ = /* всё */;
}

//----------------------------------------------------------------------

/**
  <GenFunction t.FnProperties t.AbsolutName s.ScopeClass e.Sentences>
    == e.GenFunctionResult

  Эту функцию можно использовать только для генерации кода точек входа.
*/
$ENTRY GenFunction
  t.FnProperties t.AbsolutName s.ScopeClass e.Sentences =
    <GenFunction-Declarations t.FnProperties e.Sentences>
    (Declare
      Function
      t.AbsolutName
      (
        <MLambda::Apply t.FnProperties GenFunction-Decl>
        s.ScopeClass t.AbsolutName
      )
    )
    (Define
      Function
      t.AbsolutName
      (<MLambda::Apply t.FnProperties GenFunction-Code>
        t.AbsolutName s.ScopeClass e.Sentences
      )
    );

GenFunction-Declarations {
  t.FnProperties
  ( (Pattern e.PatternExpr) (Result e.ResultExpr) ) e.Tail =
    <Declarations-Expr t.FnProperties e.PatternExpr>
    <Declarations-Expr t.FnProperties e.ResultExpr>
    <GenFunction-Declarations t.FnProperties e.Tail>;

  t.FnProperties
  ( (Pattern e.PatternExpr) s.EntryCodeType (Result e.ResultExpr) ) e.Tail =
    <Declarations-Expr t.FnProperties e.PatternExpr>
    <Declarations-Expr t.FnProperties e.ResultExpr>
    <GenFunction-Declarations t.FnProperties e.Tail>;

  t.FnProperties = ;
}

Declarations-Expr {
  t.FnProperties (Structure e.InBrackets) e.Tail =
    <Declarations-Expr t.FnProperties e.InBrackets e.Tail>;

  t.FnProperties (Abstract t.Callable e.InBrackets) e.Tail =
    <Declarations-Callable t.FnProperties t.Callable>
    <Declarations-Expr t.FnProperties e.InBrackets e.Tail>;

  t.FnProperties (Function t.Callable e.InBrackets) e.Tail =
    <Declarations-Callable t.FnProperties t.Callable>
    <Declarations-Expr t.FnProperties e.InBrackets e.Tail>;

  t.FnProperties (IndirectCall (SVar e.Index) e.InBrackets) e.Tail =
    <Declarations-Expr t.FnProperties e.InBrackets e.Tail>;

  t.FnProperties (EntryCode s.CodeType e.InBracket) e.Tail =
    <Declarations-Expr t.FnProperties e.InBracket e.Tail>;

  t.FnProperties t.SimpleTerm e.Tail =
    <Declarations-Term t.FnProperties t.SimpleTerm>
    <Declarations-Expr t.FnProperties e.Tail>;

  t.FnProperties = ;
}

Declarations-Callable {
  t.FnProperties (s.CallType t.SrcPos t.QualifiedName) =
    (Declare
      Function
      t.QualifiedName
      (
        <MLambda::Apply t.FnProperties GenFunction-Decl>
        s.CallType t.QualifiedName
      )
    );
}

Declarations-Term {
  t.FnProperties (Identifier t.SrcPos e.Name) =
    (Declare
      Identifier <MQualifiedName::Create (e.Name)>
      (<MLambda::Apply t.FnProperties GenIdent> e.Name)
    );

  t.FnProperties (EVar e.Index) = ;
  t.FnProperties (TVar e.Index) = ;
  t.FnProperties (SVar e.Index) = ;

  t.FnProperties (Literal e.Content) = ;
  t.FnProperties (Macro s.Value) = ;

  t.FnProperties (FnPtr t.Callable) =
    <Declarations-Callable t.FnProperties t.Callable>;

  t.FnProperties (Native t.SrcPos e.Code) = ;
}

$END MPredeclGenerator.

