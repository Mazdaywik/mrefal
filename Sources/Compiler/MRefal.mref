$PROGRAM MRefal;

$IMPORT Config::MLoad;
$IMPORT Driver::MCompiler;
$IMPORT Driver::MContext;
$IMPORT Driver::MModules;
$IMPORT MError;
$IMPORT MFileSystem;
$IMPORT MInOut;
$IMPORT MLambda;
$IMPORT MOS;
$IMPORT MSrcPos;
$IMPORT MVersion;

$ENTRY Go =
  <MVersion::Show>
  <CompileList
    <Driver::MContext::Create>
    <Config::MLoad::Load
      <MError::CreateErrList>
      <MOS::ArgList>
    >
  >;

CompileList {
  t.hContext t.hErrorList Success (Help e.Message) =
    <Driver::MContext::Destroy t.hContext>
    <MError::DestroyErrList t.hErrorList>
    <MInOut::WriteText e.Message>;

  t.hContext t.hErrorList Success t.Config e.PtModules =
    <CompileList-Aux
      t.Config t.hContext t.hErrorList e.PtModules
    >;

  t.hContext t.hErrorList Fails =
    <Driver::MContext::Destroy t.hContext>
    <MError::PrintErrors t.hErrorList>;
}

CompileList-Aux {
  t.Config t.hContext t.hErrorList e.PtModules =
    <CheckFoundResult
      t.Config
      t.hErrorList
      <MLambda::MapReduce
        <MLambda::BindLeft
          & AddCommandLineModule t.Config
        >
        t.hContext
        e.PtModules
      >
    >;
}

AddCommandLineModule {
  t.L-Config t.hContext (e.PtModuleName t.Target) =
    <AddCommandLineModule-Aux
      (e.PtModuleName) t.Target
      <Driver::MModules::LookupCmdLineModule
        t.hContext t.L-Config e.PtModuleName
      >
    >;
}

AddCommandLineModule-Aux {
  (e.PtModuleName) t.Target t.hContext NotFound =
    t.hContext (NotFound e.PtModuleName);

  (e.PtModuleName) t.Target t.hContext Redefinition =
    t.hContext (Redefinition e.PtModuleName);

  (e.PtModuleName) NoTarget
  t.hContext Found t.QualifiedName s.FrontEnd e.PtBaseDirectory =
    t.hContext (Found t.QualifiedName);

  (e.PtModuleName) (e.PtTargetName)
  t.hContext Found t.QualifiedName s.FrontEnd e.PtBaseDirectory =
    <AddCommandLineModule-Aux-Guard
      <Driver::MContext::SetTarget_
        t.hContext t.QualifiedName e.PtTargetName
      >
    >
    (Found t.QualifiedName);
}

AddCommandLineModule-Aux-Guard {
  t.hContext Success = t.hContext;
}

CheckFoundResult {
  t.Config t.hErrorList
  t.hContext e.Results-B ( NotFound e.Module ) e.Results-E =
    <Driver::MContext::Destroy t.hContext>
    <MError::PrintErrors
      <MLambda::Reduce
        & PrintErrorLookup
        t.hErrorList
        e.Results-B ( NotFound e.Module ) e.Results-E
      >
    >;

  t.Config t.hErrorList
  t.hContext e.Results-B ( Redefinition e.Module ) e.Results-E =
    <Driver::MContext::Destroy t.hContext>
    <MError::PrintErrors
      <MLambda::Reduce
        & PrintErrorLookup
        t.hErrorList
        e.Results-B ( Redefinition e.Module ) e.Results-E
      >
    >;

  t.Config t.hErrorList t.hContext e.ResultsFound =
    <MLambda::TerminateAccumulator
      & FinishMake
      <MLambda::Reduce
        <MLambda::BindLeft & Make t.Config>
        (t.hContext t.hErrorList Success)
        e.ResultsFound
      >
    >;
}

PrintErrorLookup {
  t.hErrorList ( NotFound e.PtModule ) =
    <MError::AddCmdLineError
      t.hErrorList
      <MSrcPos::Create-CmdLine-Common>
      'module ' <MFileSystem::StrFromPath e.PtModule> ' not found'
    >;

  t.hErrorList ( Redefinition e.PtModule ) =
    <MError::AddCmdLineError
      t.hErrorList
      <MSrcPos::Create-CmdLine-Common>
      'module ' <MFileSystem::StrFromPath e.PtModule> ' redefined'
    >;

  t.hErrorList ( Found t.QualifiedName ) = t.hErrorList;
}

Make {
  t.Config (t.hContext t.hErrorList Success) ( Found t.QualifiedName ) =
    (
      <Driver::MCompiler::Make
        t.hContext
        t.hErrorList
        t.Config
        t.QualifiedName
      >
    );

  t.Config (t.hContext t.hErrorList Fails) ( Found t.QualifiedName ) =
    (t.hContext t.hErrorList Fails);
}

FinishMake {
  ( t.hContext t.hErrorList Success ) =
    <Driver::MContext::Destroy t.hContext>
    <MError::PrintErrors t.hErrorList>;

  ( t.hContext t.hErrorList Fails ) =
    <Driver::MContext::Destroy t.hContext>
    <MError::PrintErrors t.hErrorList>;
}

$END MRefal.
