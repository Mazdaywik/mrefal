$PROGRAM MRefal;

// Эти модули используются

$IMPORT MCompiler;
$IMPORT MConfig = Config::MConfig;
$IMPORT MContext;
$IMPORT MError;
$IMPORT MFileSystem;
$IMPORT MLoadConfig = Config::MLoad;
$IMPORT InOut;
$IMPORT MLambda;
$IMPORT MModules;
$IMPORT MOS;
$IMPORT MQualifiedName;
$IMPORT MVersion;

$IMPORT Ch = Check::TheCheck;

$ENTRY Go =
  <MVersion::Show>
  <CompileList
    <MContext::Create>
    <MLoadConfig::Load
      <MError::CreateErrList>
      <MOS::ArgList>
    >
  >;

CompileList {
  t.hContext t.hErrorList Success (Help e.Message) =
    <MContext::Destroy t.hContext>
    <MError::DestroyErrList t.hErrorList>
    <InOut::WriteText e.Message>;

  t.hContext t.hErrorList Success t.Config e.PtModules =
    <CompileList-Aux
      t.Config t.hContext t.hErrorList e.PtModules
    >;

  t.hContext t.hErrorList Fails =
    <MContext::Destroy t.hContext>
    <MError::PrintErrors t.hErrorList>;
}

CompileList-Aux {
  t.Config t.hContext t.hErrorList e.PtModules =
    <CheckFoundResult
      t.Config
      t.hErrorList
      <MLambda::MapReduce
        <MLambda::Composite
          & MLambda.UnBracket-H
          <MLambda::Parallel-H
            & MLambda.Bracket-H
            <MLambda::BindLeft-H
              & MModules.LookupCmdLineModule t.Config
            >
          >
          & MLambda.Bracket-H
        >
        t.hContext
        e.PtModules
      >
    >;
}

CheckFoundResult {
  t.Config t.hErrorList
  t.hContext e.Results-B ( (e.Module) NotFound ) e.Results-E =
    <MContext::Destroy t.hContext>
    <MError::DestroyErrList t.hErrorList>
    <MLambda::Map
      & PrintNotFound
      e.Results-B ( (e.Module) NotFound ) e.Results-E
    >;

  t.Config t.hErrorList t.hContext e.ResultsFound =
    <MLambda::TerminateAccumulator
      & FinishMake
      <MLambda::Reduce
        <MLambda::BindLeft & Make t.Config>
        (t.hContext t.hErrorList Success)
        e.ResultsFound
      >
    >;
}

PrintNotFound {
  ( (e.PtModule) NotFound ) =
    <InOut::WriteLine
      'CMDLINE ERROR: module '
      <MFileSystem::StrFromPath e.PtModule>
      ' not found'
    >;

  ( (e.Module) Found t.QualifiedName s.FrontEnd e.PtBaseDirectory ) =
    /* пусто */;
}

Make {
  t.Config
  (t.hContext t.hErrorList Success)
  ( (e.PtModule) Found t.QualifiedName s.FrontEnd e.PtBaseDirectory ) =
    (
      <MCompiler::Make
        t.hContext
        t.hErrorList
        t.Config
        t.QualifiedName
      >
    );

  t.Config
  (t.hContext t.hErrorList Fails)
  ( (e.PtModule) Found t.QualifiedName s.FrontEnd e.PtBaseDirectory ) =
    (t.hContext t.hErrorList Fails);
}

FinishMake {
  ( t.hContext t.hErrorList Success ) =
    <MContext::Destroy t.hContext>
    <MError::PrintErrors t.hErrorList>;

  ( t.hContext t.hErrorList Fails ) =
    <MContext::Destroy t.hContext>
    <MError::PrintErrors t.hErrorList>;
}

$END MRefal.
