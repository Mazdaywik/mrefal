$PROGRAM MRefal;

// Эти модули используются

$IMPORT MCompiler;
$IMPORT MConfig;
$IMPORT MContext;
$IMPORT MError;
$IMPORT InOut;
$IMPORT MLambda;
$IMPORT MModules;
$IMPORT MOS;
$IMPORT MQualifiedName;
$IMPORT MVersion;

// Эти модули должны быть инициализированы
$IMPORT MBackEnd_Refal5_init;
$IMPORT MFrontEnd_MRefal;
$IMPORT MSymModule;
$IMPORT MXLinx;

$ENTRY Go =
  <MVersion::Show>
  <CompileList <MContext::Create> <LoadModuleList> >;

LoadModuleList
  = <SwLoadModuleList <MOS::ArgList>>;

SwLoadModuleList {
  (e.ProgName) =
    <MError::Fatal 'Command line error: use MRefal module1 module2 ...'>;

  (e.ProgName) e.Modules = e.Modules;
}

PrepareMP
  e.ModulePath =
    <DeleteEmpty
      <DoPrepareMP e.ModulePath>
    >;

DoPrepareMP {
  e.Part ';' e.Tail = (e.Part) <DoPrepareMP e.Tail>;

  e.Part = (e.Part);
}

DeleteEmpty {
  e.Begin () e.End = e.Begin <DeleteEmpty e.End>;

  e.NotEmpty = e.NotEmpty;
}

CompileList {
  t.hContext (e.Action) ('=MP:' e.ModulePath) e.Modules =
    <CompileList-Aux
      <MLambda::Apply
        <MLambda::Composite
          & MBackEnd_Refal5_init.Register
          & MSymModule.Register
          & MXLinx.Register
          & MFrontEnd_MRefal.Register
        >
        <MConfig::Create <PrepareMP e.ModulePath>>
      >
      t.hContext (e.Action) e.Modules
    >;
}

CompileList-Aux {
  t.Config t.hContext (e.Action) e.Modules =
    <CheckFoundResult
      (e.Action)
      t.Config
      <MLambda::MapReduce
        <MLambda::Composite
          & MLambda.UnBracket-H
          <MLambda::Parallel-H
            & MLambda.Bracket-H
            <MLambda::BindLeft-H
              & MModules.LookupCmdLineModule t.Config
            >
          >
          & MLambda.Bracket-H
        >
        t.hContext
        e.Modules
      >
    >;
}

CheckFoundResult {
  (e.Action) t.Config
  t.hContext e.Results-B ( (e.Module) NotFound ) e.Results-E =
    <MContext::Destroy t.hContext>
    <MLambda::Map
      & PrintNotFound
      e.Results-B ( (e.Module) NotFound ) e.Results-E
    >;

  (e.Action) t.Config t.hContext e.ResultsFound =
    <MLambda::TerminateAccumulator
      & FinishMake
      <MLambda::Reduce
        <MLambda::BindLeft & Make (e.Action) t.Config>
        (t.hContext <MError::CreateErrList> Success)
        e.ResultsFound
      >
    >;
}

PrintNotFound {
  ( (e.Module) NotFound ) =
    <InOut::WriteLine
      'CMDLINE ERROR: module ' e.Module ' not found'
    >;

  ( (e.Module) Found t.QualifiedName s.FrontEnd e.BaseDirectory ) =
    <InOut::WriteLine
      'FOUND: ' e.Module ' '
      <MQualifiedName::Parse t.QualifiedName>
      ' ' s.FrontEnd ' ' e.BaseDirectory
    >;
}

Make {
  (e.Action) t.Config
  (t.hContext t.hErrorList Success)
  ( (e.Module) Found t.QualifiedName s.FrontEnd e.BaseDirectory ) =
    (
      <MLambda::Apply
        <SelectMaker e.Action>
        t.hContext
        t.hErrorList
        t.Config
        t.QualifiedName
      >
    );

  (e.Action) (e.ModulePath)
  (t.hContext t.hErrorList Fails)
  ( (e.Module) Found t.QualifiedName s.FrontEnd e.BaseDirectory ) =
    (t.hContext t.hErrorList Fails);
}

SelectMaker {
  '+make+' = & MCompiler.Make;

  '+linkonly+' = & MCompiler.LinkOnly;

  '+build+' = & MCompiler.Build;
}

FinishMake {
  ( t.hContext t.hErrorList Success ) =
    <MContext::Destroy t.hContext>
    <MError::PrintErrors t.hErrorList>;

  ( t.hContext t.hErrorList Fails ) =
    <MContext::Destroy t.hContext>
    <MError::PrintErrors t.hErrorList>;
}

$END MRefal.
