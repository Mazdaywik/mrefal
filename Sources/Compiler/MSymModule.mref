$MODULE MSymModule;

/**
  Модуль инкапсулирует работу с sym-файлами: загрузку данных из них, сохранение
на диск.
*/

$IMPORT FileIO = MFileIO;
$IMPORT MConfig = Config::MConfig;
$IMPORT MContext;
$IMPORT MIModule;
$IMPORT MLambda;
$IMPORT MOrder;
$IMPORT MRefal-FE::MParser_Sym;
$IMPORT MQualifiedName;

/*------------------------------------------------------------------------------
  Загрузка символической информации
------------------------------------------------------------------------------*/

/**
  <LoadInfo t.Context t.hErrorList t.ModuleName>
    == t.Context t.hErrorList Success t.IModule
    == t.Context t.hErrorList Fails
  t.ModuleName ::= t.QualifiedName
*/
$ENTRY LoadInfo
  t.Context t.hErrorList t.ModuleName =
    <LoadInfo_New-SwGetName
      t.ModuleName t.hErrorList
      <MContext::GetBackEnd t.Context t.ModuleName SymInfo>
    >;

LoadInfo_New-SwGetName {
  t.ModuleName t.hErrorList t.hContext Success e.FilePath =
    t.hContext
    <LoadInfo_New-SwParseFile
      <MRefal-FE::MParser_Sym::SymModule
        t.hErrorList t.ModuleName e.FilePath
      >
    >;

  t.ModuleName t.hErrorList t.hContext Fails s.Reason =
    <MQualifiedName::Destroy t.ModuleName>
    t.hContext t.hErrorList Fails;
}

LoadInfo_New-SwParseFile {
  t.hErrorList Success Success t.IModule =
    t.hErrorList Success t.IModule;

  t.hErrorList Success Warnings t.IModule =
    t.hErrorList Success t.IModule;

  t.hErrorList Success Errors t.IModule =
    <MIModule::Destroy t.IModule>
    t.hErrorList Fails;

  t.hErrorList Fails =
    t.hErrorList Fails;
}

//------------------------------------------------------------------------------

/**
  <SymReduce-T t.hIModule>
    == t.hIModule t.hISymModule
*/
$ENTRY SymReduce-T
  t.hIModule =
    <SymReduce-ModuleName
      <MIModule::GetModuleName t.hIModule>
    >;

SymReduce-ModuleName
  t.hIModule t.ModuleName =
    <SymReduce-ModuleType
      <MIModule::GetModuleAttribute t.hIModule ModuleType>
      t.ModuleName
    >;

SymReduce-ModuleType {
  t.hIModule Found s.ModuleType t.ModuleName =
    <SymReduce-Imports
      <MLambda::MapReduce
        <MLambda::Composite
          <MLambda::Parallel-H
            <MLambda::Composite
              <MLambda::BindLeft-H
                & MIModule.GetImportAttribute-AliasName RealName
              >
              & MLambda.Bracket-H
            >
            <MLambda::Composite
              <MLambda::BindLeft-H
                & MIModule.GetImportAttribute-AliasName Position
              >
              & MLambda.Bracket-H
            >
            <MLambda::MakeHandled
              & MLambda.Identity
            >
          >
          & MLambda.Bracket-H
        >
        <MIModule::GetImportList-Aliases t.hIModule>
      >
      <MIModule::Create
        t.ModuleName
        (ModuleType s.ModuleType)
      >
    >;

  /*
    Остальные ситуации (ошибки) свидетельствуют о нарушении инварианта.
  */
}

SymReduce-Imports
  t.hIModule e.Imports t.hISymModule Success =
    <SymReduce-Functions
      <MLambda::MapReduce
        <MLambda::Composite
          <MLambda::Parallel-H
            <MLambda::MakeHandled & MLambda.Identity>
            <MLambda::Composite
              <MLambda::BindLeft-H & MIModule.GetFunctionAttribute ScopeClass>
              & MLambda.Bracket-H
            >
            <MLambda::Composite
              <MLambda::BindLeft-H & MIModule.GetFunctionAttribute Position>
              & MLambda.Bracket-H
            >
            <MLambda::Composite
              <MLambda::BindLeft-H & MIModule.GetFunctionAttribute Qualified>
              & MLambda.Bracket-H
            >
          >
          & MLambda.Bracket-H
        >
        <MIModule::GetFunctionList
          t.hIModule
        >
      >
      <MLambda::Reduce
        & AddImport t.hISymModule e.Imports
      >
    >;

AddImport
  t.hISymModule ((Found t.RealName) (Found t.SrcPos) t.AliasName) =
    <UpdateIModule-Guard
      <MIModule::UpdateImport-X
        t.hISymModule
        (Position t.SrcPos)
        (RealName t.RealName)
        (AliasName t.AliasName)
      >
    >;

UpdateIModule-Guard
  t.hISymModule Success = t.hISymModule;

SymReduce-Functions
  t.hIModule e.Functions t.hISymModule =
    t.hIModule
    <MLambda::Reduce
      & AddFunction t.hISymModule e.Functions
    >;

AddFunction {
  t.hISymModule
  (t.FunctionName
    (Found Entry) (Found t.SrcPos) (Found t.QualifiedName)
  ) =
    <UpdateIModule-Guard
      <MIModule::UpdateFunction
        t.hISymModule t.FunctionName
        (ScopeClass Entry)
        (Position t.SrcPos)
        (Qualified t.QualifiedName)
      >
    >;

  t.hISymModule
  (t.FunctionName
    (Found s.ScopeClass)
    (Found t.SrcPos)
    (Found t.QualifiedName)
  ) =
    t.hISymModule;
}

/**
  <SymReduce t.hIModule> == t.hISymModule
*/
$ENTRY SymReduce
  t.hIModule =
    <SymReduce-DeleteIModule
      <SymReduce-T t.hIModule>
    >;

SymReduce-DeleteIModule
  t.hIModule t.hISymModule =
    <MIModule::Destroy t.hIModule>
    t.hISymModule;

/*------------------------------------------------------------------------------
  Сохранение символической информации
------------------------------------------------------------------------------*/

Generate
  t.IModule e.FileName =
    <SaveToFile
      (e.FileName)
      <GenerateLines t.IModule>
    >;

SaveToFile
  (e.FileName) t.IModule e.Lines =
    t.IModule
    <FileIO::Save (e.FileName) e.Lines>;

GenerateLines
  t.IModule =
    <GenerateBorders
      <MIModule::GetModuleName t.IModule>
    >;

GenerateBorders
  t.hIModule t.ModuleName =
    <GenerateBorders-Aux
      t.ModuleName
      <MIModule::GetModuleAttribute t.hIModule ModuleType>
    >;

GenerateBorders-Aux {
  t.ModuleName t.hIModule Found Main =
    <MoveFirstLineToFront
      <GenerateFunctions
        <GetEntryList t.hIModule>
      >
      ('$program ' <MQualifiedName::ToPrintable-Quad t.ModuleName> ';')
      ('$end ' <MQualifiedName::ToPrintable-Quad t.ModuleName> '.')
    >;

  t.ModuleName t.hIModule Found Regular =
    <MoveFirstLineToFront
      <GenerateFunctions
        <GetEntryList t.hIModule>
      >
      ('$module ' <MQualifiedName::ToPrintable-Quad t.ModuleName> ';')
      ('$end ' <MQualifiedName::ToPrintable-Quad t.ModuleName> '.')
    >;
}

StringFromQualified
  t.QualifiedName =
    <StringFromQualified-Aux
      <MQualifiedName::Parse t.QualifiedName>
    >;

StringFromQualified-Aux
  (e.FirstSegment) e.Other =
    <UnBracket
      <MLambda::Reduce
        & AddSegment
        (e.FirstSegment)
        e.Other
      >
    >;

AddSegment
  (e.Segments) (e.NextSegment) =
    (e.Segments '::' e.NextSegment);

UnBracket (e.Expr) = e.Expr;

GetEntryList
  t.IModule =
    <MLambda::MapReduce
      & ToEntry
      <MIModule::GetFunctionList t.IModule>
    >;

ToEntry
  t.IModule t.NextFn =
    <SwToEntry
      t.NextFn
      <MIModule::GetFunctionAttribute
        t.IModule ScopeClass t.NextFn
      >
    >;

SwToEntry {
  t.NextFn t.IModule Found Entry =
    t.IModule t.NextFn;

  t.NextFn t.IModule Found s.OtherScope =
    t.IModule;
}

MoveFirstLineToFront
  t.IModule e.Lines t.FirstLine t.LastLine =
    t.IModule t.FirstLine () e.Lines t.LastLine;

GenerateFunctions
  t.IModule e.Functions =
    <MLambda::MapReduce
      & GenerateImport 
      <MIModule::GetImportList-Aliases t.IModule>
    >
    ()
    <MLambda::Map
      <MLambda::Composite
        & MLambda.UnBracket
        & MQualifiedName.Create
        & TypeFunction
      >
      <MOrder::Sort
        <MLambda::Map
          <MLambda::Composite
            & MQualifiedName.Parse
            & MLambda.Bracket
          >
          e.Functions
        >
      >
    >
    ();

TypeFunction
  t.FnName = ( '$entry ' <MQualifiedName::ToPrintable-Quad t.FnName> ';' );

GenerateImport
  t.IModule t.NextImport =
    <GenerateImport-Aux
      t.NextImport
      <MIModule::GetImportAttribute-AliasName
        t.IModule RealName t.NextImport
      >
    >;

GenerateImport-Aux
  t.LongAlias t.hIModule Found t.RealName =
    <GenerateImport-ShortAlias
      t.RealName
      <MIModule::RelativeName t.hIModule t.LongAlias>
    >;

GenerateImport-ShortAlias
  t.RealName t.hIModule Success t.ShortAlias =
    t.hIModule
    <SwGenerateImport-Aux
      <MQualifiedName::Equals-T t.ShortAlias t.RealName>
    >;

SwGenerateImport-Aux {
  True t.Alias t.RealName =
    ('$import ' <StringFromQualified t.Alias> ';');

  False t.Alias t.RealName =
    ('$import '
      <StringFromQualified t.Alias>
      ' = '
      <StringFromQualified t.RealName>
      ';'
    );
}

/*------------------------------------------------------------------------------
  Регистрация при загрузке модуля.
------------------------------------------------------------------------------*/

$ENTRY Register
  t.Config (e.Directory) (e.Ext) =
    <MConfig::RegisterBackEnd
      t.Config
      SymInfo
      & Generate
      & Link
      (e.Directory) (e.Ext)
    >;

Link (e.OutName) e.Modules = Success; // Не линкуем.

$END MSymModule.
