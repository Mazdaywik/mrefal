$MODULE MConfig;

//------------------------------------------------------------------------------

$IMPORT MContext;
$IMPORT MCreateDirIfNeed;
$IMPORT MLambda;
$IMPORT MQualifiedName;

//------------------------------------------------------------------------------

$DATA Config;

/*
  Внутреннее представление
  [Config t.Option*]

  t.Option := t.MP-Option | t.BackEndOption | t.FrontEndOption
    | t.MakeModeOption

  t.MP-Option := (ModulePath (e.Folder)*)

  t.BackEndOption :=
    (BackEnd
      s.Name
      (Generator t.FnGenerator)
      (Linker t.FnLinker)
      (Folder e.Folder) (Ext e.Ext)
    )

  s.Name ::= IDENTIFIER -- имя диспетчера
  t.FnGenerator ::= { t.IModule e.FileName = t.IModule }
  <t.FnLinker t.hContext (e.OutName) (t.ModuleName e.ObjName)*>
    == t.hContext Success
    == t.hContext Fails
  e.Folder -- имя папки
  e.Ext -- расширение файла

  t.FrontEndOption :=
    (FrontEnd
      s.FEName
      (FnParser t.FnParser)
      (Ext e.Ext)
    )

  s.FEName ::= IDENTIFIER -- Имя
  t.FnParser ::= {
    t.ErrorList t.QualifiedName e.FileName =
      t.ErrorList Success s.Result t.IModule;
  
    t.ErrorList t.QualifiedName e.FileName =
      t.ErrorList Fails;
  }
  s.Result ::= Success | Warnings | Errors
  e.Ext -- Расширение файлов исходного текста
    Функция s.FnParser может предполагать, что файл с заданным именем
  существует.

  t.MakeModeOptions ::= (Mode s.Mode)
  s.Mode ::= Make | Build | LinkOnly
*/

//------------------------------------------------------------------------------

/**
  <Create e.ModulePath>
    == t.Config
  e.ModulePath = (e.PathToFolder)*
*/
$ENTRY Create
  e.ModulePath =
    [Config (ModulePath e.ModulePath)];

//------------------------------------------------------------------------------

/**
  <GetModulePath t.Config> == e.ModulePath
*/
$ENTRY GetModulePath
  [Config e.Opt-B (ModulePath e.ModulePath) e.Opt-E] =
    e.ModulePath;

//==============================================================================

/**
  <SetMakeMode t.Config s.Mode>
    == t.Config

  s.Mode ::= Make | Build | LinkOnly
*/
$ENTRY SetMakeMode {
  [Config e.Options] Make =
    [Config e.Options (Mode Make)];

  [Config e.Options] Build =
    [Config e.Options (Mode Build)];

  [Config e.Options] LinkOnly =
    [Config e.Options (Mode LinkOnly)];
}

//------------------------------------------------------------------------------

/**
  <GetMakeMode t.Config> == s.Mode

  s.Mode == Make | Build | LinkOnly
*/
$ENTRY GetMakeMode
  [Config e.Optinons-B (Mode s.Mode) e.Options-E] =
    s.Mode;

//==============================================================================

/**
  <RegisterBackEnd
    t.Config s.Name t.FnGenerator t.FnLinker (e.Folder) (e.Ext)
  >
    == t.Config
  s.Name ::= IDENTIFIER -- имя диспетчера
  t.FnGenerator ::= { t.IModule e.FileName = t.IModule }
  <t.FnLinker t.hContext (e.OutName) (t.ModuleName e.ObjName)*>
    == t.hContext Success
    == t.hContext Fails
  e.Folder -- имя папки
  e.Ext -- расширение файла
*/
$ENTRY RegisterBackEnd {
  [Config e.Options-B (BackEnd s.Name e.Options) e.Options-E]
  s.Name t.FnGenerator t.FnLinker (e.Folder) (e.Ext) =
    [Config
      e.Options-B
      (BackEnd
        s.Name
        (Generator t.FnGenerator)
        (Linker t.FnLinker)
        (Folder e.Folder) (Ext e.Ext)
      )
      e.Options-E
    ];

  [Config e.Options]
  s.Name t.FnGenerator t.FnLinker (e.Folder) (e.Ext) =
    [Config
      e.Options
      (BackEnd
        s.Name
        (Generator t.FnGenerator)
        (Linker t.FnLinker)
        (Folder e.Folder) (Ext e.Ext)
      )
    ];

}


//------------------------------------------------------------------------------

/**
  <Generate t.Config t.hContext t.hIModule t.ModuleName>
    == t.hContext t.hIModule Success
    == t.hContext t.hIModule Fails
*/
$ENTRY Generate
  [Config e.Options] t.hContext t.hIModule t.ModuleName =
    <DoGenerate
      Success t.hContext t.hIModule t.ModuleName
      <MLambda::Map & GetFnCompiler e.Options>
    >;

GetFnCompiler {
  (BackEnd s.Name (Generator t.FnGenerator) e.OtherOptions) =
    (s.Name t.FnGenerator);

  t.OtherOption = ;
}

DoGenerate {
  Fails t.hContext t.hIModule t.ModuleName e.Tail =
    t.hContext t.hIModule Fails;

  Success t.hContext t.hIModule t.ModuleName
  (s.BackEnd t.FnGenerator) e.Tail =
    <DoGenerate
      <GenerateBy
        t.hContext t.hIModule t.ModuleName s.BackEnd t.FnGenerator
      >
      e.Tail
    >;

  Success t.hContext t.hIModule t.ModuleName =
    t.hContext t.hIModule Success;
}

GenerateBy
  t.hContext t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    <GenerateBy-Aux
      <MContext::GetBackEnd t.hContext t.ModuleName s.BackEndName>
      t.hIModule t.ModuleName s.BackEndName t.FnGenerator
    >;

GenerateBy-Aux {
  t.hContext Success e.FileName
  t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    Success t.hContext
    <MLambda::Apply
      t.FnGenerator
      t.hIModule
      <MCreateDirIfNeed::CreatePathToFile e.FileName>
    >
    t.ModuleName;

  t.hContext Fails ModuleNotFound
  t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    Fails t.hContext t.hIModule t.ModuleName;

  t.hContext Fails MismatchCase
  t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    Fails t.hContext t.hIModule t.ModuleName;
}


//------------------------------------------------------------------------------

/**
  <Link t.Config t.hContext (e.OutName) e.OrderedFiles>
    == t.hContext Success
    == t.hContext Fails
  e.OrderedFiles ::= t.ModuleName*
*/
$ENTRY Link
  [Config e.Options] t.hContext (e.OutName) e.OrderedFiles =
    <DoLink
      t.hContext Success (e.OutName) (e.OrderedFiles)
      <MLambda::Map & GetLinker e.Options>
    >;

GetLinker {
  (BackEnd s.BackEnd t.Generator (Linker t.FnLinker) e.OtherOptions) =
    (s.BackEnd t.FnLinker);

  t.OtherOption = ;
}

DoLink {
  t.hContext Fails (e.OutName) (e.OrderedFiles) e.Tail =
    t.hContext Fails;

  t.hContext Success (e.OutName) (e.OrderedFiles) =
    t.hContext Success;

  t.hContext Success (e.OutName) (e.OrderedFiles)
  (s.BackEnd t.FnLinker) e.Tail =
    <DoLink
      <MLambda::Apply
        t.FnLinker
        <SwapFirsts
          (e.OutName)
          <MLambda::MapReduce
            <MLambda::BindLeft & MakeObjName s.BackEnd>
            t.hContext e.OrderedFiles
          >
        >
      >
      (e.OutName) (e.OrderedFiles) e.Tail
    >;
}

SwapFirsts
  t.First t.Second e.Tail = t.Second t.First e.Tail;

MakeObjName
  s.L-BackEnd t.hContext t.ModuleName =
    <MakeObjName-Aux
      t.ModuleName
      <MContext::GetBackEnd t.hContext t.ModuleName s.L-BackEnd>
    >;

MakeObjName-Aux
  t.ModuleName t.hContext Success e.Path =
    t.hContext (t.ModuleName e.Path);

//------------------------------------------------------------------------------

/**
  <GetBackEndList t.Config> == e.BackEndName
*/
$ENTRY GetBackEndList
  [Config e.Options] =
    <MLambda::Map & BackEnds e.Options>;

BackEnds {
  (BackEnd s.Name e.Options) = s.Name;

  t.OtherOption = ;
}

//------------------------------------------------------------------------------

/**
  <GetBEPath-T t.Config s.BEName t.ModuleName e.BaseFolder>
    == Success e.OutPath
    == Fails
*/
$ENTRY GetBEPath-T
  [Config e.Options] s.BEName t.ModuleName e.BaseFolder =
    <GetBEPath-T-Aux
      ( <MQualifiedName::ToRelativeFSPath t.ModuleName> )
      ( e.BaseFolder )
      s.BEName <MLambda::Map & GetFolderExt e.Options>
    >;

GetFolderExt {
  (BackEnd s.BackEnd e.Options (Folder e.Folder) (Ext e.Ext)) =
    (s.BackEnd (e.Folder) e.Ext);

  t.OtherOption = ;
}

GetBEPath-T-Aux {
  ( e.RelativePath ) ( Current )
  s.BackEnd e.BackEnds-B (s.BackEnd (e.Folder) e.Ext) e.BackEnds-E =
    Success e.Folder '/' e.RelativePath '.' e.Ext;

  ( e.RelativePath ) ( e.BaseFolder )
  s.BackEnd e.BackEnds-B (s.BackEnd (e.Folder) e.Ext) e.BackEnds-E =
    Success e.BaseFolder '/' e.Folder '/' e.RelativePath '.' e.Ext;

  ( e.RelativePath ) ( e.BaseFolder )
  s.BackEnd e.BackEnds =
    Fails;
}


//==============================================================================

/**
  <RegisterFrontEnd
    t.Config s.Name t.FnParser (e.Ext)
  >
    == t.Config
*/
$ENTRY RegisterFrontEnd {
  [Config e.Options-B (FrontEnd s.Name e.Options) e.Options-E]
  s.Name t.FnParser (e.Ext) =
    [Config
      e.Options-B
      (FrontEnd s.Name (FnParser t.FnParser) (Ext e.Ext))
      e.Options-E
    ];

  [Config e.Options]
  s.Name t.FnParser (e.Ext) =
    [Config
      e.Options
      (FrontEnd s.Name (FnParser t.FnParser) (Ext e.Ext))
    ];
}

//------------------------------------------------------------------------------


/**
  <GetPath-T t.Config t.ModuleName e.BaseFolder>
    == Success e.FilePath
    == Fails
*/
$ENTRY GetFEPath-T {
  [Config
    e.Options-B
    (FrontEnd s.Name (FnParser t.Parser) (Ext e.Ext))
    e.Options-E
  ]
  s.Name t.ModuleName e.BaseFolder =
    <GetFEPath-T-Aux
      ( <MQualifiedName::ToRelativeFSPath t.ModuleName> )
      ( e.Ext ) e.BaseFolder
    >;

  [Config e.Options] s.Name t.ModuleName e.BaseFolder =
    Fails;
}

GetFEPath-T-Aux {
  (e.Relative) (e.Ext) Current = Success e.Relative '.' e.Ext;

  (e.Relative) (e.Ext) e.BaseFolder =
    Success e.BaseFolder '/' e.Relative '.' e.Ext;
}  

//------------------------------------------------------------------------------

/**
  <Load t.Config s.FEName t.hErrorList t.ModuleName e.PathToFile>
    == t.hErrorList Success s.Result t.hIModule
    == t.hErrorList Fails
  s.Result ::= Success | Warnings | Errors
*/
$ENTRY Load {
  [Config
    e.Options-B (FrontEnd s.Name (FnParser t.FnParser) t.Ext) e.Options-E
  ]
  s.Name t.hErrorList t.ModuleName e.FilePath =
    <MLambda::Apply
      t.FnParser t.hErrorList t.ModuleName e.FilePath
    >;

  [Config e.Options]
  s.Name t.hErrorList t.ModuleName e.FilePath =
    Fails t.hErrorList;
}

//------------------------------------------------------------------------------

/**
  <GetFrontEndList t.Config> == e.FrontEndNames
*/
$ENTRY GetFrontEndList
  [Config e.Options] =
    <MLambda::Map & FE-Name e.Options>;

FE-Name {
  (FrontEnd s.Name e.Options) = s.Name;

  t.OtherOption = ;
}

//------------------------------------------------------------------------------

/**
  <GetFrontEndExt t.Config s.FrontEnd> == e.Ext
*/
$ENTRY GetFrontEndExt {
  [Config
    e.Options-B (FrontEnd s.Name t.FnParser (Ext e.Ext)) e.Options-E
  ]
  s.Name =
    e.Ext;

  // отсутствие не проверяем
}

$END MConfig.
