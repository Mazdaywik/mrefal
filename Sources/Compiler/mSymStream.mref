$MODULE MSymStream;

/**
  ** Описание абстрактного типа данных "Символьный поток" SymStream **
  Определены операции:

  <Create e.FileName> == t.SymStream
  создаёт новый поток;

  <NextChar t.SymStream> == t.SymStream s.Char
  возвращает следующий символ из потока, CrLf в случае перехода на новую
строку, EOF в случае конца файла;

  <Destroy t.SymStream> == empty
  закрывает поток;
  
  <UnGetChar t.SymStream s.Char> == t.SymStream
  возвращает символ обратно в поток, при необходимости корректируется номер
строки;

  <ExtractFromSet (e.Set) t.SymStream>
    == s.Char t.SymStream //Если символ из набора.
    == t.SymStream //Если символ не из набора.
  извлекает из потока символ из заданного набора; во втором случае символ
возвращается в поток;

  <ExtractsFromSet (e.Set) t.SymStream>
    == t.SymStream e.Chars
  аналогично ExtractFromSet, но возвращает последовательность символов из
заданного набора (которая может быть и пустой).

  <ExtractsFromSet-N (e.Set) t.SymStream s.NChars>
    == t.SymStream e.Chars
  аналогично ExtractsFromSet, но возвращает последовательность символов из
заданного набора (которая может быть и пустой), причём её длина не может быть
более s.NChars символов.
*/

/*
  Внутреннее устройство:
  [SymStream s.LineNumber t.FInput (e.FileName) e.BufferedChars]
  Символы e.BufferedChars в порядке чтения располагаются слева направо.
*/

$IMPORT FileIO;
$IMPORT Math;
$IMPORT MSelfDiag;
$IMPORT MSrcPos;
$IMPORT MStrings;

$DATA SymStream;

$ENTRY Create {
  e.FileName =
    [SymStream 1 <FileIO::Open 'r' e.FileName> (e.FileName)];
}

$ENTRY NextChar {
  [SymStream 1 t.FInput (e.FileName)] =
    <NextChar-CheckUTF-8
      <CheckEnd (e.FileName) <FileIO::ReadLine t.FInput>>
    >;

  [SymStream s.LineNumber t.FInput (e.FileName)] =
    <NextChar
      [SymStream
        s.LineNumber
        <CheckEnd (e.FileName) <FileIO::ReadLine t.FInput>>
      ]
    >;

  [SymStream s.LineNumber t.FInput (e.FileName) CrLf e.Buffered] =
    [SymStream s.LineNumber t.FInput (e.FileName) AfterCrLf e.Buffered] CrLf;

  [SymStream s.LineNumber t.FInput (e.FileName) AfterCrLf e.Buffered] =
    <NextChar
      [SymStream <Math::Inc s.LineNumber> t.FInput (e.FileName) e.Buffered]
    >;

  [SymStream s.LineNumber t.FInput (e.FileName) EOF] =
    [SymStream s.LineNumber t.FInput (e.FileName) EOF] EOF;

  [SymStream s.LineNumber t.FInput (e.FileName) s.Next e.Buffered] =
    [SymStream s.LineNumber t.FInput (e.FileName) e.Buffered] s.Next;
}

CheckEnd {
  (e.FileName) t.FInput e.Line 0 = t.FInput (e.FileName) e.Line EOF;
  (e.FileName) t.FInput e.Line = t.FInput (e.FileName) e.Line CrLf;
}

NextChar-CheckUTF-8 {
  t.FInput (e.FileName) s.BOM1 s.BOM2 s.BOM3 s.Next e.Tail =
    <SwNextChar-CheckUTF-8
      t.FInput (e.FileName)
      <MStrings::Ord s.BOM1 s.BOM2 s.BOM3>
      s.BOM1 s.BOM2 s.BOM3 s.Next e.Tail
    >;

  t.FInput (e.FileName) e.OtherLine =
    <NextChar-Init t.FInput (e.FileName) e.OtherLine>;
}

NextChar-Init
  t.FInput (e.FileName) e.Buffer =
    <NextChar [SymStream 1 t.FInput (e.FileName) e.Buffer]>;

SwNextChar-CheckUTF-8 {
  t.FInput (e.FileName) 239 187 191 s.BOM1 s.BOM2 s.BOM3 e.Tail =
    <NextChar-Init t.FInput (e.FileName) e.Tail>;

  t.FInput (e.FileName) s.Num1 s.Num2 s.Num3 e.Tail =
    <NextChar-Init t.FInput (e.FileName) e.Tail>;
}

$ENTRY Destroy
  [SymStream s.LineNumber t.FInput (e.FileName) e.Buffered] =
    <FileIO::Close t.FInput>;

$ENTRY GetSrcPos
  [SymStream s.LineNumber t.FInput (e.FileName) e.Buffered] =
    [SymStream s.LineNumber t.FInput (e.FileName) e.Buffered]
    <MSrcPos::Create-FilePos s.LineNumber e.FileName>;

$ENTRY ReturnChar {
  [SymStream s.LineNumber t.FInput (e.FileName) EOF] EOF =
    [SymStream s.LineNumber t.FInput (e.FileName) EOF];

  [SymStream s.LineNumber t.FInput (e.FileName) e.Buffered] EOF =
    <MSelfDiag::Error 'Can\'t return EOF to not finalized stream'>;

  [SymStream s.LineNumber t.FInput (e.FileName) AfterCrLf e.Buffered] CrLf =
    [SymStream s.LineNumber t.FInput (e.FileName) CrLf e.Buffered];

  [SymStream s.LineNumber t.FInput (e.FileName) e.Buffered] CrLf =
    [SymStream <Math::Dec s.LineNumber> t.FInput (e.FileName) CrLf e.Buffered];

  [SymStream s.LineNumber t.FInput (e.FileName) e.Buffered] s.Char =
    [SymStream s.LineNumber t.FInput (e.FileName) s.Char e.Buffered];
}

$ENTRY ExtractFromSet {
  t.SymStream (e.Set) =
    <SwExtractFromSet
      (e.Set) <NextChar t.SymStream>
    >;
}

SwExtractFromSet {
  (e.Set-B s.Char e.Set-E) t.SymStream s.Char =
    t.SymStream s.Char;
  (e.Set) t.SymStream s.Char =
    <ReturnChar t.SymStream s.Char>;
}

$ENTRY ExtractsFromSet
  t.SymStream (e.Set) =
    <ExtractsFromSet-N t.SymStream (e.Set) Unlim>;

$ENTRY ExtractsFromSet-N {
  t.SymStream (e.Set) 0 = t.SymStream;

  t.SymStream (e.Set) s.NChars =
    <DoExtractsFromSet-N
      ( /*Extracted*/ ) (e.Set) s.NChars <NextChar t.SymStream>
    >;
}

DoExtractsFromSet-N {
  (e.Extracted) (e.Set-B s.Char e.Set-E)
  1 t.SymStream s.Char =
    t.SymStream e.Extracted;

  (e.Extracted) (e.Set-B s.Char e.Set-E)
  s.NChars t.SymStream s.Char =
    <DoExtractsFromSet-N
      (e.Extracted s.Char)
      (e.Set-B s.Char e.Set-E)
      <Dec s.NChars>
      <NextChar t.SymStream>
    >;

  (e.Extracted) (e.Set) s.NChars t.SymStream s.OtherChar =
    <ReturnChar t.SymStream s.OtherChar> e.Extracted;
}

Dec {
  Unlim = Unlim; s.Num = <Math::Dec s.Num>;
}

$END MSymStream.
