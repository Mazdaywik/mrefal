$MODULE Std::Types;

/**=============================================================================
  Модуль предоставляет средства для работы с типами атомов: запрос типа,
  преобразование типов.

  Функции преобразования предполагают что задан корректный аргумент, иначе
  падают с ошибкой.
==============================================================================*/

//$IMPORT Chains = Std::Chains;
$IMPORT CorePr = Std::CorePr::Types;
$IMPORT MLambda = Std::MLambda;
$IMPORT Math = Std::Math;

/**
  Функция запроса типа первого атома выражения
  <Type-T e.Expr>
    == s.Type e.Expr
    == Empty // если выражение пустое

  s.Type ::=
    // типы атомов
    Handle | Identifier | Function | Char | Number |
    // типы составных термов
    Bracket | ADT
*/
$ENTRY Type-T {
  s.Atom e.Tail = <CorePr::AtomType s.Atom> s.Atom e.Tail>;

  (e.Brackets) e.Tail = Brackets (e.Brackets) e.Tail;

  // Как атом и как скобки распознать не можем -- АТД
  t.ADT e.Tail = ADT t.ADT e.Tail;

  = Empty;
}

/**
  <CharFromInt s.Codepage s.Int> == s.Char
*/
$ENTRY CharFromInt
  s.Codepage s.Int = <CorePr::CharFromInt s.Codepage s.Int>;

/**
  <IntFromChar s.Codepage s.Char> == s.Int
*/
$ENTRY IntFromChar
  s.Codepage s.Char = <CorePr::IntFromChar s.Codepage s.Char>;

/**
  Преобразование атома в некоторое строковое представление.
  Непереносимо между разными профилями компиляции.
  <StrFromAtom s.Atom> == e.String
*/
$ENTRY StrFromAtom
  s.Atom = <CorePr::StrFromAtom s.Atom>;

/**
  <StrFromInt s.Base s.Int> == e.Number
  s.Base ::= 2..36
*/
$ENTRY StrFromInt {
  s.Base 0 = '0';

  s.Base s.Int =
    <DoStrFromInt s.Base <Math::DivMod s.Int s.Base>>;
}

DoStrFromInt {
  s.Base 0 s.Mod =
    <CorePr::CharFromDigit s.Mod>;

  s.Base s.Div s.Mod =
    <DoStrFromInt s.Base <Math::DivMod s.Div s.Base>>
    <CorePR::CharFromDigit s.Mod>;
}

/**
  <IntFromStr s.Base e.Number> == s.Int
*/
$ENTRY IntFromStr {
  s.Base e.Number =
    <IntFromStr-Aux
      s.Base
      <MLambda::Map
        <MLambda::BindLeft & ConvertNumber s.Base>
        e.Number
      >
    >;
}

ConvertNumber
  s.Base s.Char =
    <ConvertNumber-Aux s.Base <CorePR::DigitFromChar s.Char>>;

ConvertNumber-Aux
  s.Base s.Number =
    <SwConvertNumber-Aux <Math::Compare-T s.Base s.Number>>;

SwConvertNumber-Aux {
  '>' s.Base s.Number = s.Number;

  // ЗДЕСЬ ОШИБКА
}

IntFromStr-Aux
  s.Base e.Numbers =
    <MLambda::Reduce-R
      <MLambda::BindLeft & MulAdd s.Base>
      0
      e.Numbers
    >;

MulAdd
  s.Base s.Accum s.NextDigit =
    <Math::Add <Math::Mul s.Base s.Accum> s.NextDigit>;

/**
  <IntFromStr-Check s.Base e.Text>
    == Success s.Number e.Tail,
      <StrFromInt s.Base s.Number> e.Tail: e.Text
    == Fails e.Text
*/
$ENTRY IntFromStr-Check
  s.Base e.Text =
    <IntFromStr-Check-DoParseInt
      s.Base () e.Text
    >;

IntFromStr-Check-DoParseInt {
  s.Base (e.Scanned) =
    Success <IntFromStr s.Base e.Scanned>;

  s.Base (e.Scanned) s.Next e.Tail =
    <IntFromStr-Check-DoParseInt-SwValidNumber
      <CorePr::ValidDigit s.Base s.Next>
      s.Base (e.Scanned) s.Next e.Tail
    >;
}

IntFromStr-Check-DoParseInt-SwValidNumber {
  ValidDigit s.Base (e.Scanned) s.Next e.Tail =
    <IntFromStr-Check-DoParseInt
      s.Base (e.Scanned s.Next) e.Tail
    >;

  InvalidDigit s.Base (/* пусто */) s.Next e.Tail =
    Fails s.Next e.Tail;

  InvalidDigit s.Base (e.Scanned) s.Next e.Tail =
    Success <IntFromStr s.Base e.Scanned> s.Next e.Tail;
}

$END Std::Types.
