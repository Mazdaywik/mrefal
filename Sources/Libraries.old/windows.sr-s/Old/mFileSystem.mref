$MODULE Old::MFileSystem;

$IMPORT MRefalRTS;

$IMPORT Core::MFileSystem;
$IMPORT MLambda = Old::MLambda;
$IMPORT MOS = Old::MOS;
$IMPORT MSelfDiag = Old::MSelfDiag;
$IMPORT MStrings = Old::MStrings;

/**
  Путь может быть представлен двумя способами: как обычная строка s.Char*,
  так и в специальном формате. Для представления путей в первой форме будет
  использоваться префикс Str, для вторых -- Pt.

  e.StrFileName = s.Char*

  e.PtFileName ::=
    t.RootMode (e.Segment)*
  e.Segment ::= s.Char*
  t.RootMode ::=
    (Relative)              // Dir\File
    (Relative-Disk s.Disk)  // C:Dir\File
    (Absolut)               // \Dir\File
    (Absolut-Disk s.Disk)   // C:\Dir\File
    (Absolut-Net e.Server)  // \\Server\Dir\File
*/

//------------------------------------------------------------------------------

/**
  <StrFromPath e.PtFileName> == e.StrFileName
*/
$ENTRY StrFromPath {
  (Relative) = '.';

  t.RootMode e.Segments =
    <StrRootMode t.RootMode> <StrSegments e.Segments>;
}

StrRootMode {
  (Relative) = /* пусто */;

  (Relative-Disk s.Disk) = s.Disk ':';

  (Absolut) = '\\';

  (Absolut-Disk s.Disk) = s.Disk ':\\';

  (Absolut-Net e.Server) = '\\\\' e.Server '\\';
}

StrSegments {
  /* пусто */ = ;

  (e.Segment) = e.Segment;

  (e.Segment) e.Tail = e.Segment '\\' <StrSegments e.Tail>;
}

//------------------------------------------------------------------------------

/**
  <PathFromStr e.StrFileName>
    == Success e.PtFileName
    == Fails
*/
$ENTRY PathFromStr {
  '.' = Success (Relative);

  s.Disk ':' e.Tail =
    <PathFromStr-CheckDisk
      (
        ('Aa')('Bb')('Cc')('Dd')('Ee')
        ('Ff')('Gg')('Hh')('Ii')('Jj')
        ('Kk')('Ll')('Mm')('Nn')('Oo')
        ('Pp')('Qq')('Rr')('Ss')('Tt')
        ('Uu')('Vv')('Ww')('Xx')('Yy')('Zz')
      )
      s.Disk e.Tail
    >;

  '\\' e.Tail = <PathFromStr-Slash e.Tail>;

  '/' e.Tail = <PathFromStr-Slash e.Tail>;

  e.Tail = <PathFromStr-Tail (Relative) e.Tail>;
}

PathFromStr-CheckDisk {
  (e.Letters-B (s.Capital s.Small) e.Letters-E) s.Capital e.Tail =
    <PathFromStr-Disk-Aux s.Capital e.Tail>;

  (e.Letters-B (s.Capital s.Small) e.Letters-E) s.Small e.Tail =
    <PathFromStr-Disk-Aux s.Capital e.Tail>;

  (e.Letter) s.Disk e.Tail = Fails;
}

PathFromStr-Disk-Aux {
  s.Disk '\\' e.Tail = <PathFromStr-Tail (Absolut-Disk s.Disk) e.Tail>;

  s.Disk '/' e.Tail = <PathFromStr-Tail (Absolut-Disk s.Disk) e.Tail>;

  s.Disk e.Tail = <PathFromStr-Tail (Relative-Disk s.Disk) e.Tail>;
}

PathFromStr-Slash {
  '\\' e.Tail = <PathFromStr-Net e.Tail>;

  '/' e.Tail = <PathFromStr-Net e.Tail>;

  e.Tail = <PathFromStr-Tail e.Tail>;
}

PathFromStr-Net {
  ' ' e.Tail = Fails;

  e.Tail =
    <PathFromStr-Net-FindServer (<InvalidServerName>) () e.Tail>;
}

InvalidServerName = '\t\"/\\[]:|<>+=;,?*' <NotPrintable>;

PathFromStr-Net-FindServer {
  (e.Invalid) (e.Server ' ') '\\' e.Tail = Fails;

  (e.Invalid) (e.Server ' ') '/' e.Tail = Fails;

  (e.Invalid) (e.Server) '\\' e.Tail =
    <PathFromStr-Tail (Absolut-Net e.Server) e.Tail>;

  (e.Invalid) (e.Server) '/' e.Tail =
    <PathFromStr-Tail (Absolut-Net e.Server) e.Tail>;

  (e.Invalid-B s.Char e.Invalid-E) (e.Server) s.Char e.Tail = Fails;

  (e.Invalid) (e.Server) s.Char e.Tail =
    <PathFromStr-Net-FindServer (e.Invalid) (e.Server s.Char) e.Tail>;

  (e.Invalid) (e.Server) = Fails;
}

NotPrintable = <MStrings::Chr <MStrings::Seq 0 31>>;

PathFromStr-Tail {
  t.Root e.Tail =
    <DoPathFromStr-Tail
      ( <InvalidChars> )
      t.Root ( /* сегменты */ ) ( /* просканировано */ )
      <BackSlash e.Tail>
    >;
}

InvalidChars = ':*?\"<>|' <NotPrintable>;

DoPathFromStr-Tail {
  (e.Invalid-B s.Invalid e.Invalid-E)
  t.Root (e.Segments) (e.Scanned) s.Invalid e.Tail =
    Fails;

  (e.Invalid)
  t.Root (e.Segments) ('..') '\\' e.Tail =
    <DoPathFromStr-Tail
      (e.Invalid) t.Root (e.Segments ('..')) () e.Tail
    >;

  (e.Invalid)
  t.Root (e.Segments) (e.Scanned '.') '\\' e.Tail =
    Fails;

  (e.Invalid)
  t.Root (e.Segments) (e.Scanned ' ') '\\' e.Tail =
    Fails;

  (e.Invalid)
  t.Root (e.Segments) (e.Scanned) '\\' =
    Fails;

  (e.Invalid)
  t.Root (e.Segments) () '\\' e.Tail =
    Fails;

  (e.Invalid)
  t.Root (e.Segments) (e.Scanned) '\\' e.Tail =
    <DoPathFromStr-Tail
      (e.Invalid)
      t.Root (e.Segments (e.Scanned)) () e.Tail
    >;

  (e.Invalid)
  t.Root (e.Segments) (e.Scanned) s.Next e.Tail =
    <DoPathFromStr-Tail
      (e.Invalid)
      t.Root (e.Segments) (e.Scanned s.Next) e.Tail
    >;

  (e.Invalid)
  t.Root (e.Segments) (e.Scanned) =
    Success t.Root e.Segments (e.Scanned);
}

//------------------------------------------------------------------------------

/**
  <ConcatPath (e.PtDirectory) e.PtFileName>
    == Success e.PtFileName
    == Fails
*/
$ENTRY ConcatPath {
  (e.Path) (Relative) e.SubPath = Success e.Path e.SubPath;

  ((Relative-Disk s.Disk) e.Path) (Relative-Disk s.Disk) e.SubPath =
    Success (Relative-Disk s.Disk) e.Path e.SubPath;

  ((Absolut-Disk s.Disk) e.Path) (Relative-Disk s.Disk) e.SubPath =
    Success (Absolut-Disk s.Disk) e.Path e.SubPath;

  (e.Path1) e.Path2 = Fails;
}

//------------------------------------------------------------------------------

/**
  <ExistFile e.StrFileName> == True | False
*/
$ENTRY ExistFile e.StrFileName = <MRefalRTS::ExistFile e.StrFileName>;

//------------------------------------------------------------------------------

/**
  <ExistFile-T e.StrFileName>
    == True e.StrFileName
    == False e.StrFileName
*/
$ENTRY ExistFile-T
  e.StrFileName = <MRefalRTS::ExistFile e.StrFileName> e.StrFileName;

//------------------------------------------------------------------------------

/**
  <BackSlash e.StrFileName-B '/' e.StrFileName-E> == e.StrFileName-B '\\' e.StrFileName-E
  <BackSlash e.StrFileName> == e.StrFileName
*/
$ENTRY BackSlash {
  e.Begin '/' e.End = e.Begin '\\' <BackSlash e.End>;

  e.Path = e.Path;
}

//------------------------------------------------------------------------------

/**
  <MakeDir e.StrDirectory> == empty
*/
$ENTRY MakeDir
  e.Directory =
    <MOS::System 'mkdir ' <Quoting e.Directory> ' 1>nul 2>nul'>;

//------------------------------------------------------------------------------

/**
  <FileAttribute s.Attribute e.StrFileName>
    == FileNotFound
    == (e.Value)

  s.Attribute ::= DateTime | Size | LongName
*/
$ENTRY FileAttribute
  s.Attribute e.FileName =
    <SwFileAttribute
      s.Attribute
      <Core::MFileSystem::GetFileAttributes e.FileName>
    >;

SwFileAttribute {
  s.Attribute Fails = FileNotFound;

  DateTime Success
  e.Attribs-B (DateTime e.Value) e.Attribs-E =
    (e.Value);
}

//------------------------------------------------------------------------------

/**
  <DirList e.StrDirectoryName>
    == Success (e.StrFileName)*
    == Fails
*/
$ENTRY DirList
  e.DirectoryName =
    /*
      Пути возвращаются относительно папки e.DirectoryName.
      Надо переписать.
    */
    <Core::MFileSystem::DirList e.DirectoryName>;

//------------------------------------------------------------------------------

Quoting {
  e.Mask-B ' ' e.Mask-E = '"' e.Mask-B ' ' e.Mask-E '"';

  e.Mask = e.Mask;
}

//------------------------------------------------------------------------------

/**
  <ParseFileName e.StrFileName>
    == (e.StrDirectory) e.FileNameNoExt (e.Ext)
  Пример:
  <ParseFileName 'c:\\Directory\\Document.doc'>
    == ('c;\\Directory\\') 'Document' ('doc')
*/
$ENTRY ParseFileName
  e.FileName =
    <DoParseExt e.FileName ()>;

DoParseExt {
  e.FileName '.' (e.Ext) =
    <DoParseDirectory (e.FileName)> (e.Ext);

  // Файл без расширения
  e.FileName '/' (e.Ext) =
    (e.FileName '/') e.Ext ();

  e.FileName '\\' (e.Ext) =
    (e.FileName '\\') e.Ext ();

  e.FileName ':' (e.Ext) =
    (e.FileName ':') e.Ext ();

  (e.Ext) =
    () e.Ext ();

  // Добавляем символ к расширению
  e.FileName s.Next (e.Ext) =
    <DoParseExt e.FileName (s.Next e.Ext)>;
}

DoParseDirectory {
  (e.Directory '/') e.Name =
    (e.Directory '/') e.Name;

  (e.Directory '\\') e.Name =
    (e.Directory '\\') e.Name;

  (e.Directory ':') e.Name =
    (e.Directory ':') e.Name;

  () e.Name = () e.Name;

  (e.Directory s.Next) e.Name =
    <DoParseDirectory (e.Directory) s.Next e.Name>;
}

//------------------------------------------------------------------------------

/**
  <CanonicalPath-Str e.StrPath>
    == e.StrCanonical
*/
$ENTRY CanonicalPath
  e.Path = <MLambda::Map & CanonicalChar e.Path>;

CanonicalChar {
  '\\' = '/';
  s.Other = <MStrings::Lower s.Other>;
}

/**
  <CanonicalPath-Pt e.PtPath>
    == e.PtCanonical
*/
$ENTRY CanonicalPath-Pt
  t.PathType e.Path =
    t.PathType
    <MLambda::Map
      <MLambda::Composite
        & MLambda.UnBracket
        <MLambda::BindLeft & MLambda.Map & MStrings.Lower>
        & MLambda.Bracket
      >
      e.Path
    >;

$END Old::MFileSystem.
