
// Расширения библиотеки и функции, реализуемые
// средствами самого Простого Рефала

$ENTRY Apply {
  s.Fn e.Argument = <s.Fn e.Argument>;

  (t.Closure e.Bounded) e.Argument =
    <Apply t.Closure e.Bounded e.Argument>;
}

$ENTRY Map {
  t.Fn t.Next e.Tail = <Apply t.Fn t.Next> <Map t.Fn e.Tail>;

  t.Fn = ;
}

$ENTRY Reduce {
  t.Fn t.Acc t.Next e.Tail =
    <Reduce
      t.Fn <Apply t.Fn t.Acc t.Next> e.Tail
    >;

  t.Fn t.Acc = t.Acc;
}

$ENTRY Fetch {
  e.Argument t.Function =
    <Apply t.Function e.Argument>;
}

$ENTRY Y {
  s.Y-Func = { e.Arg = <<s.Y-Func <Y s.Y-Func>> e.Arg>; };
}

$FORWARD DoMapReduce;

$ENTRY MapReduce {
  t.Fn t.Acc e.Tail =
    <DoMapReduce t.Fn t.Acc () e.Tail>;
}

$FORWARD MapReduce--AddScanned;

DoMapReduce {
  t.Fn t.Acc (e.Scanned) t.Next e.Tail =
    <DoMapReduce
      t.Fn
      <MapReduce--AddScanned
        <Apply t.Fn t.Acc t.Next> (e.Scanned)
      >
      e.Tail
    >;

  t.Fn t.Acc (e.Scanned) = t.Acc e.Scanned;
}

MapReduce--AddScanned {
  t.Acc e.StepScanned (e.Scanned) =
    t.Acc (e.Scanned e.StepScanned);
}

$ENTRY UnBracket {
  (e.Expr) = e.Expr;
}

$ENTRY DelAccummulator {
  t.Acc e.Tail = e.Tail;
}

//FROM Library
$EXTERN FOpen, FClose, FReadLine, FWriteLine;

$FORWARD DoLoadFile;

$ENTRY LoadFile {
  e.FileName =
    <DoLoadFile
      <FReadLine <FOpen 'r' e.FileName>>
    >;
}

DoLoadFile {
  t.File 0 = <FClose t.File>;

  t.File e.Line 0 = (e.Line) <FClose t.File>;

  t.File e.Line =
    (e.Line)
    <DoLoadFile
      <FReadLine t.File>
    >;
}

$FORWARD WriteBracketLine;

$ENTRY SaveFile {
  (e.FileName) e.Lines =
    <FClose
      <Reduce
        WriteBracketLine
        <FOpen 'w' e.FileName>
        e.Lines
      >
    >;
}

WriteBracketLine {
  t.File (e.Line) = <FWriteLine t.File e.Line>;
}

//FROM Library
$EXTERN Add, Sub;

$ENTRY Inc {
  s.Num = <Add s.Num 1>;
}

$ENTRY Dec {
  s.Num = <Sub s.Num 1>;
}

//FROM Library
$EXTERN IntFromStr, Success, Fails;

FastIntFromStr-Guard {
  Success s.Number = s.Number;
}

$ENTRY FastIntFromStr {
  e.Digits =
    <FastIntFromStr-Guard
      <IntFromStr e.Digits>
    >;
}

//FROM Library
$EXTERN Arg;

$FORWARD DoArgList;

$ENTRY ArgList {
  = <DoArgList 0>;
}

$FORWARD SwDoArgList;

DoArgList {
  s.Next = <SwDoArgList <Inc s.Next> <Arg s.Next>>;
}

SwDoArgList {
  s.Next = ;

  s.Next e.Arg = (e.Arg) <DoArgList s.Next>;
}

$FORWARD Lexicon;

//FROM Library
$EXTERN SymbCompare;

$ENTRY Compare {
  (e.Left) (e.Right) = <Lexicon (e.Left) (e.Right)>;

  (e.Left) s.Right = '>';
  s.Left (e.Right) = '<';

  s.Left s.Right = <SymbCompare s.Left s.Right>;
}

$FORWARD Lexicon-Aux;

Lexicon {
  (t.FirstLeft e.Left) (t.FirstRight e.Right) =
    <Lexicon-Aux
      <Compare t.FirstLeft t.FirstRight>
      (e.Left) (e.Right)
    >;

  () () = '=';

  () (e.Right) = '<';
  (e.Left) () = '>';
}

Lexicon-Aux {
  '<' (e.Left) (e.Right) = '<';
  '=' (e.Left) (e.Right) = <Lexicon (e.Left) (e.Right)>;
  '>' (e.Left) (e.Right) = '>';
}

$FORWARD Lexicon-T;

$ENTRY Compare-T {
  (e.Left) (e.Right) = <Lexicon-T () (e.Left) () (e.Right)>;

  (e.Left) s.Right = '>' (e.Left) s.Right;
  s.Left (e.Right) = '<' s.Left (e.Right);

  s.Left s.Right = <SymbCompare s.Left s.Right> s.Left s.Right;
}

$FORWARD Lexicon-T-Aux;

Lexicon-T {
  (e.ScannedLeft) (t.FirstLeft e.Left)
  (e.ScannedRight) (t.FirstRight e.Right) =
    <Lexicon-T-Aux
      (e.ScannedLeft) (e.ScannedRight)
      <Compare-T t.FirstLeft t.FirstRight>
      (e.Left) (e.Right)
    >;

  (e.ScannedLeft) () (e.ScannedRight) () =
    '=' (e.ScannedLeft) (e.ScannedRight);

  (e.ScannedLeft) () (e.ScannedRight) (e.Right) =
    '<' (e.ScannedLeft) (e.ScannedRight e.Right);

  (e.ScannedLeft) (e.Left) (e.ScannedRight) () =
    '>' (e.ScannedLeft e.Left) (e.ScannedRight);
}

Lexicon-T-Aux {
  (e.ScannedLeft) (e.ScannedRight)
  '<' t.NextLeft t.NextRight (e.Left) (e.Right) =
    '<' (e.ScannedLeft t.NextLeft e.Left)
    (e.ScannedRight t.NextRight e.Right);

  (e.ScannedLeft) (e.ScannedRight)
  '=' t.NextLeft t.NextRight (e.Left) (e.Right) =
    <Lexicon-T
      (e.ScannedLeft t.NextLeft) (e.Left)
      (e.ScannedRight t.NextRight) (e.Right)
    >;

  (e.ScannedLeft) (e.ScannedRight)
  '>' t.NextLeft t.NextRight (e.Left) (e.Right) =
    '>' (e.ScannedLeft t.NextLeft e.Left)
    (e.ScannedRight t.NextRight e.Right);
}

//FROM Library
$EXTERN SymbType;

$EENUM TypeBracket;

$ENTRY Type {
  (e.InBracket) = TypeBracket;
  s.Symbol = <SymbType s.Symbol>;
}

$ENTRY Type-T {
  (e.InBrackets) e.Tail = TypeBracket (e.InBrackets) e.Tail;
  s.Symbol e.Tail = <SymbType s.Symbol> s.Symbol e.Tail;
  = '*';
}

$FORWARD Trim-R;

$ENTRY Trim {
  ' ' e.Line = <Trim e.Line>;
  '\t' e.Line = <Trim e.Line>;
  e.Line = <Trim-R e.Line>;
}

Trim-R {
  e.Line ' ' = <Trim-R e.Line>;
  e.Line '\t' = <Trim-R e.Line>;
  e.Line = e.Line;
}

/**
  <Seq s.F1 s.F2 ... s.Fn> == s.Compose

  <s.Compose e.X> == <s.Fn ... <s.F2 <s.F1 e.X>>...>
*/
$ENTRY Seq {
  /* пусто */ = { e.X = e.X; };

  s.Single = s.Single;

  s.First s.Second e.Tail =
    <Seq
      { e.X = <s.Second <s.First e.X>>; } e.Tail
    >;
}
