$MODULE M23Tree;

$IMPORT MOrder;

$DATA Tree, Leaf;

/**
  <Create> == t.Tree
*/
$ENTRY Create = [Leaf];

//------------------------------------------------------------------------------

/**
  <Insert t.Tree t.Key e.Value>
    == t.Tree
*/
$ENTRY Insert
  t.Tree t.Key e.Value =
    <Insert-SwGrow <Insert-Aux t.Tree t.Key e.Value>>;

Insert-SwGrow {
  t.Tree = t.Tree;

  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 =
    [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2];
}

/*
  <Insert-Aux t.Tree t.Key e.Value>
    == t.SubTree
    == t.SubTree1 (t.Key1 e.Value1) t.SubTree2
*/
Insert-Aux {
  [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3]
  t.Key e.Value =
    <Insert-Reballance
      <Insert-Compare-3-Aux1
        t.SubTree1 t.SubTree2 (t.Key2 e.Value2) t.SubTree3
        <MOrder::Compare-T t.Key t.Key1> (e.Value) (e.Value1)
        >
    >;

  [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2]
  t.Key e.Value =
    <Insert-Reballance
      <Insert-Compare-2-Aux
        t.SubTree1 t.SubTree2
        <MOrder::Compare-T t.Key t.Key1> (e.Value) (e.Value1)
      >
    >;

  [Leaf] t.Key e.Value = [Leaf] (t.Key e.Value) [Leaf];
}

Insert-Reballance {
  t.SubTree = t.SubTree;

  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 =
    [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2];

  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3 =
    [Tree
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
    ];

  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
  (t.Key3 e.Value3) t.SubTree4 =
    [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2]
    (t.Key2 e.Value2)
    [Tree t.SubTree3 (t.Key3 e.Value3) t.SubTree4];
}

Insert-Compare-3-Aux1 {
  t.SubTree1 t.SubTree2 (t.Key2 e.Value2) t.SubTree3
  '<' t.Key t.Key1 (e.Value) (e.Value1) =
    <Insert-Aux t.SubTree1 t.Key e.Value>
    (t.Key1 e.Value1)
    t.SubTree2
    (t.Key2 e.Value2)
    t.SubTree3;

  t.SubTree1 t.SubTree2 (t.Key2 e.Value2) t.SubTree3
  '=' t.Key t.Key1 (e.Value) (e.Value1) =
    t.SubTree1
    (t.Key1 e.Value)
    t.SubTree2
    (t.Key2 e.Value2)
    t.SubTree3;

  t.SubTree1 t.SubTree2 (t.Key2 e.Value2) t.SubTree3
  '>' t.Key t.Key1 (e.Value) (e.Value1) =
    <Insert-Compare-3-Aux2
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 t.SubTree3
      <MOrder::Compare-T t.Key t.Key2> (e.Value) (e.Value2)
    >;
}

Insert-Compare-3-Aux2 {
  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 t.SubTree3
  '<' t.Key t.Key2 (e.Value) (e.Value2) =
    t.SubTree1
    (t.Key1 e.Value1)
    <Insert-Aux t.SubTree2 t.Key e.Value>
    (t.Key2 e.Value2)
    t.SubTree3;

  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 t.SubTree3
  '=' t.Key t.Key2 (e.Value) (e.Value2) =
    t.SubTree1
    (t.Key1 e.Value1)
    t.SubTree2
    (t.Key2 e.Value)
    t.SubTree3;

  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 t.SubTree3
  '>' t.Key t.Key2 (e.Value) (e.Value2) =
    t.SubTree1
    (t.Key1 e.Value1)
    t.SubTree2
    (t.Key2 e.Value2)
    <Insert-Aux t.SubTree3 t.Key e.Value>;
}

Insert-Compare-2-Aux {
  t.SubTree1 t.SubTree2 '<' t.Key t.Key1 (e.Value) (e.Value1) =
    <Insert-Aux t.SubTree1 t.Key e.Value>
    (t.Key1 e.Value1)
    t.SubTree2;

  t.SubTree1 t.SubTree2 '=' t.Key t.Key1 (e.Value) (e.Value1) =
    t.SubTree1
    (t.Key1 e.Value) t.SubTree2;

  t.SubTree1 t.SubTree2 '>' t.Key t.Key1 (e.Value) (e.Value1) =
    t.SubTree1
    (t.Key1 e.Value1)
    <Insert-Aux t.SubTree2 t.Key e.Value>;
}

//------------------------------------------------------------------------------

$import InOut;

$entry Print
  t.Tree = <DoPrint ('  ') t.Tree> <InOut::WriteLine>;

DoPrint {
  (e.Indent)
  [Tree t.SubTree1 ((e.Key1) e.Value1) t.SubTree2 ((e.Key2) e.Value2) t.SubTree3] =
    <InOut::WriteLine e.Indent '[Tree 3]'>
    <DoPrint (e.Indent '  ') t.SubTree1>
    <InOut::WriteLine e.Indent '  [(' e.Key1 '): ' e.Value1 ']'>
    <DoPrint (e.Indent '  ') t.SubTree2>
    <InOut::WriteLine e.Indent '  [(' e.Key2 '): ' e.Value2 ']'>
    <DoPrint (e.Indent '  ') t.SubTree3>
    //<InOut::WriteLine>
    ;

  (e.Indent) [Tree t.SubTree1 ((e.Key1) e.Value1) t.SubTree2] =
    <InOut::WriteLine e.Indent '[Tree 2]'>
    <DoPrint (e.Indent '  ') t.SubTree1>
    <InOut::WriteLine e.Indent '  [(' e.Key1 '): ' e.Value1 ']'>
    <DoPrint (e.Indent '  ') t.SubTree2>
    //<InOut::WriteLine>
    ;

  (e.Indent) [Leaf] =
    <InOut::WriteLine e.Indent '[Leaf]'>
    ;
}

//------------------------------------------------------------------------------

/**
  <Lookup t.Tree t.Key>
    == t.Tree Success e.Value
    == t.Tree Fails
*/
$ENTRY Lookup {
  [Leaf] t.Key = [Leaf] Fails;

  [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2]
  t.Key =
    <Lookup-Compare-2
      t.SubTree1 (e.Value1) t.SubTree2 <MOrder::Compare-T t.Key t.Key1>
    >;

  [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3]
  t.Key =
    <Lookup-Compare-31
      t.SubTree1 (e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
      <MOrder::Compare-T t.Key t.Key1>
    >;
}

Lookup-Compare-2 {
  t.SubTree1 (e.Value1) t.SubTree2 '<' t.Key t.Key1 =
    <Lookup-Compare-21-Aux
      <Lookup t.SubTree1 t.Key> (t.Key1 e.Value1) t.SubTree2
    >;

  t.SubTree1 (e.Value1) t.SubTree2 '=' t.Key t.Key1 =
    [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2]
    Success e.Value1;

  t.SubTree1 (e.Value1) t.SubTree2 '>' t.Key t.Key1 =
    <Lookup-Compare-22-Aux
      <Lookup t.SubTree2 t.Key> t.SubTree1 (t.Key1 e.Value1)
    >;
}

Lookup-Compare-21-Aux {
  t.SubTree1 Success e.Value (t.Key1 e.Value1) t.SubTree2 =
    [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2]
    Success e.Value;

  t.SubTree1 Fails (t.Key1 e.Value1) t.SubTree2 =
    [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2]
    Fails;
}

Lookup-Compare-22-Aux {
  t.SubTree2 Success e.Value t.SubTree1 (t.Key1 e.Value1) =
    [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2]
    Success e.Value;

  t.SubTree2 Fails t.SubTree1 (t.Key1 e.Value1) =
    [Tree t.SubTree1 (t.Key1 e.Value1) t.SubTree2]
    Fails;
}

Lookup-Compare-31 {
  t.SubTree1 (e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
  '<' t.Key t.Key1 =
    <Lookup-Compare-31-Aux
      <Lookup t.SubTree1 t.Key>
      (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
    >;

  t.SubTree1 (e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
  '=' t.Key t.Key1 =
    [Tree
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
    ]
    Success e.Value1;

  t.SubTree1 (e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
  '>' t.Key t.Key1 =
    <LookupCompare-32
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (e.Value2) t.SubTree3
      <MOrder::Compare-T t.Key t.Key2>
    >;
}

LookupCompare-32 {
  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (e.Value2) t.SubTree3
  '<' t.Key t.Key2 =
    <Lookup-Compare-32-Aux
      <Lookup t.SubTree2 t.Key>
      t.SubTree1 (t.Key1 e.Value1) (t.Key2 e.Value2) t.SubTree3
    >;

  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (e.Value2) t.SubTree3
  '=' t.Key t.Key2 =
    [Tree
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
    ]
    Success e.Value2;

  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (e.Value2) t.SubTree3
  '>' t.Key t.Key2 =
    <Lookup-Compare-33-Aux
      <Lookup t.SubTree3 t.Key>
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2)
    >;
}

Lookup-Compare-31-Aux {
  t.SubTree1 Success e.Value
  (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3 =
    [Tree
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
    ]
    Success e.Value;

  t.SubTree1 Fails
  (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3 =
    [Tree
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
    ]
    Fails;
}

Lookup-Compare-32-Aux {
  t.SubTree2 Success e.Value
  t.SubTree1 (t.Key1 e.Value1) (t.Key2 e.Value2) t.SubTree3 =
    [Tree
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
    ]
    Success e.Value;

  t.SubTree2 Fails
  t.SubTree1 (t.Key1 e.Value1) (t.Key2 e.Value2) t.SubTree3 =
    [Tree
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
    ]
    Fails;
}

Lookup-Compare-33-Aux {
  t.SubTree3 Success e.Value
  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) =
    [Tree
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
    ]
    Success e.Value;

  t.SubTree3 Fails
  t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) =
    [Tree
      t.SubTree1 (t.Key1 e.Value1) t.SubTree2 (t.Key2 e.Value2) t.SubTree3
    ]
    Fails;
}

//------------------------------------------------------------------------------

/**
  <Extract t.Tree t.Key>
    == t.Tree Success e.Value
    == t.Tree Fails
  Функция Extract удаляет пару (t.Key t.Value) из дерева,
  при этом возвращая e.Value
*/
$ENTRY Extract
  t.Tree t.Key =
    <Extract-Find t.Key () t.Tree ()>;

Extract-Find {
  t.Key t.LeftMB
  [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3]
  t.RightMB =
    <Extract-Find-Compare-31
      t.LeftMB t.Tree1 (e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3 t.RightMB
      <MOrder::Compare-T t.Key t.Key1>
    >;

  t.Key t.LeftMB [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2] t.RigthMB =
    <Extract-Find-Compare-2
      t.LeftMB t.Tree1 (e.Value1) t.Tree2 t.RigthMB
      <MOrder::Compare-T t.Key t.Key1>
    >;

  t.Key t.LeftMB [Leaf] t.RightMB =
    <Unroll t.LeftMB [Leaf] t.RightMB> Fails;
}

Extract-Find-Compare-31 {
  (e.LeftMB) t.Tree1 (e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3 (e.RightMB)
  '<' t.Key t.Key1 =
    <Extract-Find
      t.Key
      (e.LeftMB (Tree31))
      t.Tree1
      ((Tree31 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3) e.RightMB)
    >;

  t.LeftMB [Leaf] (e.Value1) [Leaf] (t.Key2 e.Value2) [Leaf] t.RightMB
  '=' t.Key t.Key1 =
    <Unroll t.LeftMB [Tree [Leaf] (t.Key2 e.Value2) [Leaf]] t.RightMB>
    Success e.Value1;

  t.LeftMB t.Tree1 (e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3 t.RightMB
  '=' t.Key t.Key1 =
    <Extract-Rebalance-31
      t.LeftMB t.Tree1
      <Extract-First t.Tree2>
      (t.Key2 e.Value2) t.Tree3 t.RightMB
    >
    Success e.Value1;

  t.LeftMB t.Tree1 (e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3 t.RightMB
  '>' t.Key t.Key1 =
    <Extract-Find-Compare-32
      t.LeftMB t.Tree1 (t.Key1 e.Value1) t.Tree2 (e.Value2) t.Tree3 t.RightMB
      <MOrder::Compare-T t.Key t.Key2>
    >;
}

Extract-Rebalance-31
  (e.LeftMB) t.Tree1 (t.NextKey e.NextValue)
  (e.InnerLeftMB) e.ForRebalance (e.InnerRightMB)
  (t.Key2 e.Value2) t.Tree3 (e.RightMB) =
    <Extract-Rebalance
      (e.LeftMB (Tree32 t.Tree1 (t.NextKey e.NextValue)) e.InnerLeftMB)
      e.ForRebalance
      (e.InnerRightMB (Tree32 (t.Key2 e.Value2) t.Tree3) e.RightMB)
    >;

Extract-Find-Compare-32 {
  (e.LeftMB) t.Tree1 (t.Key1 e.Value1) t.Tree2 (e.Value2) t.Tree3 (e.RightMB)
  '<' t.Key t.Key2 =
    <Extract-Find
      t.Key
      (e.LeftMB (Tree32 t.Tree1 (t.Key1 e.Value1)))
      t.Tree2
      ((Tree32 (t.Key2 e.Value2) t.Tree3) e.RightMB)
    >;

  t.LeftMB [Leaf] (t.Key1 e.Value1) [Leaf] (e.Value2) [Leaf] t.RightMB
  '=' t.Key t.Key =
    <Unroll t.LeftMB [Tree [Leaf] (t.Key1 e.Value1) [Leaf]] t.RightMB>
    Success e.Value2;

  t.LeftMB t.Tree1 (t.Key1 e.Value1) t.Tree2 (e.Value2) t.Tree3 t.RightMB
  '=' t.Key t.Key2 =
    <Extract-Rebalance-32
      t.LeftMB t.Tree1 (t.Key1 e.Value1) t.Tree2
      <Extract-First t.Tree3>
      t.RightMB
    >
    Success e.Value2;

  (e.LeftMB) t.Tree1 (t.Key1 e.Value1) t.Tree2 (e.Value2) t.Tree3 (e.RightMB)
  '>' t.Key t.Key2 =
    <Extract-Find
      t.Key
      (e.LeftMB (Tree33 t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2)))
      t.Tree3
      ((Tree33) e.RightMB)
    >;
}

Extract-Rebalance-32
  (e.LeftMB) t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.NextKey e.NextValue)
  (e.InnerLeftMB) e.ForRebalance (e.InnerRightMB)
  (e.RightMB) =
    <Extract-Rebalance
      (e.LeftMB
        (Tree33 t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.NextKey e.NextValue))
        e.InnerLeftMB
      )
      e.ForRebalance
      (e.InnerRightMB (Tree33) e.RightMB)
    >;

Extract-Find-Compare-2 {
  (e.LeftMB) t.Tree1 (e.Value1) t.Tree2 (e.RightMB) '<' t.Key t.Key1 =
    <Extract-Find
      t.Key
      (e.LeftMB (Tree21))
      t.Tree1
      ((Tree21 (t.Key1 e.Value1) t.Tree2) e.RightMB)
    >;

  t.LeftMB [Leaf] (e.Value1) [Leaf] t.RightMB '=' t.Key t.Key1 =
    <Extract-Rebalance t.LeftMB (Tree1 [Leaf]) t.RightMB>
    Success e.Value1;

  t.LeftMB t.Tree1 (e.Value1) t.Tree2 t.RightMB '=' t.Key t.Key1 =
    <Extract-Rebalance-2
      t.LeftMB t.Tree1 <Extract-First t.Tree2> t.RightMB
    >
    Success e.Value1;

  (e.LeftMB) t.Tree1 (e.Value1) t.Tree2 (e.RightMB) '>' t.Key t.Key1 =
    <Extract-Find
      t.Key
      (e.LeftMB (Tree22 t.Tree1 (t.Key1 e.Value1)))
      t.Tree2
      ((Tree22) e.RightMB)
    >;
}

Extract-Rebalance-2
  (e.LeftMB) t.Tree1 (t.NextKey e.NextValue)
  (e.InnerLeftMB) e.ForRebalance (e.InnerRightMB)
  (e.RightMB) =
    <Extract-Rebalance
      (e.LeftMB (Tree22 t.Tree1 (t.NextKey e.NextValue)) e.InnerLeftMB)
      e.ForRebalance
      (e.InnerRightMB (Tree22) e.RightMB)
    >;


Unroll
  (e.LeftMB) t.Tree (e.RightMB) =
    <DoUnroll (e.LeftMB) t.Tree (e.RightMB)>;

DoUnroll {
  () t.Tree () = t.Tree;

  (e.LeftMB) t.Tree (e.RightMB) =
    <DoUnroll <UnrollStep (e.LeftMB) t.Tree (e.RightMB)>>;
}

UnrollStep {
  (e.LeftMB (Tree31))
  t.Tree1
  ((Tree31 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3) e.RightMB) =
    (e.LeftMB)
    [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3]
    (e.RightMB);

  (e.LeftMB (Tree32 t.Tree1 (t.Key1 e.Value1)))
  t.Tree2
  ((Tree32 (t.Key2 e.Value2) t.Tree3) e.RightMB) =
    (e.LeftMB)
    [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3]
    (e.RightMB);

  (e.LeftMB (Tree33 t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2)))
  t.Tree3
  ((Tree33) e.RightMB) =
    (e.LeftMB)
    [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3]
    (e.RightMB);

  (e.LeftMB (Tree21)) t.Tree1 ((Tree21 (t.Key1 e.Value1) t.Tree2) e.RightMB) =
    (e.LeftMB) [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2] (e.RightMB);

  (e.LeftMB (Tree22 t.Tree1 (t.Key1 e.Value1))) t.Tree2 ((Tree22) e.RightMB) =
    (e.LeftMB) [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2] (e.RightMB);

  () t.Tree () = () t.Tree ();
}

/*
  <Extract-First t.Tree>
    == (t.NextKey e.NextValue) (e.LeftMB) e.ForRebalance (e.RightMB)
*/
Extract-First
  t.Tree = <DoExtract-First () t.Tree ()>;

DoExtract-First {
  (e.LeftMB)
  [Tree [Leaf] (t.Key1 e.Value1) [Leaf] (t.Key2 e.Value2) [Leaf]]
  (e.RightMB) =
    (t.Key1 e.Value1)
    (e.LeftMB) [Tree [Leaf] (t.Key2 e.Value2) [Leaf]] (e.RightMB);

  (e.LeftMB) [Tree [Leaf] (t.Key1 e.Value1) [Leaf]] (e.RightMB) =
    (t.Key1 e.Value1)
    (e.LeftMB) (Tree1 [Leaf]) (e.RightMB);

  (e.LeftMB)
  [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3]
  (e.RightMB) =
    <DoExtract-First
      (e.LeftMB (Tree31)) t.Tree1
      ((Tree31 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3) e.RightMB)
    >;

  (e.LeftMB) [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2] (e.RightMB) =
    <DoExtract-First
      (e.LeftMB (Tree21)) t.Tree1
      ((Tree21 (t.Key1 e.Value1) t.Tree2) e.RightMB)
    >;
}

Extract-Rebalance {
  () (Tree1 t.Tree) () = t.Tree;

  () t.Tree () = t.Tree;

  (e.LeftMB) (Tree1 t.Tree) (e.RightMB) =
    <Extract-SwRebalance
      <UnrollStep (e.LeftMB) (Tree1 t.Tree) (e.RightMB)>
    >;
    

  (e.LeftMB) t.Tree (e.RightMB) =
    <Unroll (e.LeftMB) t.Tree (e.RightMB)>;
}

Extract-SwRebalance {
  (e.LeftMB)
  [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3]
  (e.RightMB) =
    <Extract-Rebalance
      (e.LeftMB)
      <Extract-SwRebalance-Aux
        <Parse t.Tree1> (t.Key1 e.Value1)
        <Parse t.Tree2> (t.Key2 e.Value2) <Parse t.Tree3>
      >
      (e.RightMB)
    >;

  (e.LeftMB) [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2] (e.RightMB) =
    <Extract-Rebalance
      (e.LeftMB)
      <Extract-SwRebalance-Aux
        <Parse t.Tree1> (t.Key1 e.Value1) <Parse t.Tree2>
      >
      (e.RightMB)
    >;
}

Parse {
  [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3] =
    t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3;

  [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2] =
    t.Tree1 (t.Key1 e.Value1) t.Tree2;

  (Tree1 t.Tree) = t.Tree;
}

Extract-SwRebalance-Aux {
  t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) 
  t.Tree3 (t.Key3 e.Value3) t.Tree4 (t.Key4 e.Value4)
  t.Tree5 (t.Key5 e.Value5) t.Tree6 (t.Key6 e.Value6) t.Tree7 =
    [Tree
      [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2]
      (t.Key2 e.Value2)
      [Tree t.Tree3 (t.Key3 e.Value3) t.Tree4 (t.Key4 e.Value4) t.Tree5]
      (t.Key5 e.Value5)
      [Tree t.Tree6 (t.Key6 e.Value6) t.Tree7]
    ];

  t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) 
  t.Tree3 (t.Key3 e.Value3) t.Tree4 (t.Key4 e.Value4)
  t.Tree5 (t.Key5 e.Value5) t.Tree6 =
    [Tree
      [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2]
      (t.Key2 e.Value2)
      [Tree t.Tree3 (t.Key3 e.Value3) t.Tree4]
      (t.Key4 e.Value4)
      [Tree t.Tree5 (t.Key5 e.Value5) t.Tree6]
    ];

  t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2)
  t.Tree3 (t.Key3 e.Value3) t.Tree4 (t.Key4 e.Value4) t.Tree5 =
    [Tree
      [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3]
      (t.Key3 e.Value3)
      [Tree t.Tree4 (t.Key4 e.Value4) t.Tree5]
    ];

  t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2)
  t.Tree3 (t.Key3 e.Value3) t.Tree4 =
    [Tree
      [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2]
      (t.Key2 e.Value2)
      [Tree t.Tree3 (t.Key3 e.Value3) t.Tree4]
    ];

  t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3 =
    (Tree1
      [Tree t.Tree1 (t.Key1 e.Value1) t.Tree2 (t.Key2 e.Value2) t.Tree3]
    );
}

//------------------------------------------------------------------------------

/**
  <Delete t.Tree t.Key>
    == t.Tree
  Постусловие: в дереве t.Tree отсутствует значение,
  ассоциированное с ключом t.Key
*/
$ENTRY Delete
  t.Tree t.Key = <Delete-Aux <Extract t.Tree t.Key>>;

Delete-Aux {
  t.Tree Success e.Value = t.Tree;

  t.Tree Fails = t.Tree;
}

$END M23Tree.
