$MODULE CoreBE::MFileIO;

$NATIVE CppSR TOPLEVEL @@'
#include <stdio.h>

#include "refalapi.h"


static refalrts::FnResult std_handle(
  FILE *file, refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end
) {
  /*
    Функция возвращает заданный дескриптор.
    Формат участка arg_begin..arg_end:
      <StdHandle> == s.Handle
  */

  using namespace refalrts;

  // Скобки вызова и имя функции
  Iter open_call = arg_begin;
  move_left(arg_begin, arg_end);
  Iter func_name = arg_begin;
  move_left(arg_begin, arg_end);
  Iter close_call = arg_end;
  move_right(arg_begin, arg_end);

  if( ! empty_seq(arg_begin, arg_end) ) return cRecognitionImpossible;

  // Повторное использование открывающей скобки вызова
  open_call->link_info = 0;
  open_call->tag = cDataFile;
  open_call->file_info = file;

  // Очистка поля зрения
  splice_to_freelist( vm, func_name, close_call );

  return cSuccess;
}
'@@;


$NATIVE CppSR FUNCTION
$ENTRY StdOut
@@'
  return std_handle(stdout, vm, arg_begin, arg_end);
'@@;

$NATIVE CppSR FUNCTION
$ENTRY StdIn
@@'
  return std_handle(stdin, vm, arg_begin, arg_end);
'@@;

$NATIVE CppSR FUNCTION
$ENTRY ReadLine
@@'
  // Функция считывания строки со стандартного потока
  // <Read s.Handle> == e.Line

  using namespace refalrts;
  using refalapi::AllocArray;

  // Угловые скобки и имя функции
  Iter open_call = arg_begin;
  move_left(arg_begin, arg_end);
  Iter close_call = arg_end;
  move_right(arg_begin, arg_end);
  // Iter func_name = arg_begin;
  move_left(arg_begin, arg_end);

  Iter sHandle = 0;
  bool match =
    svar_left( sHandle, arg_begin, arg_end )
    && ( cDataFile == sHandle->tag )
    && empty_seq( arg_begin, arg_end );

  if( match == false ) return cRecognitionImpossible;

  // Считывание строки в массив

  enum { cBufSize = 100 };
  char buffer[cBufSize + 1] = { 0 };
  bool at_eol = false, at_eof = false;
  AllocArray allocs;
  FILE *f = static_cast<FILE*>( sHandle->file_info );

  reset_allocator(vm);

  while( ! at_eol ) {
    unsigned pos = 0;

    while( (pos < cBufSize) && ! at_eol ) {
      int c = fgetc(f);
      if( (EOF == c) || ('\n' == c) ) {
        at_eol = true;
        at_eof = (EOF == c);
        buffer[pos] = '\0';
      } else {
        buffer[pos] = static_cast<char>(c);
        ++pos;
      }
    }

    Iter frag_begin = 0, frag_end = 0;

    if(pos > 0) {
      if( !alloc_chars(vm, frag_begin, frag_end, buffer, pos) ) {
        return cNoMemory;
      }

      allocs.push_back(frag_begin, frag_end);
    }
  }

  if( at_eof ) {
    // Добавляем в конец строки число 0
    Iter sEOFMarker = 0;
    if( ! alloc_number( vm, sEOFMarker, 0 ) ) return cNoMemory;
    allocs.push_back( sEOFMarker );
  }

  allocs.build( open_call );
  splice_to_freelist( vm, open_call, close_call );

  return cSuccess;
'@@;

$NATIVE CppSR FUNCTION
$ENTRY Write
@@'
  // Функция печатает объектное выражение, являющееся аргументом
  // <Write s.Handle e.Expr> == пусто

  using namespace refalrts;

  // Угловые скобки и имя функции
  Iter open_call = arg_begin;
  move_left(arg_begin, arg_end);
  // Iter func_name = arg_begin;
  move_left(arg_begin, arg_end);
  Iter close_call = arg_end;
  move_right(arg_begin, arg_end);

  Iter sHandle = 0;
  bool match_handle =
    svar_left( sHandle, arg_begin, arg_end )
    && ( cDataFile == sHandle->tag );

  if( match_handle == false ) return cRecognitionImpossible;

  FILE *f = static_cast<FILE*>( sHandle->file_info );

  if( ferror(f) ) return cRecognitionImpossible;

  int printf_res = 0;

  for(
    Iter ptr = arg_begin, limit = arg_end;
    (printf_res >= 0) && ! empty_seq(ptr, limit);
    move_left(ptr, limit)
  ) {
    switch( ptr->tag ) {
      case cDataChar:
        printf_res = fprintf(f, "%c", ptr->char_info);
        continue;

      case cDataNumber:
        printf_res = fprintf(f, "%d ", ptr->number_info);
        continue;

      case cDataFunction:
        printf_res = fprintf(
          f, "%s ", refalrts::function_name(ptr->function_info)->name
        );
        continue;

      case cDataIdentifier:
        printf_res = fprintf(f, "%s ", ptr->ident_info->name());
        continue;

      case cDataOpenADT:
        printf_res = fprintf(f, "[");
        continue;

      case cDataCloseADT:
        printf_res = fprintf(f, "]");
        continue;

      case cDataOpenBracket:
        printf_res = fprintf(f, "(");
        continue;

      case cDataCloseBracket:
        printf_res = fprintf(f, ")");
        continue;

      case cDataFile:
        printf_res = fprintf(f, "*%p", ptr->file_info);
        continue;

      default:
        refalrts_switch_default_violation(ptr->tag);
    }
  }

  // Здесь (printf_res < 0) || empty_seq(ptr, limit)
  if( printf_res >= 0 ) {
    // Успешный вывод в поток
    splice_to_freelist(vm, open_call, close_call);
    return cSuccess;
  } else {
    // В процессе вывода произшла ошибка
    return cRecognitionImpossible;
  }
'@@;

$NATIVE CppSR FUNCTION
$ENTRY Close
@@'
  // Функция закрывает дескриптор файла
  // <Close s.FileHandle> == пусто

  using namespace refalrts;

  // Скобки конкретизации и имя функции
  Iter open_call = arg_begin;
  move_left(arg_begin, arg_end);
  Iter close_call = arg_end;
  move_right(arg_begin, arg_end);
  // Iter func_name = arg_begin;
  move_left(arg_begin, arg_end);

  Iter sHandle = 0;

  // Сопоставление с образцом
  bool pattern =
    svar_left( sHandle, arg_begin, arg_end )
    && ( cDataFile == sHandle->tag )
    && empty_seq( arg_begin, arg_end );

  if( pattern == false ) return cRecognitionImpossible;

  int fclose_res = fclose( static_cast<FILE*>( sHandle->file_info ) );

  if( EOF != fclose_res ) {
    splice_to_freelist(vm, open_call, close_call);
    return cSuccess;
  } else {
    return cRecognitionImpossible;
  }
'@@;

$NATIVE CppSR FUNCTION
$ENTRY Open
@@'
  using namespace refalrts;
  using refalapi::CharArray;

  // Образец: <Open ['b'] s.Mode e.FileName>

  // Левая и правая скобки, имя функции
  Iter left_call = arg_begin;
  move_left(arg_begin, arg_end);

  Iter right_call = arg_end;
  move_right(arg_begin, arg_end);

  Iter func_name = arg_begin;
  move_left(arg_begin, arg_end);

  Iter sMode = 0;

  bool mode_parsed =
    svar_left( sMode, arg_begin, arg_end ) && ( cDataChar == sMode->tag );

  if( mode_parsed == false ) return cRecognitionImpossible;

  char ch_mode = sMode->char_info;
  bool binary = ('b' == ch_mode);

  if( binary )
  {
    mode_parsed =
      svar_left( sMode, arg_begin, arg_end )
      && ( cDataChar == sMode->tag );

    if( mode_parsed == false ) return cRecognitionImpossible;
  }

  ch_mode = sMode->char_info;
  const char *str_mode =
    ('r' == ch_mode) ? (binary ? "rb" : "rt") :
    ('w' == ch_mode) ? (binary ? "wb" : "wt") :
    ('a' == ch_mode) ? (binary ? "ab" : "at") : 0;

  if( str_mode == 0 ) return cRecognitionImpossible;

  CharArray file_name;

  FnResult name_parse =
    CharArray::from_sequence( file_name, arg_begin, arg_end );

  if( cSuccess != name_parse ) return name_parse;

  if( FILE *f = fopen(file_name.c_str(), str_mode) ) {
    // Переинициализация открывающей угловой скобки
    left_call->link_info = 0;
    left_call->tag = cDataFile;
    left_call->file_info = f;

    // Уничтожение остальных элементов поля зрения
    splice_to_freelist(vm, func_name, right_call);
    return cSuccess;
  } else {
    // Переинициализация открывающей угловой скобки
    left_call->link_info = 0;
    left_call->tag = cDataIdentifier;
    left_call->ident_info = '@@Fails@@';

    splice_to_freelist(vm, func_name, right_call);
    return cSuccess;
  }
'@@;

$NATIVE CppSR FUNCTION
$ENTRY FlushIO
@@'
  refalrts::splice_to_freelist(vm, arg_begin, arg_end);
  return refalrts::cSuccess;
'@@;

$END CoreBE::MFileIO.
