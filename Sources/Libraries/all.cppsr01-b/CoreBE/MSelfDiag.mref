$MODULE CoreBE::MSelfDiag;

$IMPORT CoreBE::MForceExit;

$NATIVE CppSR TOPLEVEL @@'
#include <stdio.h>


namespace {

// Глобальный дескриптор файла лога
FILE *g_log_file = 0;

void *get_log_handle() {
  if( 0 == g_log_file ) {
    g_log_file = fopen("__log", "wt");
  }

  return g_log_file;
}

void *get_stderror_handle() {
  return stderr;
}

refalrts::FnResult log(
  void *flog,
  bool transparent,
  refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end
) {
  /*
    Данная функция вызывается из функций печати логирующих сообщений.
    Печатает в лог информацию в том же формате, что и при аварийном
    дампе поля зрения.
    Параметр flog задаёт поток, в который будет писаться дамп ---
    как правило или в файл __log или на stderr.
    Параметр transparent задаёт режим сохранения аргумента:
      * true --- аргумент в поле зрения сохраняется, удаляются только
        скобки конкретизации и имя функции;
      * false --- поле зрения после завершения функции оказывается
        пустым.

    Формат цепочки arg_begin..arg_end:
      <Log e.Message> == пусто
      <Log-T e.Message> == e.Message

    Если flog == 0, то вывод производится на stderr.
  */

  using namespace refalrts;

  // Скобки вызова и имя функции
  Iter open_call = arg_begin;
  move_left( arg_begin, arg_end );
  Iter func_name = arg_begin;
  move_left( arg_begin, arg_end );
  Iter close_call = arg_end;
  move_right( arg_begin, arg_end );

  FILE *fileLOG = (FILE*) flog;

  // Вывод дампа:
  if( (0 == fileLOG) || (stderr == fileLOG) ) {
    fprintf(stderr, "<Log>: ");
    fileLOG = stderr;
  }

  refalrts::debug_print_expr(vm, fileLOG, arg_begin, arg_end);
  fprintf(fileLOG, "\n");
  fflush(fileLOG);

  // Очистка поля зрения
  if( transparent ) {
    splice_to_freelist( vm, open_call, func_name );
    splice_to_freelist( vm, close_call, close_call );
  } else {
    splice_to_freelist( vm, open_call, close_call );
  }

  return cSuccess;
}

} // безымянное namespace
'@@;


$NATIVE CppSR FUNCTION
$ENTRY CloseLog @@'
  /*
    Закрывает файл лога.

    Формат:
      <CloseLog> == пусто.
  */

  using namespace refalrts;

  // Скобки вызова и имя функции
  Iter open_call = arg_begin;
  move_left(arg_begin, arg_end);
  // Iter func_name = arg_begin;
  move_left(arg_begin, arg_end);
  Iter close_call = arg_begin;
  move_right(arg_begin, arg_end);

  if( ! empty_seq(arg_begin, arg_end) ) return cRecognitionImpossible;

  if( 0 != g_log_file ) {
    fclose( g_log_file );
  }

  splice_to_freelist(vm, open_call, close_call);
  return cSuccess;
'@@;

$ENTRY ExitFailure {
  = <CoreBE::MForceExit::ForceExit 255>;
}

$NATIVE CppSR FUNCTION
$ENTRY Log-T @@'
  return log(
    get_log_handle(),
    true, // прозрачный режим
    vm, arg_begin, arg_end
  );
'@@;

$NATIVE CppSR FUNCTION
$ENTRY Log @@'
  return log(
    get_log_handle(),
    false, // непрозрачный режим
    vm, arg_begin, arg_end
  );
'@@;

$NATIVE CppSR FUNCTION
$ENTRY PrintMessage @@'
  return log(
    get_stderror_handle(),
    false, // непрозрачный режим
    vm, arg_begin, arg_end
  );
'@@;

$END CoreBE::MSelfDiag.
