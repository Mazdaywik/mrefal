$MODULE CoreBE::OS::MOS;

$NATIVE CppSR TOPLEVEL @@'
#include <windows.h>
#include <stdio.h>
#include <time.h>

// Для Watcom (перед refalapi.h, после windows.h)
#ifdef min
#undef min
#endif

#ifdef max
#undef max
#endif

#include "refalapi.h"
'@@;

$NATIVE CppSR FUNCTION
$ENTRY CommandLine @@'
  // Формат <CommandLine> == e.CommandLine

  using namespace refalrts;

  // Скобки вызова и имя функции
  Iter open_call = arg_begin;
  move_left(arg_begin, arg_end);
  // Iter func_name = arg_begin;
  move_left(arg_begin, arg_end);
  Iter close_call = arg_end;
  move_right(arg_begin, arg_end);

  // Формат аргумента --- пустое выражение

  if( ! empty_seq(arg_begin, arg_end) ) return cRecognitionImpossible;

  const char *cmd_line = GetCommandLine();
  unsigned len = strlen(cmd_line);
  Iter cmd_b = 0, cmd_e = 0;

  reset_allocator(vm);

  if( ! alloc_chars(vm, cmd_b, cmd_e, cmd_line, len) ) return cNoMemory;

  // Построение результата
  splice_evar(open_call, cmd_b, cmd_e);
  splice_to_freelist(vm, open_call, close_call);
  return cSuccess;
'@@;

$NATIVE CppSR FUNCTION
$ENTRY EnvList @@'
  // Формат <EnvList> == (e.EnvLine)*

  using namespace refalrts;

  // Скобки вызова, имя функции
  Iter open_call = arg_begin;
  move_left(arg_begin, arg_end);
  // Iter func_name = arg_begin;
  move_left(arg_begin, arg_end);
  Iter close_call = arg_end;
  move_right(arg_begin, arg_end);

  // Аргумент --- пустое выражение

  if( ! empty_seq(arg_begin, arg_end) ) return cRecognitionImpossible;

  char *env_block = static_cast<char*>(GetEnvironmentStrings());

  // Возможно, не слишком хорошее решение.
  if( env_block == 0 ) return cRecognitionImpossible;

  // Распределение памяти
  refalapi::AllocArray allocs;
  reset_allocator(vm);

  for(
    char *cur_line = env_block;
    *cur_line != '\0';
    cur_line += strlen(cur_line) + 1
  ) {
    Iter open_bracket = 0, close_bracket = 0;
    Iter env_begin = 0, env_end = 0;

    bool allocated =
      alloc_open_bracket(vm, open_bracket)
      && alloc_string(vm, env_begin, env_end, cur_line)
      && alloc_close_bracket(vm, close_bracket);

    if( ! allocated ) return cNoMemory;

    link_brackets(open_bracket, close_bracket);

    allocs.push_back(open_bracket);
    allocs.push_back(env_begin, env_end);
    allocs.push_back(close_bracket);
  }

  FreeEnvironmentStrings(env_block);

  // Построение результата
  allocs.build(open_call);
  splice_to_freelist(vm, open_call, close_call);
  return cSuccess;
'@@;

$NATIVE CppSR FUNCTION
$ENTRY CreateProcess @@'
  /*
    Функция создания нового процесса,
    Вызывает одноимённую WinAPI-функцию.

    Формат:
      <CreateProcess s.Wait (e.Program) (e.CommandLine)>
        == #Success s.RetCode
        == #Success
        == #Fails

      s.Wait ::= #Wait | #NoWait

    При выборе режима #Wait выполнение текущей программы приостанавливается
    до тех пор, пока не закончит выполняться указанная программа.
    При выборе режима #NoWait запускается указанная программа и сразу же
    после этого управление возвращается в "материнскую" программу ---
    обе программы продолжают выполняться параллельно.

    Параметр s.RetCode, представляющий собой код возврата программы,
    возвращается только в режиме #Wait.
  */

  using namespace refalrts;
  using refalapi::CharArray;

  // Скобки вызова и имя функции
  Iter open_call = arg_begin;
  move_left(arg_begin, arg_end);
  Iter func_name = arg_begin;
  move_left(arg_begin, arg_end);
  Iter close_call = arg_end;
  move_right(arg_begin, arg_end);

  // Сопоставление с образцом
  Iter sWait = 0;
  Iter eProgram_b = 0, eProgram_e = 0;
  Iter eCmdLine_b = 0, eCmdLine_e = 0;
  CharArray program, cmdline;
  bool matched =
    svar_left( sWait, arg_begin, arg_end )
    && ( cDataIdentifier == sWait->tag )
    && (
         ('@@Wait@@' == sWait->ident_info)
         || ('@@NoWait@@' == sWait->ident_info)
       )
    && brackets_left( eProgram_b, eProgram_e, arg_begin, arg_end )
    && (CharArray::from_sequence(program, eProgram_b, eProgram_e) == cSuccess)
    && brackets_left( eCmdLine_b, eCmdLine_e, arg_begin, arg_end )
    && (CharArray::from_sequence(cmdline, eCmdLine_b, eCmdLine_e) == cSuccess)
    && empty_seq( arg_begin, arg_end );

  if( matched == false ) return cRecognitionImpossible;

  bool wait_mode = ('@@Wait@@' == sWait->ident_info);
  char *str_program = (program.strlen() ? program.c_str() : NULL);
  char *str_cmdline = (cmdline.strlen() ? cmdline.c_str() : NULL);

  // Вызов API-функции

  STARTUPINFO si;
  PROCESS_INFORMATION pi;

  ZeroMemory( &si, sizeof(si) );
  si.cb = sizeof(si);
  ZeroMemory( &pi, sizeof(pi) );

  fflush(stdout);
  fflush(stderr);

  bool process_started = CreateProcess(
    str_program, // Имя исполняемого модуля программы.
    str_cmdline, // Командная строка программы.
    NULL, // Дескрипторы процесса не наследуются.
    NULL, // Дескрипторы потока не наследуются.
    TRUE, // Попробуем наследовать дескрипторы.
    0, // Флаги создания не заданы.
    NULL, // Использовать родительские переменные среды.
    NULL, // Использовать родительскую текущую папку.
    &si,
    &pi
  );

  // Начиная с этого итератора фрагмент поля зрения выбрасывается
  Iter garbage_start = func_name;

  if( process_started ) {
    // Процесс запущен

    if( wait_mode ) {
      // Ожидаем завершения программы и получаем код возврата
      DWORD ret_code = 0;

      WaitForSingleObject( pi.hProcess, INFINITE );
      GetExitCodeProcess( pi.hProcess, & ret_code );

      /*
        Повторно используем имя функции, т.к. открывающая скобка активации
        оставлена для возврата #Success/#Fails.
      */

      func_name->function_info = 0;
      func_name->tag = cDataNumber;
      func_name->number_info = ret_code;

      // Первые два узла используются --- выбрасывать начинаем с третьего.
      garbage_start = sWait;
    }

    CloseHandle( pi.hProcess );
    CloseHandle( pi.hThread );

    // Переинициализация открывающей скобки как #Success
    open_call->link_info = 0;
    open_call->tag = cDataIdentifier;
    open_call->ident_info = '@@Success@@';
  } else {
    // Переинициализация открывающей скобки как #Fails
    open_call->link_info = 0;
    open_call->tag = cDataIdentifier;
    open_call->ident_info = '@@Fails@@';
  }

  // Очистка поля зрения и завершение
  splice_to_freelist( vm, garbage_start, close_call );
  return cSuccess;
'@@;

$NATIVE CppSR FUNCTION
$ENTRY Time @@'
  // Формат <Time> == e.Time

  using namespace refalrts;

  // Скобки вызова и имя функции
  Iter open_call = arg_begin;
  move_left(arg_begin, arg_end);
  // Iter func_name = arg_begin;
  move_left(arg_begin, arg_end);
  Iter close_call = arg_end;
  move_right(arg_begin, arg_end);

  // Формат аргумента --- пустое выражение

  if( ! empty_seq(arg_begin, arg_end) ) return cRecognitionImpossible;

  time_t raw_time;
  time(&raw_time);
  char *str_time = ctime(&raw_time);

  char *p = str_time;
  while (*p && *p != '\n') {
    ++p;
  }
  *p = '\0';

  unsigned len = strlen(str_time);
  Iter time_b = 0, time_e = 0;

  reset_allocator(vm);

  if( ! alloc_chars(vm, time_b, time_e, str_time, len) ) return cNoMemory;

  // Построение результата
  splice_evar(open_call, time_b, time_e);
  splice_to_freelist(vm, open_call, close_call);
  return cSuccess;
'@@;

$END CoreBE::OS::MOS.
