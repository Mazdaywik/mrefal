$PROGRAM VersionUpdater;

$IMPORT InOut = MInOut;
$IMPORT MLoadSaveVersion;
$IMPORT MOS;
$IMPORT MStrings;
$IMPORT MUtilitiesBanner;

$ENTRY Go =
  <MUtilitiesBanner::Type 'VersionUpdater'>
  <Process
    <FindOptions <MOS::ArgList>>
  >;

FindOptions {
  (e.ProgName) =
    <ShowHelp e.ProgName>;

  (e.ProgName) e.Arguments =
    <FilterOptions
      (ProgName e.ProgName)
      <DoFindOptions e.Arguments>
    >;
}

DoFindOptions {
  ('/verfile:' e.VerName) e.Arguments =
    (VerFile <MStrings::Trim e.VerName>)
    <DoFindOptions e.Arguments>;

  ('/srcfile:' e.SrcFile) e.Arguments =
    (SrcFile <MStrings::Trim e.SrcFile>)
    <DoFindOptions e.Arguments>;

  (e.UnknownOption) e.Arguments =
    (UnknownOption e.UnknownOption)
    <DoFindOptions e.Arguments>;

  = ;
}

FilterOptions {
  (ProgName e.ProgName)
  e.Options-B (UnknownOption e.UnknownOption) e.Options-E =
    <ShowUnknownOption e.UnknownOption>
    <FilterOptions
      (ProgName e.ProgName)
      e.Options-B e.Options-E Broken
    >;

  (ProgName e.ProgName) e.Options Broken =
    <ShowHelp e.ProgName>;

  (ProgName e.ProgName)
  e.Options-B (SrcFile e.FileName) e.Options-E =
    (SrcFile e.FileName)
    <FilterOptions
      (ProgName e.ProgName)
      e.Options-B e.Options-E
    >;

  (ProgName e.ProgName)
  (VerFile e.File1) (VerFile e.File2) e.Tail =
    <ShowManyVersions>
    <ShowHelp e.ProgName>;

  (ProgName e.ProgName) (VerFile e.VerFile) =
    (VerFile e.VerFile) (ProgName e.ProgName);
}

Process {
  (SrcFile e.Src1) e.Sources (VerFile e.VerFile) (ProgName e.ProgName) =
    <UpdateFiles
      <MLoadSaveVersion::Increment
        <MLoadSaveVersion::Load e.VerFile>
      >
      (ProgName e.ProgName)
      (SrcFile e.Src1) e.Sources
      (VerFile e.VerFile)
    >;

  (SrcFile e.Src1) e.Sources (ProgName e.ProgName) =
    <ShowMissingVersion>
    <ShowHelp e.ProgName>;

  (VerFile e.VerFile) (ProgName e.ProgName) =
    <ShowMissingSources>
    <ShowHelp e.ProgName>;
}

UpdateFiles {
  t.Version (ProgName e.ProgName) (VerFile e.FileName) =
    <MLoadSaveVersion::Save t.Version e.FileName>;

  t.Version (ProgName e.ProgName) (SrcFile e.SrcFile) e.Files =
    <CheckSaving
      <MLoadSaveVersion::UpdateSource
        t.Version e.SrcFile
      > (e.SrcFile) (ProgName e.ProgName) e.Files
    >;
}

CheckSaving {
  t.Version Success (e.?CurFile) (ProgName e.ProgName) e.Files =
    <UpdateFiles t.Version (ProgName e.ProgName) e.Files>;

  t.?Version ErrorInFile (e.CurFile) (ProgName e.ProgName) e.?Files =
    <ShowBrokenFile e.CurFile>
    <ShowHelp e.ProgName>;
}

//------------------------------------------------------------------------------
// Последующие Show-функции предназначены для вывода сообщений об ошибках
//------------------------------------------------------------------------------

ShowHelp e.ProgName =
  <InOut::WriteLine>
  <InOut::WriteLine 'Using'>
  <InOut::WriteLine
    '\t' e.ProgName ' /verfile:verfile.txt /srcfile:srcfile.mref'
  >
  <InOut::WriteLine 'Option /srcfile: can be repeated'>
  <MOS::Exit 1>;

ShowUnknownOption
  e.UnknownOption =
    <InOut::WriteLine 'UNKNOWN OPTION: ' e.UnknownOption>;

ShowManyVersions =
  <InOut::WriteLine 'OPTION /verfile: MUST BE SINGLE'>;

ShowMissingVersion =
  <InOut::WriteLine 'MISSING OPTION /verfile:'>;

ShowMissingSources =
  <InOut::WriteLine 'MISSING OPTION /srcfile:'>;

ShowBrokenFile
  e.FileName =
    <InOut::WriteLine 'BROKEN FILE ' e.FileName>;

$END VersionUpdater.