$PROGRAM Test;

$IMPORT InOut, M23Tree = M23Tree-Fake, FileIO, MLambda, MStrings;

$ENTRY Go =
  <Operate
    <M23Tree::Create>
    <Parse
      <MLambda::Map
        & UnBracket-N
        <FileIO::Load 'Documentation/Журнал/Changes.txt'>
        //<FileIO::Load 'Test.mref'>
      >
    >
  >;

UnBracket-N (e.Line) = e.Line '\n';

Parse
  e.Content =
    <DoParse () <UnBlanks e.Content>>;

UnBlanks
  e.Content =
    <MStrings::Trim
      <DoUnBlanks <MLambda::Map & UnifyBlank e.Content>>
    >;

UnifyBlank {
  '\t' = ' ';
  '\n' = ' ';

  s.Other = s.Other;
}

DoUnBlanks {
  e.Content-B '  ' e.Content-E =
    e.Content-B <DoUnBlanks ' ' e.Content-E>;

  e.Content = e.Content;
}

DoParse {
  (e.Word) ' ' e.Tail = (e.Word) <DoParse () e.Tail>;

  (e.Word) s.Next e.Tail = <DoParse (e.Word s.Next) e.Tail>;

  (e.Word) = (e.Word);
}

Operate
  t.Tree e.Values =
    <MLambda::Nil
      <M23Tree::Print t.Tree>
      <MLambda::Reduce
        & Delete
        <MLambda::Reduce
          & Insert
          t.Tree
          <Double e.Values>
        >
        e.Values
      >
    >;

Double {
  (e.Word1) (e.Word2) e.Tail =
    ((e.Word1) (e.Word2)) <Double e.Tail>;

  (e.Word) = ((e.Word) (e.Word));

  = ;
}

Insert
  t.Tree ((e.Word1) (e.Word2)) =
    <InOut::WriteLine 'INSERT (' e.Word1 '): ' e.Word2>
    <Insert-Aux
      <M23Tree::Insert t.Tree (e.Word1) e.Word2>
    >;

Insert-Aux
  t.Tree =
    <Print t.Tree>
    t.Tree;

Print
  t.Tree =
    //<M23Tree::Print t.Tree>
    ;

Delete
  t.Tree (e.Word) =
    <Delete-SwExist
      (e.Word)
      <M23Tree::Lookup t.Tree (e.Word)>
    >;

Delete-SwExist {
  (e.Word) t.Tree Success e.Value =
    <InOut::WriteLine 'LOOKUP Success (' e.Word ') = (' e.Value ')'>
    <Delete-Aux t.Tree (e.Word)>;

  (e.Word) t.Tree Fails =
    <InOut::WriteLine 'LOOKUP Fails (' e.Word ')'>
    <Delete-Aux t.Tree (e.Word)>;
}


Delete-Aux
  t.Tree (e.Word) =
    <SwDelete
      (e.Word) <M23Tree::Extract t.Tree (e.Word)>
    >;

SwDelete {
  (e.Word) t.Tree Success e.Value =
    <InOut::WriteLine 'DELETE Success (' e.Word ') = (' e.Value ')'>
    <Lookup t.Tree (e.Word)>;

  (e.Word) t.Tree Fails =
    <InOut::WriteLine 'DELETE Fails (' e.Word ')'>
    <Lookup t.Tree (e.Word)>;
}

Lookup
  t.Tree (e.Word) =
    <SwLookup (e.Word) <M23Tree::Lookup t.Tree (e.Word)>>;

SwLookup {
  (e.Word) t.Tree Success e.Value =
    <InOut::WriteLine 'LOOKUP Success (' e.Word ') = (' e.Value ')'>
    <Print t.Tree>
    t.Tree;

  (e.Word) t.Tree Fails =
    <InOut::WriteLine 'LOOKUP Fails (' e.Word ')'>
    <Print t.Tree>
    t.Tree;
}

$END Test.
