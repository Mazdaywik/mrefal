$MODULE Grab_info;

$IMPORT FileIO;
$IMPORT InOut;
$IMPORT MLambda;
$IMPORT MOS;
$IMPORT MStrings;
$IMPORT MUtilitiesBanner;

$ENTRY Go =
  <MUtilitiesBanner::Type 'Grab_info'>
  <Main <MOS::ArgList>>;

Main {
  (e.?ProgName) = <InOut::WriteLine 'usage grab_info filelist'>;

  (e.?ProgName) ('@' e.FilesList) =
    <ScanFiles
      <FileIO::Load e.FilesList>
    >;

  (e.?ProgName) e.FilesList =
    <ScanFiles e.FilesList>;
}

ScanFiles
  e.FilesList =
    <FileIO::Save
      ('interfaces.txt')
      <UnDoubleEmptyLines
        <DoScanFiles e.FilesList>
      >
    >;

UnDoubleEmptyLines {
  () () e.Rest =
    <UnDoubleEmptyLines () e.Rest>;

  (e.Line) e.Rest =
    (e.Line)
    <UnDoubleEmptyLines e.Rest>;

  = ;
}

DoScanFiles {
  (e.FileName) e.Rest =
    <ExtractInfo e.FileName>
    <DoScanFiles e.Rest>;

  = ;
}

ExtractInfo
  e.FileName =
    <CheckEmpty
      <ModuleToInterface
        <FileIO::Load e.FileName>
      >
    >;

CheckEmpty {
  (e.?Line1) =
    /* empty */;

  (e.?Line1) (e.?Line2) =
    /* empty */;

  (e.?Line1) (e.?Line2) (e.?Line3) =
    /* empty */;

  e.Lines = e.Lines;
}

ModuleToInterface {
  ('$MODULE ' e.ModuleName)
  e.ModuleContent =
    (<MStrings::Repeat 80 '#'>)
    ('Module ' e.ModuleName)
    <ModuleToInterface e.ModuleContent>;

  ('$END ' e.ModuleName)
  e.ModuleContent =
    // ('End of module ' e.ModuleName)
    <ModuleToInterface e.ModuleContent>;

  (e.?BeforeComment '/**' e.InComment)
  e.ModuleContent =
    <TypeDocComment
      (e.InComment) e.ModuleContent
    >;

  ('$ENTRY ' e.FuncName ' ' e.?Tail)
  e.ModuleContent =
    // ('Entry ' e.FuncName)
    <ModuleToInterface e.ModuleContent>;

  ('$ENTRY ' e.FuncName)
  e.ModuleContent =
    // ('Entry ' e.FuncName)
    <ModuleToInterface e.ModuleContent>;

  ('$IMPORT ' e.ModuleName)
  e.ModuleContent =
    // ('Import ' e.ModuleName)
    <ModuleToInterface e.ModuleContent>;

  ('//STARTCUT') e.ModuleContent =
    ('# STARTCUT')
    <Cutting e.ModuleContent>;

  (e.?OtherLine)
  e.ModuleContent =
    <ModuleToInterface e.ModuleContent>;

  = ();
}

TypeDocComment {
  e.ContentOfComment
  (e.LastCommentLine '*/' e.AfterComment)
  e.ModuleContent =
    <UnTab
      e.ContentOfComment
      (e.LastCommentLine)
    >
    <ModuleToInterface
      (e.AfterComment)
      e.ModuleContent
    >;

  e.UnclosedComment =
    ('???Warning: Unclosed comment')
    e.UnclosedComment;
}

Cutting {
  ('//ENDCUT') e.ModuleContent =
    ('# ENDCUT')
    <ModuleToInterface e.ModuleContent>;

  (e.OtherLine) e.ModuleContent =
    (e.OtherLine) <Cutting e.ModuleContent>;

  = ();
}

UnTab
  e.Lines =
    <MLambda::Map
      & UnTabLine
      e.Lines
    >;

UnTabLine {
  ('\t' e.Line) = (e.Line);

  ('  ' e.Line) = (e.Line);

  (e.Line) = (e.Line);
}

$END Grab_info.