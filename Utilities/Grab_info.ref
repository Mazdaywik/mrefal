E1 {
=
<E2 >;
}

E3 {
e.i1=
<E4 e.i1 >;
}

E5 {
e.i1=
<E6 e.i1 >;
}

L1 {
WriteLine=
 E5  ;
WriteLine-T=
 E3  ;
ReadLine=
 E1  ;
FnPtr=
 L1  ;
MRefalRTS Prout=
 E6  ;
MRefalRTS Print=
 E4  ;
MRefalRTS Card=
 E2  ;
MRefalRTS Open=
 E7  ;
MRefalRTS Get=
 E8  ;
MRefalRTS Put=
 E9  ;
MRefalRTS Putout=
 E10  ;
MRefalRTS Arg=
 E11  ;
MRefalRTS Exit=
 E12  ;
MRefalRTS ExistFile=
 E13  ;
MRefalRTS ExistFile-T=
 E14  ;
MRefalRTS System=
 E15  ;
MRefalRTS Env=
 E16  ;
MRefalRTS Upper=
 E17  ;
MRefalRTS Lower=
 E18  ;
MRefalRTS Lenw=
 E19  ;
MRefalRTS Numb=
 E20  ;
MRefalRTS Symb=
 E21  ;
MRefalRTS Ord=
 E22  ;
MRefalRTS Chr=
 E23  ;
MRefalRTS Add=
 E24  ;
MRefalRTS Sub=
 E25  ;
MRefalRTS Compare=
 E26  ;
}


E6 { e.i2=<Prout e.i2 >; }

E4 { e.i2=<Print e.i2 >; }

E2 {=<Card >; }

E7 {
s.i3 s.i4 e.i5=<Open s.i3 s.i4 e.i5 >;
}

E8 { s.i4=<Get s.i4 >; }

E9 { s.i4 e.i1=<Put s.i4 e.i1 >; }

E10 { s.i4 e.i1=<Putout s.i4 e.i1 >; }

E11 { s.i6=<Arg s.i6 >; }

E12 { s.i7=<Exit s.i7 >; }

E13 { e.i8=<ExistFile e.i8 >; }

E14 {
e.i8=<ExistFile e.i8 > e.i8;
}

E17 { e.i9=<Upper e.i9 >; }

E18 { e.i9=<Lower e.i9 >; }

E24 { e.i9=<Add e.i9 >; }

E25 { e.i9=<Sub e.i9 >; }

E19 { e.i9=<Lenw e.i9 >; }

E20 { e.i10=<Numb e.i10 >; }

E26 { t.i11 t.i12=<Compare t.i11 t.i12 >; }

E21 { s.i13=<Symb s.i13 >; }

E15 { e.i14=<System e.i14 >; }

E22 { e.i9=<Ord e.i9 >; }

E23 { e.i9=<Chr e.i9 >; }

E16 { e.i15=<GetEnv e.i15 >; }


S1 {
e.i16=
<Dg('FileIO::G_Handles' )>
<Br('FileIO::G_Handles' ) '='  e.i16 >;
}

L2 {
t.i17( Structure e.i18 ) e.i19=
<L2<E27 t.i17 e.i18 > e.i19 >;
t.i17=
<E28 t.i17 >;
}

E29 {
( Structure e.i8 ) e.i20=
<L2<E30 'w'  e.i8 > e.i20 >;
}

L3 {
t.i17 0=
<E28 t.i17 >;
t.i17 e.i1 0=
( Structure e.i1 )<E28 t.i17 >;
t.i17 e.i1=
( Structure e.i1 )<L3<E31 t.i17 > >;
}

E32 {
e.i8=
<L3<E31<E30 'r'  e.i8 > > >;
}

E33 {
( Structure s.i21 e.i8 )=
( Structure s.i21 e.i8 ) e.i8;
}

E34 {
( Structure s.i21 e.i8 ) e.i1=
( Structure s.i21 e.i8 )<E9 s.i21 e.i1 >;
}

E27 {
( Structure s.i21 e.i8 ) e.i1=
( Structure s.i21 e.i8 )<E10 s.i21 e.i1 >;
}

E31 {
( Structure s.i21 e.i8 )=
( Structure s.i21 e.i8 )<E8 s.i21 >;
}

E28 {
( Structure s.i21 e.i8 )=
<E7 'r'  s.i21 'nul'  ><L4 s.i21 >;
}

E35 {
( Structure s.i21 e.i8 )=
<E7 'r'  s.i21 e.i8 ><L4 s.i21 >;
}

L5 {
None s.i3 e.i8=
<E36 'Can\'t open file '  e.i8 ': no free handles'  >;
s.i21 s.i3 e.i8=
( Structure s.i21 e.i8 )<E7 s.i3 s.i21 e.i8 >;
}

L6 {
True e.i8=
<L5<L7 > 'r'  e.i8 >;
False e.i8=
<E36 'Can\'t open file \''  e.i8 '\' for reading'  >;
}

E30 {
'r'  e.i8=
<L6<E13 e.i8 > e.i8 >;
'w'  e.i8=
<L5<L7 > 'w'  e.i8 >;
s.i22 e.i8=
<E36 s.i22 ' -- unknown open file mode ('  'file \''  e.i8 '\')'  >;
}

L4 {
s.i21=
<S1<S1 > s.i21 >;
}

L8 {
=
None;
s.i21 e.i23=
s.i21<S1 e.i23 >;
}

L7 {
=
<L8<S1 > >;
}

E37 {
=
<S1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 >;
}

L9 {
G_Handles=
 S1  ;
Init=
 E37  ;
GetHandle=
 L7  ;
SwGetHandle=
 L8  ;
ReleaseHandle=
 L4  ;
Open=
 E30  ;
CheckExistAndOpenForRead=
 L6  ;
SwOpen=
 L5  ;
Close=
 E35  ;
NulClose=
 E28  ;
ReadLine=
 E31  ;
WriteLine=
 E27  ;
WriteLine-T=
 E34  ;
ExtractFileName=
 E33  ;
Load=
 E32  ;
DoLoad=
 L3  ;
Save=
 E29  ;
DoSave=
 L2  ;
FnPtr=
 L9  ;
MSelfDiag Error=
 E36  ;
MSelfDiag Log=
 E38  ;
MSelfDiag Log-T=
 E39  ;
MSelfDiag Assert-Eq-T=
 E40  ;
MSelfDiag Assert-NE-T=
 E41  ;
MSelfDiag Assert-Eq=
 E42  ;
MSelfDiag Assert-NE=
 E43  ;
MSelfDiag Init=
 E44  ;
MRefalRTS Prout=
 E6  ;
MRefalRTS Print=
 E4  ;
MRefalRTS Card=
 E2  ;
MRefalRTS Open=
 E7  ;
MRefalRTS Get=
 E8  ;
MRefalRTS Put=
 E9  ;
MRefalRTS Putout=
 E10  ;
MRefalRTS Arg=
 E11  ;
MRefalRTS Exit=
 E12  ;
MRefalRTS ExistFile=
 E13  ;
MRefalRTS ExistFile-T=
 E14  ;
MRefalRTS System=
 E15  ;
MRefalRTS Env=
 E16  ;
MRefalRTS Upper=
 E17  ;
MRefalRTS Lower=
 E18  ;
MRefalRTS Lenw=
 E19  ;
MRefalRTS Numb=
 E20  ;
MRefalRTS Symb=
 E21  ;
MRefalRTS Ord=
 E22  ;
MRefalRTS Chr=
 E23  ;
MRefalRTS Add=
 E24  ;
MRefalRTS Sub=
 E25  ;
MRefalRTS Compare=
 E26  ;
}


E44 {
=
<L10<E15 'md Info>nul 2>nul'  > ><E7 'w'  19 'Info/Log.txt'  >;
}

L10 {
e.i24=
;
}

L11 {
( Structure e.i25 ) t.i26 t.i27=
<E36 'ASSERT VIOLATION: '  t.i26 ' '  e.i25 ' '  t.i27 >;
( Structure e.i25 ) t.i26 t.i27 e.i28=
<E36 'ASSERT VIOLATION: '  t.i26 ' '  e.i25 ' '  t.i27 '('  e.i28 ')'  >;
}

L12 {
t.i29 t.i29( Structure e.i26 ) t.i27 e.i28=
e.i26;
t.i30 t.i25 t.i26 t.i27 e.i28=
<L11 t.i25 t.i26 t.i27 e.i28 >;
}

E43 {
t.i26 t.i27 e.i28=
<L10<E41 t.i26 t.i27 e.i28 > >;
}

E42 {
t.i26 t.i27 e.i28=
<L10<E40 t.i26 t.i27 e.i28 > >;
}

E41 {
t.i26 t.i27 e.i28=
<L12( Structure '!='  )<L13 t.i26 t.i27 > e.i28 >;
}

E40 {
t.i26 t.i27 e.i28=
<L12( Structure '='  )<L13 t.i26 t.i27 > e.i28 >;
}

L13 {
t.i31 t.i31=
( Structure '='  ) t.i31 t.i31;
t.i26 t.i27=
( Structure '!='  ) t.i26 t.i27;
}

E39 {
e.i28=
<E9 19 e.i28 >;
}

E38 {
e.i28=
<E10 19 e.i28 >;
}

E36 {
e.i28=
<E6 'INTERNAL ERROR: '  e.i28 ><E38 'INTERNAL ERROR: '  e.i28 ><E12 1 >;
}

L14 {
Error=
 E36  ;
Log=
 E38  ;
Log-T=
 E39  ;
AssertAux=
 L13  ;
Assert-Eq-T=
 E40  ;
Assert-NE-T=
 E41  ;
Assert-Eq=
 E42  ;
Assert-NE=
 E43  ;
SwAssert=
 L12  ;
PrintAssert=
 L11  ;
Nil=
 L10  ;
Init=
 E44  ;
FnPtr=
 L14  ;
MRefalRTS Prout=
 E6  ;
MRefalRTS Print=
 E4  ;
MRefalRTS Card=
 E2  ;
MRefalRTS Open=
 E7  ;
MRefalRTS Get=
 E8  ;
MRefalRTS Put=
 E9  ;
MRefalRTS Putout=
 E10  ;
MRefalRTS Arg=
 E11  ;
MRefalRTS Exit=
 E12  ;
MRefalRTS ExistFile=
 E13  ;
MRefalRTS ExistFile-T=
 E14  ;
MRefalRTS System=
 E15  ;
MRefalRTS Env=
 E16  ;
MRefalRTS Upper=
 E17  ;
MRefalRTS Lower=
 E18  ;
MRefalRTS Lenw=
 E19  ;
MRefalRTS Numb=
 E20  ;
MRefalRTS Symb=
 E21  ;
MRefalRTS Ord=
 E22  ;
MRefalRTS Chr=
 E23  ;
MRefalRTS Add=
 E24  ;
MRefalRTS Sub=
 E25  ;
MRefalRTS Compare=
 E26  ;
}


E45 {
e.i15=
<E16 e.i15 >;
}

L15 {
t.i32 0=
<E28 t.i32 ><E46 'del ~setlst.tmp'  >;
t.i32 e.i15 '='  e.i33=
( Structure( Structure e.i15 )<E45 e.i15 > )<L15<E31 t.i32 > >;
}

E47 {
=
<E46 'set > ~setlst.tmp'  ><L15<E31<E30 'r'  '~setlst.tmp'  > > >;
}

E48 {
s.i7=
<E12 s.i7 >;
}

E49 {
=
<E50 0 >;
}

L16 {
s.i34=
;
s.i34 e.i35=
( Structure e.i35 )<L16<E51 s.i34 ><E50 s.i34 > >;
}

E52 {
=
<L16 1<E50 0 > >;
}

E50 {
s.i6=
<E11 s.i6 >;
}

L17 {
e.i2=
;
}

E46 {
e.i14=
<L17<E15 e.i14 > >;
}

L18 {
System=
 E46  ;
Nil=
 L17  ;
Arg=
 E50  ;
ArgList=
 E52  ;
DoArgList=
 L16  ;
ProgName=
 E49  ;
Exit=
 E48  ;
EnvList=
 E47  ;
DoEnvList=
 L15  ;
Env=
 E45  ;
FnPtr=
 L18  ;
MRefalRTS Prout=
 E6  ;
MRefalRTS Print=
 E4  ;
MRefalRTS Card=
 E2  ;
MRefalRTS Open=
 E7  ;
MRefalRTS Get=
 E8  ;
MRefalRTS Put=
 E9  ;
MRefalRTS Putout=
 E10  ;
MRefalRTS Arg=
 E11  ;
MRefalRTS Exit=
 E12  ;
MRefalRTS ExistFile=
 E13  ;
MRefalRTS ExistFile-T=
 E14  ;
MRefalRTS System=
 E15  ;
MRefalRTS Env=
 E16  ;
MRefalRTS Upper=
 E17  ;
MRefalRTS Lower=
 E18  ;
MRefalRTS Lenw=
 E19  ;
MRefalRTS Numb=
 E20  ;
MRefalRTS Symb=
 E21  ;
MRefalRTS Ord=
 E22  ;
MRefalRTS Chr=
 E23  ;
MRefalRTS Add=
 E24  ;
MRefalRTS Sub=
 E25  ;
MRefalRTS Compare=
 E26  ;
FileIO Init=
 E37  ;
FileIO Open=
 E30  ;
FileIO Close=
 E35  ;
FileIO NulClose=
 E28  ;
FileIO ReadLine=
 E31  ;
FileIO WriteLine=
 E27  ;
FileIO WriteLine-T=
 E34  ;
FileIO ExtractFileName=
 E33  ;
FileIO Load=
 E32  ;
FileIO Save=
 E29  ;
Math Add=
 E53  ;
Math Sub=
 E54  ;
Math Inc=
 E51  ;
Math Dec=
 E55  ;
Math Compare=
 E56  ;
Math Compare-T=
 E57  ;
}


E57 {
s.i11 s.i12=
<E56 s.i11 s.i12 > s.i11 s.i12;
}

L19 {
'-' =
'<' ;
'0' =
'=' ;
'+' =
'>' ;
}

E56 {
s.i11 s.i12=
<L19<E26 s.i11 s.i12 > >;
}

E55 {
s.i6=
<E54 s.i6 1 >;
}

E51 {
s.i6=
<E53 s.i6 1 >;
}

E54 {
e.i2=
<E25 e.i2 >;
}

E53 {
e.i2=
<E24 e.i2 >;
}

L20 {
Add=
 E53  ;
Sub=
 E54  ;
Inc=
 E51  ;
Dec=
 E55  ;
Compare=
 E56  ;
R5-to-MRef=
 L19  ;
Compare-T=
 E57  ;
FnPtr=
 L20  ;
MRefalRTS Prout=
 E6  ;
MRefalRTS Print=
 E4  ;
MRefalRTS Card=
 E2  ;
MRefalRTS Open=
 E7  ;
MRefalRTS Get=
 E8  ;
MRefalRTS Put=
 E9  ;
MRefalRTS Putout=
 E10  ;
MRefalRTS Arg=
 E11  ;
MRefalRTS Exit=
 E12  ;
MRefalRTS ExistFile=
 E13  ;
MRefalRTS ExistFile-T=
 E14  ;
MRefalRTS System=
 E15  ;
MRefalRTS Env=
 E16  ;
MRefalRTS Upper=
 E17  ;
MRefalRTS Lower=
 E18  ;
MRefalRTS Lenw=
 E19  ;
MRefalRTS Numb=
 E20  ;
MRefalRTS Symb=
 E21  ;
MRefalRTS Ord=
 E22  ;
MRefalRTS Chr=
 E23  ;
MRefalRTS Add=
 E24  ;
MRefalRTS Sub=
 E25  ;
MRefalRTS Compare=
 E26  ;
}


L21 {
( Structure '\t'  e.i1 ) e.i36=
( Structure e.i1 )<L21 e.i36 >;
( Structure e.i1 ) e.i36=
( Structure e.i1 )<L21 e.i36 >;
=
;
}

L22 {
e.i37( Structure e.i38 '*/'  e.i39 ) e.i40=
<L21 e.i37( Structure e.i38 ) ><L23( Structure e.i39 ) e.i40 >;
e.i41=
( Structure '???Warning: Unclosed comment'  ) e.i41;
}

L23 {
( Structure '$MODULE '  e.i42 ) e.i40=
( Structure '==============================='  )( Structure 'Modu'
'le '  e.i42 )<L23 e.i40 >;
( Structure '$END '  e.i42 ) e.i40=
<L23 e.i40 >;
( Structure e.i43 '/**'  e.i44 ) e.i40=
<L22( Structure e.i44 ) e.i40 >;
( Structure '$ENTRY '  e.i45 ' '  e.i46 ) e.i40=
<L23 e.i40 >;
( Structure '$ENTRY '  e.i45 ) e.i40=
<L23 e.i40 >;
( Structure '$IMPORT '  e.i42 ) e.i40=
<L23 e.i40 >;
( Structure e.i47 ) e.i40=
<L23 e.i40 >;
=
( Structure );
}

L24 {
e.i8=
<L23<E32 e.i8 > >;
}

L25 {
( Structure e.i8 ) e.i36=
<L24 e.i8 ><L25 e.i36 >;
=
;
}

L26 {
( Structure )( Structure ) e.i36=
<L26( Structure ) e.i36 >;
( Structure e.i1 ) e.i36=
( Structure e.i1 )<L26 e.i36 >;
=
;
}

L27 {
e.i48=
<E29( Structure 'interfaces.txt'  )<L26<L25 e.i48 > > >;
}

L28 {
( Structure e.i49 )=
<E5 'usage grab_info filelist'  >;
( Structure e.i49 )( Structure '@'  e.i48 )=
<L27<E32 e.i48 > >;
( Structure e.i49 ) e.i48=
<L27 e.i48 >;
}

E58 {
=
<L28<E52 > >;
}

L29 {
Go=
 E58  ;
Main=
 L28  ;
ScanFiles=
 L27  ;
UnDoubleEmptyLines=
 L26  ;
DoScanFiles=
 L25  ;
ExtractInfo=
 L24  ;
ModuleToInterface=
 L23  ;
TypeDocComment=
 L22  ;
UnTab=
 L21  ;
FnPtr=
 L29  ;
InOut WriteLine=
 E5  ;
InOut WriteLine-T=
 E3  ;
InOut ReadLine=
 E1  ;
FileIO Init=
 E37  ;
FileIO Open=
 E30  ;
FileIO Close=
 E35  ;
FileIO NulClose=
 E28  ;
FileIO ReadLine=
 E31  ;
FileIO WriteLine=
 E27  ;
FileIO WriteLine-T=
 E34  ;
FileIO ExtractFileName=
 E33  ;
FileIO Load=
 E32  ;
FileIO Save=
 E29  ;
MOS System=
 E46  ;
MOS Arg=
 E50  ;
MOS ArgList=
 E52  ;
MOS ProgName=
 E49  ;
MOS Exit=
 E48  ;
MOS EnvList=
 E47  ;
MOS Env=
 E45  ;
}



$ENTRY Go { = 
	<E37>
	<E44>
	<E58>
;}
