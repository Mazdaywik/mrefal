$PROGRAM TODO_list;

$IMPORT FileIO;
$IMPORT InOut;
$IMPORT MLambda;
$IMPORT MOS;
$IMPORT MStrings;
$IMPORT MUtilitiesBanner;

$ENTRY Go =
  <MUtilitiesBanner::Type 'TODO_list'>
  <Main <MOS::ArgList>>;

Main {
  (e.ProgName) e.Arguments =
    <ParseArguments ((ProgName e.ProgName)) e.Arguments>;
}

ParseArguments {
  ((ProgName e.ProgName) e.Options-B (ToDoFile e.ToDoFile) e.Options-E)
  ( '=TODO:' e.FileName ) e.Tail =
    <Usage e.ProgName>;

  ((ProgName e.ProgName) e.Options)
  ( '=TODO:' e.ToDoFile ) e.Tail =
    <ParseArguments
      ((ProgName e.ProgName)
        e.Options
        (ToDoFile <MStrings::Trim e.ToDoFile>)
      )
      e.Tail
    >;

  ((ProgName e.ProgName) e.Options-B (DoneFile e.DoneFile) e.Options-E)
  ( '=DONE:' e.FileName ) e.Tail =
    <Usage e.ProgName>;

  ((ProgName e.ProgName) e.Options)
  ( '=DONE:' e.DoneFile ) e.Tail =
    <ParseArguments
      ((ProgName e.ProgName)
        e.Options
        (DoneFile <MStrings::Trim e.DoneFile>)
      )
      e.Tail
    >;

  ((ProgName e.ProgName) e.Options-B (ListFile e.ListFile) e.Options-E)
  ( '=LIST:' e.FileName ) e.Tail =
    <Usage e.ProgName>;

  ((ProgName e.ProgName) e.Options)
  ( '=LIST:' e.ListFile ) e.Tail =
    <ParseArguments
      ((ProgName e.ProgName)
        e.Options
        (ListFile <MStrings::Trim e.ListFile>)
      )
      e.Tail
    >;

  ((ProgName e.ProgName) e.Options-B (SrcFile e.SrcFile) e.Options-E)
  ( '=SRC:' e.FileName ) e.Tail =
    <Usage e.ProgName>;

  ((ProgName e.ProgName) e.Options)
  ( '=SRC:' e.SrcFile ) e.Tail =
    <ParseArguments
      ((ProgName e.ProgName)
        e.Options
        (SrcFile <MStrings::Trim e.SrcFile>)
      )
      e.Tail
    >;

  ((ProgName e.ProgName) e.Options-B (SrcFile e.SrcFile) e.Options-E) =
    <RestoreMissing-Todo
      ((ProgName e.ProgName) (SrcFile e.SrcFile)) e.Options-B e.Options-E
    >;

  ((ProgName e.ProgName) e.OtherOptions) =
    <Usage e.ProgName>;
}

Usage
  e.ProgName =
    <InOut::WriteText
      ('Usage:')
      ('  ' e.ProgName
        ' =SRC:srcfile [=TODO:todofile] [=DONE:donefile] [=LIST:listfile]'
      )
    >;

RestoreMissing-Todo {
  ((ProgName e.ProgName) (SrcFile e.SrcFile))
  e.Options-B (ToDoFile e.ToDoFile) e.Options-E =
    <RestoreMissing-Done
      ((ProgName e.ProgName) (SrcFile e.SrcFile) (ToDoFile e.ToDoFile))
      e.Options-B e.Options-E
    >;

  ((ProgName e.ProgName) (SrcFile e.SrcFile)) e.Options =
    <RestoreMissing-Done
      ((ProgName e.ProgName)
        (SrcFile e.SrcFile)
        (ToDoFile 'TODOs.txt')
      )
      e.Options
    >;
}

RestoreMissing-Done {
  (e.Options) e.Options-B (DoneFile e.DoneFile) e.Options-E =
    <RestoreMissing-List
      (e.Options (DoneFile e.DoneFile)) e.Options-B e.Options-E
    >;

  (e.ScannedOptions) e.Options =
    <RestoreMissing-List
      (e.ScannedOptions (DoneFile 'DONEs.txt')) e.Options
    >;
}

RestoreMissing-List {
  (e.Options) e.Options-B (ListFile e.ListFile) e.Options-E =
    <FinishOptions
      (e.Options (ListFile e.ListFile)) e.Options-B e.Options-E
    >;

  (e.ScannedOptions) e.Options =
    <FinishOptions
      (e.ScannedOptions (ListFile 'LIST.txt')) e.Options
    >;
}

FinishOptions
  (e.Options) = <ProcessTags e.Options>;

ProcessTags {
  (ProgName e.ProgName)
  (SrcFile e.SrcFile) (ToDoFile e.ToDoFile)
  (DoneFile e.DoneFile) (ListFile e.ListFile) =
    <OutputInfo
      (ProgName e.ProgName) (ToDoFile e.ToDoFile) (DoneFile e.DoneFile)
      (ListFile e.ListFile) (SrcFile e.SrcFile)
      <Parse e.SrcFile>
    >;
}

Parse
  e.SrcFile =
    <Parse-SwLinesProcessed
      <MLambda::Map
        & AnalyzeLine <FileIO::Load e.SrcFile>
      >
    >;

AnalyzeLine
  (e.Line) =
    <AnalyzeLine-SwType
      (e.Line) <MStrings::Trim e.Line>
    >;

AnalyzeLine-SwType {
  // Дата формата [дд.мм.гггг - (ч)ч:мм:сс,сс]
  (e.Line) '[' e.Date ' - ' e.Time ']' =
    (Time e.Date ' - ' e.Time);

  (e.Line) '[' e.Tag ':' e.Description ']' =
    (Tag
      <SwitchTag <MStrings::Trim e.Tag>>
      <MStrings::Trim e.Description>
    );

  (e.Line) e.OtherLine =
    (Line e.Line);
}

SwitchTag {
  'TODO' = ToDo;
  'DONE' = Done;
  'TOTHINK' = ToThink;
  'THINKED' = Thinked;
  'ERROR' = Error;
  'FIXED' = Fixed;
  'CHANGED' = Changed;

  e.UnknownTag =
    BadTag 'Unknown tag [' e.UnknownTag '] ';
}

Parse-SwLinesProcessed {
  e.Lines-B (Tag BadTag e.Description) e.Lines-E =
    Errors-BadTags
    <InOut::WriteText
      ('FOUND ERRORS')
      <MLambda::Map
        & PrintBadTags
        (Tag BadTag e.Description) e.Lines-E
      >
    >;

  e.Lines =
    <SortTags
      <GroupLines <MakePackets e.Lines>>
    >;
}

MakePackets {
  e.BeforeTag (Tag s.Tag e.Description) e.Tail =
    e.BeforeTag
    <MakePackets-Aux
      (Packet (s.Tag e.Description)) e.Tail
    >;

  e.OtherLines = e.OtherLines;
}

MakePackets-Aux {
  (Packet e.Tags) (Tag s.Tag e.Description) e.Tail =
    <MakePackets-Aux
      (Packet e.Tags (s.Tag e.Description)) e.Tail
    >;

  (Packet e.Tags) e.Tail =
    (Packet e.Tags) <MakePackets e.Tail>;
}

PrintBadTags {
  (Tag BadTag e.Description) = ('  ' e.Description);

  t.OtherLine = ;
}

GroupLines {
  (Time e.Time1) e.InTime (Time e.Time2) e.Tail =
    <GroupByTags (Time e.Time1) e.InTime>
    <GroupLines (Time e.Time2) e.Tail>;

  (Time e.Time) e.Tail =
    <GroupByTags (Time e.Time) e.Tail>;

  e.TextBefore (Time e.Time) e.Tail =
    <GroupLines (Time e.Time) e.Tail>;
}

GroupByTags {
  (Time e.Time)
  (Packet e.Tags) e.InTag (Packet e.Tags2) e.Tail =
    <ReduplicatePacket (e.Time) (e.Tags) e.InTag>
    <GroupByTags
      (Time e.Time) (Packet e.Tags2) e.Tail
    >;

  (Time e.Time)
  (Packet e.Tags) e.InTag =
    <ReduplicatePacket (e.Time) (e.Tags) e.InTag>;

  (Time e.Time)
  e.TextBefore (Packet e.Tags) e.Tail =
    <GroupByTags
      (Time e.Time) (Packet e.Tags) e.Tail
    >;

  // Возможен случай, когда в данной записи никаких тегов не было
  (Time e.Time) e.Tail = ;
}

ReduplicatePacket {
  (e.Time) ((s.Tag  e.Description)) e.Text =
    (s.Tag (e.Description) (e.Time) e.Text);

  (e.Time) ((s.Tag e.Description) e.Tags) e.Text =
    (s.Tag (e.Description) (e.Time) e.Text)
    <ReduplicatePacket (e.Time) (e.Tags) e.Text>;
}

SortTags
  e.Tags =
    <MLambda::UnBracket
      <MLambda::Reduce
        <MLambda::Composite
          & UnBracketFirst
          & AnalyzeTag
          & MLambda.Bracket
        >
        ( (/* opened */) (/*closed*/) )
        e.Tags
      >
    >;

UnBracketFirst
  (e.First) e.Tail = e.First e.Tail;

AnalyzeTag {
  // TOTHINK / THINKED

  ( e.Opened-B (ToThink (e.Description) e.Info) e.Opened-E ) ( e.Closed )
  (ToThink (e.Description) (e.Time) e.AddInfo) =
    (
      e.Opened-B e.Opened-E
      (ToThink (e.Description) e.Info (ToThink (e.Time) e.AddInfo))
    )
    ( e.Closed );

  ( e.Opened ) ( e.Closed )
  (ToThink (e.Description) (e.Time) e.AddInfo) =
    ( e.Opened (ToThink (e.Description) (ToThink (e.Time) e.AddInfo)) )
    ( e.Closed );

  ( e.Opened-B (ToThink (e.Description) e.Info ) e.Opened-E ) ( e.Closed )
  (Thinked (e.Description) (e.Time) e.AddInfo) =
    ( e.Opened-B e.Opened-E )
    ( e.Closed
      (Thinked (e.Description) e.Info (Thinked (e.Time) e.AddInfo))
    );

  ( e.Opened ) ( e.Closed )
  (Thinked (e.Description) (e.Time) e.AddInfo) =
    ( e.Opened
      (BadTag ('Widow [Thinked] ' e.Description) (BadTag (e.Time) e.AddInfo))
    )
    ( e.Closed );

  // TODO / DONE

  ( e.Opened-B (ToDo (e.Description) e.Info) e.Opened-E ) ( e.Closed )
  (ToDo (e.Description) (e.Time) e.AddInfo) =
    (
      e.Opened-B e.Opened-E
      (ToDo (e.Description) e.Info (ToDo (e.Time) e.AddInfo))
    )
    ( e.Closed );

  ( e.Opened-B (ToThink (e.Description) e.Info) e.Opened-E ) ( e.Closed )
  (ToDo (e.Description) (e.Time) e.AddInfo) =
    (
      e.Opened-B e.Opened-E
      (ToDo (e.Description) e.Info (ToDo (e.Time) e.AddInfo))
    )
    ( e.Closed );

  ( e.Opened ) ( e.Closed )
  (ToDo (e.Description) (e.Time) e.AddInfo) =
    ( e.Opened (ToDo (e.Description) (ToDo (e.Time) e.AddInfo)) )
    ( e.Closed );

  ( e.Opened-B (ToDo (e.Description) e.Info ) e.Opened-E ) ( e.Closed )
  (Done (e.Description) (e.Time) e.AddInfo) =
    ( e.Opened-B e.Opened-E )
    ( e.Closed
      (Done (e.Description) e.Info (Done (e.Time) e.AddInfo))
    );

  ( e.Opened ) ( e.Closed )
  (Done (e.Description) (e.Time) e.AddInfo) =
    ( e.Opened
      (BadTag ('Widow [DONE] ' e.Description) (BadTag (e.Time) e.AddInfo))
    )
    ( e.Closed );

  // ERROR / FIXED

  ( e.Opened-B (Error (e.Description) e.Info) e.Opened-E ) ( e.Closed )
  (Error (e.Description) (e.Time) e.AddInfo) =
    (
      e.Opened-B e.Opened-E
      (Error (e.Description) e.Info (Error (e.Time) e.AddInfo))
    )
    ( e.Closed );

  ( e.Opened ) ( e.Closed )
  (Error (e.Description) (e.Time) e.AddInfo) =
    ( e.Opened (Error (e.Description) (Error (e.Time) e.AddInfo)) )
    ( e.Closed );

  ( e.Opened-B (Error (e.Description) e.Info ) e.Opened-E ) ( e.Closed )
  (Fixed (e.Description) (e.Time) e.AddInfo) =
    ( e.Opened-B e.Opened-E )
    ( e.Closed
      (Fixed (e.Description) e.Info (Fixed (e.Time) e.AddInfo))
    );

  ( e.Opened ) ( e.Closed )
  (Fixed (e.Description) (e.Time) e.AddInfo) =
    ( e.Opened )
    ( e.Closed
      (Fixed (e.Description) (Fixed (e.Time) e.AddInfo))
    );

  // CHANGED

  ( e.Opened ) ( e.Closed )
  (Changed (e.Description) (e.Time) e.AddInfo) =
    ( e.Opened )
    ( e.Closed
      (Changed (e.Description) (Changed (e.Time) e.AddInfo))
    );
}

OutputInfo {
  (ProgName e.ProgName) (ToDoFile e.ToDoFile) (DoneFile e.DoneFile)
  (ListFile e.ListFile) (SrcFile e.SrcFile)
  Errors-BadTags =
    ;

  (ProgName e.ProgName) (ToDoFile e.ToDoFile) (DoneFile e.DoneFile)
  (ListFile e.ListFile) (SrcFile e.SrcFile)
  ( e.Opened-B (BadTag e.Info) e.Opened-E ) ( e.Closed ) =
    <InOut::WriteText
      ('FOUND ERRORS')
      <MLambda::Map
        & PrintBadTagsEx
        (BadTag e.Info) e.Opened-E
      >
    >;

  (ProgName e.ProgName) (ToDoFile e.ToDoFile) (DoneFile e.DoneFile)
  (ListFile e.ListFile) (SrcFile e.SrcFile)
  ( e.Opened ) ( e.Closed ) =
    <SaveReport (e.ToDoFile) e.Opened>
    <SaveReport (e.DoneFile)
      <MStrings::Reverse e.Closed>
    >
    <FileIO::Save
      (e.ListFile)
      ('  Список актуальных задач из ' e.SrcFile)
      ()
      <MLambda::Map & PrintHeaders e.Opened>
    >;
}

PrintBadTagsEx {
  (BadTag (e.Description) e.Info) =
    <PrintHeaders (BadTag (e.Description) e.Info)>;

  (s.OtherTag (e.Description) e.Info) = ;
}

PrintHeaders
  (s.Tag (e.Description) e.Info) =
    ('  ' <PrintTag s.Tag> e.Description);

PrintTag
  s.Tag = '[' <SwPrintTag s.Tag> '] ';

SwPrintTag {
  ToDo = 'TODO';
  Done = 'DONE';
  ToThink = 'TOTHINK';
  Thinked = 'THINKED';
  Error = 'ERROR';
  Fixed = 'FIXED';
  Changed = 'CHANGED';
  BadTag = 'BAD-TAG';
}

SaveReport
  (e.OutName) e.Info =
    <FileIO::Save
      (e.OutName)
      <MLambda::Map & PrintExtTag e.Info>
    >;

PrintExtTag
  (s.Tag (e.Description) e.TagInfo) =
    (<MStrings::Repeat 100 '='>)
    ('  ' <PrintTag s.Tag> e.Description)
    (<MStrings::Repeat 100 '='>)
    ()
    <PrintComments e.TagInfo>
    ()();

PrintComments {
  = ;

  t.Comment = <PrintComment t.Comment>;

  t.Comment1 t.Comment2 e.Tail =
    <PrintComment t.Comment1>
    (<MStrings::Repeat 100 '-'>)
    <PrintComments t.Comment2 e.Tail>;
}

PrintComment
  (s.Tag (e.Time) e.Lines) =
    ('  ' <PrintTag s.Tag> e.Time)
    ()
    <TrimEmpty
      <MLambda::Map & PrepareLine e.Lines>
    >;

PrepareLine (Line e.Line) = (e.Line);

TrimEmpty {
  () e.Lines = <TrimEmpty e.Lines>;

  e.Lines = <TrimEmpty-R e.Lines>;
}

TrimEmpty-R {
  e.Lines () = <TrimEmpty-R e.Lines>;

  e.Lines = e.Lines;
}

$END TODO_list.
