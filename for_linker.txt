TypeCallSeq {
	e.FunList =
		('Starter')
		('$ENTRY Go { =')
		<DoTypeCallSeq e.FunList>
		(';}');
}

DoTypeCallSeq {
	(e.NextFunc) e.Funcs =
		('\t<$' e.NextFunc '$>')
		<DoTypeCallSeq e.Funcs>;

	= ;
}

// <TypeStart t.StartInfo t.ExeTyper t.Aliases> == t.ExeTyper t.Aliases
TypeStart {
	( t.InitFuncs () t.FinalFuncs ) t.ExeTyper t.Aliases =
		<MError::LinkError 'Startfunction not found'>;

	( (e.InitFuncs) t.GoFunction (e.FinalFuncs) ) t.ExeTyper t.Aliases =
		<TypeUnit
			t.Aliases
			t.ExeTyper
			<TypeCallSeq
				e.InitFuncs t.GoFunction e.FinalFuncs
			>
		>;
}


/**
	<CreateStartUnit t.StartInfo>
		== t.ExeTyper t.Aliases t.StartUnit
*/
CreateStartUnit {
	( t.InitFuncs () t.FinalFuncs )=
		<MError::LinkError 'Startfunction not found'>;

	( (e.InitFuncs) t.GoFunction (e.FinalFuncs) )=
		(<TypeCallSeq e.InitFuncs t.GoFunction e.FinalFuncs>);
}
