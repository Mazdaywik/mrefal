$MODULE MContext;

$IMPORT MQualifiedName;

/*------------------------------------------------------------------------------
  Внутренняя структура:
    t.Context ::= 
      [Context t.ModuleInfo*]
    t.ModuleInfo ::= 
      ( t.ModuleName (s.Attrib e.Value)* )
    t.ModuleName ::=
      ( (e.Segment)* )
------------------------------------------------------------------------------*/
$DATA Context;

//------------------------------------------------------------------------------

/**
  <Create> == t.Context
*/
$ENTRY Create = [Context];

//------------------------------------------------------------------------------

/**
  <Destroy t.Context> == empty
*/
$ENTRY Destroy
  [Context e.Info] = ;

//------------------------------------------------------------------------------

/**
  <UpdateInfo t.Context t.QualifiedName e.NewOptionList>
    == t.UpdatedContext Success
    == t.Context Fails
*/
$ENTRY UpdateInfo
  [Context e.Info] t.QualifiedName e.NewOptions =
    <UpdateInfo-FindName
      [Context e.Info]
      ( <MQualifiedName::Parse t.QualifiedName> )
      e.NewOptions
    >;

UpdateInfo-FindName {
  [Context e.Info-B ( (e.Name) e.OldOptions) e.Info-E]
  (e.Name) e.NewOptions =
    <UpdateInfo-UpdateOptions
      (e.Info-B) (e.Info-E) (e.Name)
      <UpdateOptions
        (e.OldOptions) e.NewOptions
      >
    >;

  [Context e.Info] (e.Name) e.NewOptions =
    <UpdateInfo-UpdateOptions
      (e.Info) () (e.Name)
      <UpdateOptions
        (<DefaultOptions>) e.NewOptions
      >
    >;
}

UpdateInfo-UpdateOptions {
  (e.Info-B) (e.Info-E) (e.Name) (e.OldOptions) Success e.Options =
    [Context e.Info-B ( (e.Name) e.Options ) e.Info-E]
    Success;

  (e.Info-B) (e.Info-E) (e.Name) (e.OldOptions) Fails =
    [Context e.Info-B ( (e.Name) e.OldOptions ) e.Info-E]
    Fails;
}

DefaultOptions
  =
    /*
      Информация о входных и выходных частях (старое)
      Формат: None | e.FileName
    */
    (Sym None) (Out None) (Src None)

    // Информация о входных и выходных частях
    (FrontEnd None) // None | s.FrontEnd e.FileName
    (BackEnds) // e.BackEnds ::= (s.BackEnd e.FileName)*

    // Информация о статусе компилирования

    // Библиотека или файл с исходником
    (Type Unknown) // Unknown | Library | Source

    /*
      Был ли обработан?
      * Unknown -- если не инициализровано;
      * Found -- модуль только обнаружен;
      * InCmdLine --- модуль обнаружен в командной строке;
      * SuccessCompiled -- успешно откомпилирован,
      имеет смысл только для исходника;
      * Updated
        * для исходника -- выходные файлы корректны, не компилировался;
        * для библиотечного модуля -- выходные файлы корректны;
        (если возможна проверка корректности для back-end,
        гарантируется, что корректна хотя бы SymInfo);
      * Errors -- в процессе обработки произошла ошибка;
        * для исходника -- ошибки в процессе компиляции;
        * для библиотечного модуля -- выходные файлы повреждены.
    */
    (Status_NEW Unknown)

    /*
      Время последней модификации. Нужно для того, чтобы определить,
      необходима ли перекомпиляция: импортирующие модули должны быть
      откомпилированы позже импортируемых.
      Unknown -- информация не доступна
      e.DateTime -- см. MainStructures.txt
    */
    (LastTime Unknown)

    (NeedRecompile Unknown) // Unknown | True | False

    (ModuleType Program) // Program | Module
    (CachedSym None) // None | t.IModule
    (BaseDirectory Current) // Current | e.FileName
    /*
      Объединяло Type и Status_NEW, устаревшее.
      Unknown | InCompiling | Library | Recompiled | Updated
    */
    (Status Unknown)
    ;

UpdateOptions
  (e.OldOptions) e.NewOptions =
    (e.OldOptions)
    <DoUpdateOptions
      () (e.OldOptions) e.NewOptions
    >;

DoUpdateOptions {
  (e.NewOptions) () = Success e.NewOptions;

  (e.Updated)
  ( (s.Option e.OldValue) e.OldOptions )
  e.NewOptions-B (s.Option e.NewValue) e.NewOptions-E =
    <DoUpdateOptions
      (e.Updated
        (s.Option e.NewValue)
      )
      (e.OldOptions) e.NewOptions-B e.NewOptions-E
    >;

  (e.Updated) (t.NextOption e.OldOptions) e.NewOptions =
    <DoUpdateOptions
      (e.Updated t.NextOption) (e.OldOptions) e.NewOptions
    >;

  (e.Updated) () e.NewOptions =
    Fails;
}

//------------------------------------------------------------------------------

/**
  <ExtractOption t.Context t.QualifiedName s.Option>
    == t.Context Found e.Option
    == t.Context OptionNotFound
    == t.Context ModuleNotFound
*/
$ENTRY ExtractOption
  [Context e.Info] t.QualifiedName s.Option =
    <ExtractOption-FindName
      [Context e.Info]
      <MQualifiedName::Parse t.QualifiedName>
      s.Option
    >;

ExtractOption-FindName {
  [Context
    e.Info-B
    ( (e.Name) e.Options-B (s.Option e.Info) e.Options-E )
    e.Info-E
  ] e.Name s.Option =
    [Context
      e.Info-B
      ( (e.Name) e.Options-B (s.Option e.Info) e.Options-E )
      e.Info-E
    ] Found e.Info;

  [Context e.Info-B ((e.Name) e.Options) e.Info-E]
  e.Name s.Option =
    [Context e.Info-B ((e.Name) e.Options) e.Info-E]
    OptionNotFound;

  [Context e.Info] e.Name s.Option =
    [Context e.Info] ModuleNotFound;
}

//------------------------------------------------------------------------------

/**
  <ExtractModulesList t.Context>
    == t.Context t.QualifiedName*
*/
$ENTRY ExtractModulesList
  [Context e.Info] =
    <DoExtractModulesList
      () () e.Info
    >;

DoExtractModulesList {
  (e.ScannedInfo) (e.Result)
  ( (e.NextName) e.Options ) e.Tail =
    <DoExtractModulesList
      (e.ScannedInfo
        ( (e.NextName) e.Options )
      )
      (e.Result
        <MQualifiedName::Create e.NextName>
      )
      e.Tail
    >;

  (e.ScannedInfo) (e.Result) =
    [Context e.ScannedInfo] e.Result;
}

//------------------------------------------------------------------------------

/**
  <LastModule t.Context t.QualifiedName>
    == t.UpdatedContext Success
    == t.Context Fails
*/
$ENTRY LastModule
  [Context e.Info] t.QualifiedName =
    <LastModule-FindName
      [Context e.Info]
      <MQualifiedName::Parse t.QualifiedName>
    >;

LastModule-FindName {
  [Context e.Info-B ( (e.Name) e.Options ) e.Info-E]
  e.Name =
    [Context e.Info-B e.Info-E ( (e.Name) e.Options )]
    Success;

  t.Context e.Name =
    t.Context Fails;
}

//------------------------------------------------------------------------------

/**
  <GetProgName t.Context>
    == t.Context t.QualifiedName
*/
$ENTRY GetProgName
  [Context e.Info ( (e.LastName) e.Options )] =
    [Context e.Info ( (e.LastName) e.Options)]
    <MQualifiedName::Create e.LastName>;

$END MContext.