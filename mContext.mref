$MODULE MContext;

$IMPORT MQualifiedName;
$IMPORT MStrings;

/*------------------------------------------------------------------------------
  Внутренняя структура:
    t.Context ::= 
      [Context t.ModuleInfo*]
    t.ModuleInfo ::= 
      ( t.ModuleName (s.Attrib e.Value)* )
    t.ModuleName ::=
      ( (e.Segment)* )
------------------------------------------------------------------------------*/
$DATA Context;

//------------------------------------------------------------------------------

/**
  <Create> == t.Context
*/
$ENTRY Create = [Context];

//------------------------------------------------------------------------------

/**
  <Destroy t.Context> == empty
*/
$ENTRY Destroy
  [Context e.Info] = ;

//------------------------------------------------------------------------------

/**
  <UpdateInfo t.hContext t.QualifiedName e.NewOptionList>
    == t.hUpdatedContext Success
    == t.hContext Fails s.Error
  s.Error ::= UnknownOption | MismatchCase
*/
$ENTRY UpdateInfo
  [Context e.Info] t.QualifiedName e.NewOptions =
    <UpdateInfo-FindName
      [Context e.Info]
      t.QualifiedName
      (
        <MStrings::Lower
          <MQualifiedName::Parse t.QualifiedName>
        >
      )
      e.NewOptions
    >;

UpdateInfo-FindName {
  [Context
    e.Info-B
    ( (e.Name)
      e.OldOptions-B (RealName Unknown) e.OldOptions-E
    )
    e.Info-E
  ]
  t.QualifiedName (e.Name) e.NewOptions =
    <UpdateInfo-UpdateOptions
      (e.Info-B) (e.Info-E) (e.Name)
      <UpdateOptions
        (e.OldOptions-B (RealName Unknown) e.OldOptions-E)
        e.NewOptions
      >
    >;

  [Context
    e.Info-B
    ( (e.Name)
      e.OldOptions-B
      (RealName t.RealQualifiedName)
      e.OldOptions-E
    )
    e.Info-E
  ]
  t.QualifiedName (e.Name) e.NewOptions =
    <UpdateInfo-FindName-CheckName
      (e.Info-B) (e.Info-E)
      (e.OldOptions-B) (e.OldOptions-E)
      (RealName t.RealQualifiedName)
      ( <MQualifiedName::Parse t.RealQualifiedName> )
      ( <MQualifiedName::Parse t.QualifiedName> )
      ( e.Name ) e.NewOptions
    >;

  [Context e.Info] t.QualifiedName (e.Name) e.NewOptions =
    <UpdateInfo-UpdateOptions
      (e.Info) () (e.Name)
      <UpdateOptions
        (<DefaultOptions>) e.NewOptions
      >
    >;
}

UpdateInfo-FindName-CheckName {
  (e.Info-B) (e.Info-E) (e.OldOptions-B) (e.OldOptions-E)
  (RealName t.RealQualifiedName)
  ( e.RealName ) ( e.RealName ) ( e.Name ) e.NewOptions =
    <UpdateInfo-UpdateOptions
      (e.Info-B) (e.Info-E) (e.Name)
      <UpdateOptions
        ( e.OldOptions-B (RealName t.RealQualifiedName) e.OldOptions-E )
        e.NewOptions
      >
    >;

  (e.Info-B) (e.Info-E) (e.OldOptions-B) (e.OldOptions-E)
  (RealName t.RealQualifiedName)
  ( e.RealName ) ( e.ExternalName ) (e.Name) e.NewOptions =
    [Context
      e.Info-B
      ((e.Name) e.OldOptions-B (RealName t.RealQualifiedName) e.OldOptions-E)
      e.Info-E
    ]
    Fails MismatchCase;
}

UpdateInfo-UpdateOptions {
  (e.Info-B) (e.Info-E) (e.Name) (e.OldOptions) Success e.Options =
    [Context e.Info-B ( (e.Name) e.Options ) e.Info-E]
    Success;

  (e.Info-B) (e.Info-E) (e.Name) (e.OldOptions) Fails =
    [Context e.Info-B ( (e.Name) e.OldOptions ) e.Info-E]
    Fails UnknonwOption;
}

UpdateOptions
  (e.OldOptions) e.NewOptions =
    (e.OldOptions)
    <DoUpdateOptions
      () (e.OldOptions) e.NewOptions
    >;

DoUpdateOptions {
  (e.NewOptions) () = Success e.NewOptions;

  (e.Updated)
  ( (s.Option e.OldValue) e.OldOptions )
  e.NewOptions-B (s.Option e.NewValue) e.NewOptions-E =
    <DoUpdateOptions
      (e.Updated
        (s.Option e.NewValue)
      )
      (e.OldOptions) e.NewOptions-B e.NewOptions-E
    >;

  (e.Updated) (t.NextOption e.OldOptions) e.NewOptions =
    <DoUpdateOptions
      (e.Updated t.NextOption) (e.OldOptions) e.NewOptions
    >;

  (e.Updated) () e.NewOptions =
    Fails;
}

/**---------------------------------------------------------------------------*/
//STARTCUT
DefaultOptions
  =
    // Информация о входных и выходных частях
    (FrontEnd Unknowns) // Unknowns | None | s.FrontEnd e.FileName
    (BackEnds Unknowns) // e.BackEnds ::= Unknowns | (s.BackEnd e.FileName)*

    // Информация о настоящем имени модуля (контекст индексируется без учёта
    // регистра, но регистр надо проверять)
    (RealName Unknown) // Unknown | t.QualifiedName

    // Информация о статусе компилирования

    // Библиотека или файл с исходником
    (Type Unknown) // Unknown | Library | Source

    /*
      Был ли обработан?
      * Unknown -- если не инициализровано;
      * Found -- модуль только обнаружен;
      * SuccessCompiled -- успешно откомпилирован,
      имеет смысл только для исходника;
      * LocalUpdated
        * для исходника -- выходные файлы корректны, не компилировался;
        * для библиотечного модуля -- выходные файлы корректны;
          (если возможна проверка корректности для back-end;
          гарантируется, что корректна хотя бы SymInfo);
      * GlobalUpdated
        * для исходников и библиотечных модулей аналогично LocalUpdated
          с тем отличием, что GlobalUpdated также рекурсивно установлен
          у всех импортируемых модулей;
      * SuccessUpdated
        * для библиотеки -- библиотека рекурсивно просканирована и для
          всех рекурсивных библиотек установлен SuccessUpdated,
        * для исходника -- то же, что и GlobalUpdated, только для всех
          импортируемых модулей (в т.ч. библиотечных) установлено
          SuccessUpdated;
      * NeedRecompile -- имеет смысл только для исходника,
        означает, что модуль нужно перекомпилировать;
      * Errors -- в процессе обработки произошла ошибка:
        * для исходника -- ошибки в процессе компиляции;
        * для библиотечного модуля -- выходные файлы повреждены.
    */
    (Status_NEW Unknown)

    /*
      Время последней модификации. Нужно для того, чтобы определить,
      необходима ли перекомпиляция: импортирующие модули должны быть
      откомпилированы позже импортируемых.
      Unknown -- информация не доступна
      e.DateTime -- см. MainStructures.txt
    */
    (LastTime Unknown)

    (ModuleType Main) // Main | Regular
    (CachedSym None) // None | t.IModule
    (BaseDirectory Current) // Current | e.FileName
    /*
      Объединяло Type и Status_NEW, устаревшее.
      Unknown | InCompiling | Library | Recompiled | Updated
    */
    (Status Unknown)
    ;
//ENDCUT
/**---------------------------------------------------------------------------*/

//------------------------------------------------------------------------------

/**
  <ExtractOption t.hContext t.QualifiedName s.Option>
    == t.hContext Found e.Option
    == t.hContext OptionNotFound
    == t.hContext ModuleNotFound
    == t.hContext MismatchCase
*/
$ENTRY ExtractOption
  [Context e.Info] t.QualifiedName s.Option =
    <ExtractOption-CheckName
      [Context e.Info]
      <MQualifiedName::Parse-T t.QualifiedName>
      s.Option
    >;

ExtractOption-CheckName
  t.hContext t.QualifiedName e.ExternalName s.Option =
    <ExtractOption-CheckName-Aux
      ( e.ExternalName )
      <ExtractOption-FindName
        t.hContext
        <MStrings::Lower e.ExternalName>
        s.Option
      >
    >;

ExtractOption-CheckName-Aux {
  ( e.ExternalName )
  t.hContext Found e.Info =
    <ExtractOption-CheckName-SwMatch
      (e.Info) (e.ExternalName)
      <ExtractOption-FindName
        t.hContext
        <MStrings::Lower e.ExternalName>
        RealName
      >
    >;

  ( e.ExternalName )
  t.hContext OptionNotFound = t.hContext OptionNotFound;

  ( e.ExternalName )
  t.hContext ModuleNotFound = t.hContext ModuleNotFound;
}

ExtractOption-CheckName-SwMatch {
  (e.Info) (e.ExternalName)
  t.hContext Found Unknown =
    t.hContext Found e.Info;

  (e.Info) (e.ExternalName)
  t.hContext Found t.RealName =
    <ExtractOption-CheckName-SwMatch-Aux
      (e.Info) (e.ExternalName)
      <MQualifiedName::Parse t.RealName>
      t.hContext
    >;

  // Остальные варианты не рассматриваем -- нарушение инварианта
}

ExtractOption-CheckName-SwMatch-Aux {
  (e.Info) (e.RealName) e.RealName t.hContext =
    t.hContext Found e.Info;

  (e.Info) (e.ExternalName) e.RealName t.hContext =
    t.hContext MismatchCase;
}

ExtractOption-FindName {
  [Context
    e.Info-B
    ( (e.Name) e.Options-B (s.Option e.Info) e.Options-E )
    e.Info-E
  ] e.Name s.Option =
    [Context
      e.Info-B
      ( (e.Name) e.Options-B (s.Option e.Info) e.Options-E )
      e.Info-E
    ] Found e.Info;

  [Context e.Info-B ((e.Name) e.Options) e.Info-E]
  e.Name s.Option =
    [Context e.Info-B ((e.Name) e.Options) e.Info-E]
    OptionNotFound;

  [Context e.Info] e.Name s.Option =
    [Context e.Info] ModuleNotFound;
}

$END MContext.