$MODULE MExeTyper;

$IMPORT FileIO;
$IMPORT Math;

/*------------------------------------------------------------------------------
	Внутренний формат
	(ExeTyper s.Limit s.Free t.FOut e.Converted)
------------------------------------------------------------------------------*/

/**
	<Create s.Limit e.OutputName> == t.ExeTyper
*/
$ENTRY Create
	s.Limit e.OutputFileName =
		(ExeTyper s.Limit s.Limit <FileIO::Open 'w' e.OutputFileName>);

/**
	<Destroy t.ExeTyper> == empty
*/
$ENTRY Destroy
	(ExeTyper s.Limit s.Free t.FOut e.Converted) =
		<FileIO::Close
			<FileIO::WriteLine t.FOut e.Converted>
		>;

/**
	<Flush t.ExeTyper> == t.ExeTyper
*/
$ENTRY Flush {
	(ExeTyper s.Limit s.Free t.FOut) =
		(ExeTyper s.Limit s.Limit t.FOut);

	(ExeTyper s.Limit s.Free t.FOut e.Converted) =
		(ExeTyper
			s.Limit s.Limit
			<FileIO::WriteLine t.FOut e.Converted>
		);
}

Dec {
	Limit = Limit;
	0 = Limit;
	1 = Limit;
	s.Other = <Math::Dec s.Other>;
}

// Уменьшаем на 2 (при переносе экранированного символа в кавычках)
Dec2 s.Size = <Dec <Dec s.Size>>;

// Средняя длина переименного элемента <= 4: X123
Dec4 s.Size = <Dec2 <Dec2 s.Size>>;

Inc {
	Limit = Limit;
	s.Other = <Math::Inc s.Other>;
}

// Перед этими символами пробелы не нужны
SingleChars = '=<>;(){}';

/**
	<TypeChar t.ExeTyper s.Char> = t.ExeTyper
*/
$ENTRY TypeChar {
	(ExeTyper s.Limit s.Free t.FOut e.Converted) '\t' =
		<TypeChar
			(ExeTyper s.Limit s.Free t.FOut e.Converted) ' '
		>;

	// ИНВАРИАНТ. Два пробела в e.Converted следовать подряд не могут
	// (за исключением закавыченного случая).
	(ExeTyper s.Limit s.Free t.FOut e.Converted ' ') ' ' =
		(ExeTyper s.Limit s.Free t.FOut e.Converted ' ');

	// Перед символами из SingleChars пробелы не нужны.
	(ExeTyper s.Limit s.Free t.FOut e.Converted ' ') s.Char =
		<TypeCharWithSpaceBefore
			(ExeTyper s.Limit s.Free t.FOut e.Converted)
			s.Char <SingleChars>
		>;

	// Можем разрывать строку только на месте пробелов
	(ExeTyper s.Limit Limit t.FOut e.Converted) ' ' =
		(ExeTyper s.Limit s.Limit <FileIO::WriteLine t.FOut e.Converted>);

	// После символов из SingleChars пробелы не нужны
	(ExeTyper s.Limit s.Free e.Converted s.Char) ' ' =
		<TypeCharWithSpaceAfter
			(ExeTyper s.Limit s.Free e.Converted)
			s.Char <SingleChars>
		>;
	
	(ExeTyper s.Limit s.Free t.FOut e.Converted) s.Char =
		(ExeTyper s.Limit <Dec s.Free> t.FOut e.Converted s.Char);
}

TypeCharWithSpaceBefore {
	(ExeTyper s.Limit s.Free t.FOut e.Converted)
	s.Char e.?SingleChars-B s.Char e.?SingleChars-E =
		(ExeTyper s.Limit s.Free t.FOut e.Converted s.Char);

	(ExeTyper s.Limit s.Free t.FOut e.Converted) s.Char e.?SingleChars =
		(ExeTyper
			s.Limit <Dec s.Free> t.FOut e.Converted ' ' s.Char
		);
}

TypeCharWithSpaceAfter {
	(ExeTyper s.Limit s.Free t.FOut e.Converted)
	s.Char e.?SingleChars-B s.Char e.?SingleChars-E =
		(ExeTyper s.Limit s.Free t.FOut e.Converted s.Char);

	(ExeTyper s.Limit s.Free t.FOut e.Converted)
	s.Char e.?SingleChars =
		(ExeTyper
			s.Limit <Dec s.Free> t.FOut e.Converted s.Char ' '
		);
}

/**
	<TypeQuoted t.ExeTyper s.Quote e.Text> == t.ExeTyper
*/
$ENTRY TypeQuoted {
	(ExeTyper s.Limit Limit t.FOut e.Converted) s.Quote e.Text =
		<TypeQuoted
			(ExeTyper s.Limit s.Limit <FileIO::WriteLine t.FOut e.Converted>)
			s.Quote e.Text
		>;

	// Обрабатываем случай, когда на строке осталось место только для одно символа
	(ExeTyper s.Limit 1 t.FOut e.Converted) s.Quote e.Text =
		<TypeQuoted
			(ExeTyper s.Limit s.Limit <FileIO::WriteLine t.FOut e.Converted>)
			s.Quote e.Text
		>;

	(ExeTyper s.Limit s.Free t.FOut e.Converted) s.Quote e.Text =
		<DoTypeQuoted
			(ExeTyper s.Limit <Dec2 s.Free> t.FOut e.Converted s.Quote)
			s.Quote e.Text
		>;
}

DoTypeQuoted {
	/* Не рассматриваем символ за бэкслешем, а сразу же его переносим */
	(ExeTyper s.Limit s.Free t.FOut e.Converted) s.Quote '\\' s.Escaped e.Tail =
		<DoTypeQuoted
			(ExeTyper
				s.Limit
				<Dec2 s.Free>
				t.FOut e.Converted '\\' s.Escaped
			)
			s.Quote e.Tail
		>;

	/* Обрабатываем $ */
	(ExeTyper s.Limit s.Free t.FOut e.Converted) s.Quote '$$' e.Tail =
		<DoTypeQuoted
			(ExeTyper s.Limit <Dec s.Free> t.FOut e.Converted '$') s.Quote e.Tail
		>;

	/* Необходимо разрезать текст в кавычках таким образом, чтобы на отдель-
	ной строке не осталось '' или "".
	При этом случай, когда на строке не осталось места для символа, не обраба-
	тываем. Этот случай предотвращается в функции TypeQuoted */

	// Строка заканчивается на \', печатаемый текст закончился -- печатаем \''
	(ExeTyper s.Limit Limit t.FOut e.Converted '\\' s.Quote) s.Quote =
		(ExeTyper
			s.Limit s.Limit
			<FileIO::WriteLine t.FOut e.Converted '\\' s.Quote s.Quote>
		);

	// Строка заканчивается на \' и осталась ещё длинная строка.
	// Предыдущую строку заканчиваем \'', а на новой печатаем текст в кавычках.
	(ExeTyper s.Limit Limit t.FOut e.Converted '\\' s.Quote) s.Quote e.Text =
		<TypeQuoted
			(ExeTyper
				s.Limit s.Limit
				<FileIO::WriteLine t.FOut e.Converted '\\' s.Quote s.Quote>
			) s.Quote e.Text
		>;

	// Закончилась строка и закончился текст в кавычках
	(ExeTyper s.Limit Limit t.FOut e.Converted) s.Quote =
		(ExeTyper
			s.Limit s.Limit
			<FileIO::WriteLine t.FOut e.Converted s.Quote>
		);

	// Закончилась строка, текст в кавычках остался
	(ExeTyper s.Limit Limit t.FOut e.Converted) s.Quote e.Text =
		// Не DoTypeQuoted!
		<TypeQuoted
			(ExeTyper s.Limit Limit t.FOut e.Converted s.Quote)
			s.Quote e.Text
		>;

	/* Штатные случаи */
	(ExeTyper s.Limit s.Free t.FOut e.Converted) s.Quote =
		(ExeTyper s.Limit <Dec s.Free> t.FOut e.Converted s.Quote ' ');

	(ExeTyper s.Limit s.Free t.FOut e.Converted) s.Quote s.Char e.Text =
		<DoTypeQuoted
			(ExeTyper s.Limit <Dec s.Free> t.FOut e.Converted s.Char)
			s.Quote e.Text
		>;
}

/**
	<TypeRenamed t.ExeTyper e.RenamedName> == t.ExeTyper
*/
$ENTRY TypeRenamed {
	(ExeTyper s.Limit Limit t.FOut e.Converted) e.Name =
		(ExeTyper
			s.Limit
			<Dec4 s.Limit>
			<FileIO::WriteLine t.FOut e.Converted e.Name>
		);

	(ExeTyper s.Limit s.Free t.FOut e.Converted) e.Name =
		(ExeTyper s.Limit <Dec4 s.Free> t.FOut e.Converted e.Name ' ');
}

$END MExeTyper.
