$MODULE MFE-Mgr;

$IMPORT MBEFE-Holder;
$IMPORT MNameMaker;
$IMPORT MQualifiedName;

/*==============================================================================
  Опции front-end-диспетчера:

  s.FEName ::= IDENTIFIER -- Имя
  s.FnParser ::= {
    t.ErrorList t.QualifiedName e.FileName =
      t.ErrorList Success s.Result t.IModule;

    t.ErrorList t.QualifiedName e.FileName =
      t.ErrorList Fails;
  }
  s.Result ::= Success | Warnings | Errors
  e.Ext -- Расширение файлов исходного текста
    Функция s.FnParser может предполагать, что файл с заданным именем
  существует.
==============================================================================*/

$SWAP G_FrontEnds;

//------------------------------------------------------------------------------

/**
  <Register s.FEName s.FnParser (e.Ext)>
    == empty
*/
$ENTRY Register
  s.Name s.FnParser (e.Ext) =
    <MBEFE-Holder::UpdateEntry
      & G_FrontEnds s.Name (FnParser s.FnParser) (Ext e.Ext)
    >;

//------------------------------------------------------------------------------

/**
  <GetPath-T s.FEName t.QualifiedName e.BaseFolder>
    == Success t.QualifiedName e.FilePath
    == Fails t.QualifiedName
*/
$ENTRY GetPath-T
  s.FEName t.QualifiedName e.BaseFolder =
    <GetPath-Aux
      ( <MQualifiedName::ToRelativeFSPath-T t.QualifiedName> )
      ( <GetInfo s.FEName Ext> )
      e.BaseFolder
    >;

GetPath-Aux {
  ( t.QualifiedName e.Relative ) ( Fails s.Error ) e.BaseFolder =
    Fails t.QualifiedName;

  ( t.QualifiedName e.Relative ) ( Success e.Ext ) Current =
    Success t.QualifiedName
    e.Relative '.' e.Ext;

  ( t.QualifiedName e.Relative ) ( Success e.Ext ) e.BaseFolder =
    Success t.QualifiedName
    e.BaseFolder '/' e.Relative '.' e.Ext;
}

//------------------------------------------------------------------------------

/**
  <X_GetPath-T t.Context t.QualifiedName s.FEName>
    == t.Context t.QualifiedName Success e.FileName
    == t.Context t.QualifiedName Fails
*/
$ENTRY X_GetPath
  t.Context t.QualifiedName s.FEName =
    <MNameMaker::MakeName
      t.Context t.QualifiedName s.FEName
      & MakeRelative
    >;

MakeRelative
  t.QualifiedName s.FEName =
    <MakeRelative--SwExistInfo
      (<GetInfo s.FEName Ext>)
      <MQualifiedName::ToRelativeFSPath-T t.QualifiedName>
    >;

MakeRelative--SwExistInfo {
  (Fails s.Error) t.QualifiedName e.Path =
    t.QualifiedName Fails;

  ( Success e.Ext ) t.QualifiedName e.Path =
    t.QualifiedName Success e.Path '.' e.Ext;
}

//------------------------------------------------------------------------------

/**
  <Load s.FEName t.ErrorList t.QualifiedName e.BaseDir>
    == t.ErrorList Success s.Result t.IModule
    == t.ErrorList Fails
  s.Result ::= Success | Warnings | Errors
*/
$ENTRY Load
  s.FEName t.ErrorList t.QualifiedName e.BaseDir =
    <Load-Aux
      ( <GetInfo s.FEName FnParser> )
      t.ErrorList
      <GetPath s.FEName t.QualifiedName e.BaseDir>
    >;

GetPath
  s.FEName t.QualifiedName e.BaseDir =
    <GetPath-T s.FEName t.QualifiedName e.BaseDir>;

Load-Aux {
  ( Fails s.Error ) t.ErrorList s.Result t.QualifiedName e.Tail =
    <MQualifiedName::Destroy t.QualifiedName>
    Fails t.ErrorList;

  ( e.Returned ) t.ErrorList Fails t.QualifiedName =
    <MQualifiedName::Destroy t.QualifiedName>
    Fails t.ErrorList;

  ( Success s.FnParser ) t.ErrorList Success t.QualifiedName e.FileName =
    <s.FnParser t.ErrorList t.QualifiedName e.FileName>;
}

//------------------------------------------------------------------------------

/**
  <GetList>
    == s.FrontEndName*
*/
$ENTRY GetList = <MBEFE-Holder::GetMgrList & G_FrontEnds>;

//------------------------------------------------------------------------------

/*
  <GetInfo s.FEName>
    == Success e.Value
    == InfoNotFound
*/
GetInfo
  s.FEName s.Option =
    <MBEFE-Holder::GetInfo & G_FrontEnds s.FEName s.Option>;

//------------------------------------------------------------------------------

/**
  <GetExt-T s.FEName>
    == s.FEName e.Ext
*/
$ENTRY GetExt-T
  s.FEName =
    <GetExt-Guard
      s.FEName <GetInfo s.FEName Ext>
    >;

NoExtForBackEnd { }

GetExt-Guard {
  // Отсутствие расширения -- нарушение инварианта
  s.FEName InfoNotFound =
    <NoExtForBackEnd s.FEName>;

  s.FEName Success e.Ext = s.FEName e.Ext;
}

$END MFE-Mgr.