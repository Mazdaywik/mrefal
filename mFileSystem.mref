$MODULE MFileSystem;

$IMPORT MRefalRTS;

$IMPORT MDosWinRecoder;
$IMPORT MLambda;
$IMPORT MOrder;
$IMPORT MOS;
$IMPORT FileIO;
$IMPORT MSelfDiag;
$IMPORT MStrings;
$IMPORT MSwapSupport;
$IMPORT Types;

$SWAP G_TempFileName;

$ENTRY Init
  = <MOS::System 'echo %random%>~suf.tmp'>
  <G_TempFileName
    <MOS::Env 'TEMP'> '\\~dirlist_'
    <UnBracket <FileIO::Load '~suf.tmp'>>
    '.tmp'
  >
  <MOS::System 'del ~suf.tmp'>;

UnBracket (e.Expr) = e.Expr;

//------------------------------------------------------------------------------

$ENTRY Final
  = <MOS::System 'del ' <TempName> ' >nul 2>nul'>;

TempName = <MSwapSupport::Read &G_TempFileName>;

//------------------------------------------------------------------------------

/**
  <ExistFile e.FileName> == True | False
*/
$ENTRY ExistFile e.FileName = <MRefalRTS::ExistFile e.FileName>;

//------------------------------------------------------------------------------

/**
  <ExistFile-T e.FileName>
    == True e.FileName
    == False e.FileName
*/
$ENTRY ExistFile-T
  e.FileName = <MRefalRTS::ExistFile e.FileName> e.FileName;

//------------------------------------------------------------------------------

/**
  <FilesInfo e.Mask>
    == (
      (e.FileName)
      (DateTime e.DateTime)
      (Size s.Size)
      (LongName e.LongName)
    )
*/
$ENTRY FilesInfo {
  e.Mask-B '"' e.Mask-E =
    <MSelfDiag::Error
      'MFileSystem::FilesInfo: argument must not have quotes'
    >;

  e.Mask =
    <DoFilesInfo
      <Quoting e.Mask>
    >;
}

Quoting {
  e.Mask-B ' ' e.Mask-E = '"' e.Mask-B ' ' e.Mask-E '"';

  e.Mask = <TrueSlash e.Mask>;
}

TrueSlash {
  e.Begin '/' e.End = e.Begin '\\' <TrueSlash e.End>;

  e.Path = e.Path;
}

DoFilesInfo
  e.Mask =
    <MOS::System
      'dir ' e.Mask '>' <TempName> ' 2>nul'
    >
    <ParseListing
      <MDosWinRecoder::DosToWin
        <FileIO::Load <TempName>>
      >
    >;

ParseListing {
  t.?Hdr1 t.?Hdr2 () (e.?Text1 s.Disk ':' e.Path) () e.Tail =
    <ReadFileList (s.Disk ':' e.Path) e.Tail>;

  = <MSelfDiag::Error 'Directory listing error: out is empty'>;

  e.Other = <MSelfDiag::Error 'Directory listing error: ' e.Other>;
}

ReadFileList
  (e.Path) e.Lines =
    <MLambda::Map
      <MLambda::BindLeft & AppendPath (e.Path)>
      <MLambda::Map
        & ParseLine
        e.Lines
      >
    >;

AppendPath {
  (e.L_Path)
  ( e.OtherInfo (LongName e.Name) ) =
    (
      (e.L_Path '\\' e.Name)
      e.OtherInfo
      (LongName e.Name)
    );

  (e.L_Path) = ;
}

/*
  Формат строки:
    10 Дата
    7  Время
    19 Размер
    Остальное -- длинное имя.
*/
ParseLine {
  ('   ' e.Tail) = ;
  (e.Line) =
    <ProcessFields
      <MLambda::Map
        & MStrings.Trim
        <MStrings::Fields (10 7 19) e.Line>
      >
    >;
}

ProcessFields
  (e.Date '.' e.Month '.' e.Year)
  (e.Hours ':' e.Minutes)
  (e.Size) (e.LongName) =
    (
      (DateTime
        <MStrings::Numb e.Year>
        <MStrings::Numb e.Month>
        <MStrings::Numb e.Date>
        <MStrings::Numb e.Hours>
        <MStrings::Numb e.Minutes>
        0 // Секунды
      )
      (Size <ParseSize e.Size>)
      (LongName e.LongName)
    );

ParseSize {
  e.Begin ' ' e.End = <ParseSize e.Begin e.End>;
  '<' e.Catalog '>' = Directory;
  e.Digits =
    <MStrings::Numb
      <DigitsOnly e.Digits>
    >;
}

DigitsOnly
  e.Line =
    <MLambda::Map
      <MLambda::BindLeft & DigitOnly (<Types::Digits>)>
      e.Line
    >;

DigitOnly {
  (e.L_Dig-B s.Dig e.L_Dig-E) s.Dig = s.Dig;
  (e.L_Digs) s.NoDig = ;
}

//------------------------------------------------------------------------------

/**
  <FileAttribute s.Attribute e.FileName>
    == FileNotFound
    == (e.Value)

  s.Attribute ::= DateTime | Size | LongName
*/
$ENTRY FileAttribute
  s.Attribute e.FileName =
    <CheckExistAndGetAttrib
      s.Attribute
      <ExistFile-T e.FileName>
    >;

CheckExistAndGetAttrib {
  s.Attribute False e.FileName = FileNotFound;
  s.Attribute True e.FileName =
    <ExtractAttrib s.Attribute <FilesInfo e.FileName>>;
}

ExtractAttrib {
  s.Attrib ( t.Path e.Att-B (s.Attrib e.Value) e.Att-E ) =
    (e.Value);

  s.Attrib ( t.Path e.Attribs ) =
    <MSelfDiag::Error
      'Unknown file attribute ' s.Attrib
    >;

  s.Attrib t.OneFile e.Tail =
    <MSelfDiag::Error
      'Found many files in ExtractAttrib ' t.OneFile e.Tail
    >;
}

//------------------------------------------------------------------------------

/**
  <ParseFileName e.FileName>
    == (e.Directory) e.FileNameNoExt (e.Ext)
  Пример:
  <ParseFileName 'c:\\Directory\\Document.doc'>
    == ('c;\\Directory\\') 'Document' ('doc')
*/
$ENTRY ParseFileName
  e.FileName =
    <DoParseExt e.FileName ()>;

DoParseExt {
  e.FileName '.' (e.Ext) =
    <DoParseDirectory (e.FileName)> (e.Ext);

  // Файл без расширения
  e.FileName '/' (e.Ext) =
    (e.FileName '/') e.Ext ();

  e.FileName '\\' (e.Ext) =
    (e.FileName '\\') e.Ext ();

  e.FileName ':' (e.Ext) =
    (e.FileName ':') e.Ext ();

  (e.Ext) =
    () e.Ext ();

  // Добавляем символ к расширению
  e.FileName s.Next (e.Ext) =
    <DoParseExt e.FileName (s.Next e.Ext)>;
}

DoParseDirectory {
  (e.Directory '/') e.Name =
    (e.Directory '/') e.Name;

  (e.Directory '\\') e.Name =
    (e.Directory '\\') e.Name;

  (e.Directory ':') e.Name =
    (e.Directory ':') e.Name;

  () e.Name = () e.Name;

  (e.Directory s.Next) e.Name =
    <DoParseDirectory (e.Directory) s.Next e.Name>;
}

$END MFileSystem.
