$MODULE MFileSystem;

$IMPORT MRefalRTS;

$IMPORT MLambda;
$IMPORT MOS;
$IMPORT MR-Extent;
$IMPORT MSelfDiag;
$IMPORT MStrings;

//------------------------------------------------------------------------------

/**
  <ExistFile e.FileName> == True | False
*/
$ENTRY ExistFile e.FileName = <MRefalRTS::ExistFile e.FileName>;

//------------------------------------------------------------------------------

/**
  <ExistFile-T e.FileName>
    == True e.FileName
    == False e.FileName
*/
$ENTRY ExistFile-T
  e.FileName = <MRefalRTS::ExistFile e.FileName> e.FileName;

//------------------------------------------------------------------------------

/**
  <BackSlash e.FileName-B '/' e.FileName-E> == e.FileName-B '\\' e.FileName-E
  <BackSlash e.FileName> == e.FileName
*/
$ENTRY BackSlash {
  e.Begin '/' e.End = e.Begin '\\' <BackSlash e.End>;

  e.Path = e.Path;
}

//------------------------------------------------------------------------------

/**
  <MakeDir e.Directory> == empty
*/
$ENTRY MakeDir
  e.Directory =
    <MOS::System 'mkdir ' <Quoting e.Directory> ' 1>nul 2>nul'>;

//------------------------------------------------------------------------------

/**
  <FileAttribute s.Attribute e.FileName>
    == FileNotFound
    == (e.Value)

  s.Attribute ::= DateTime | Size | LongName
*/
$ENTRY FileAttribute
  s.Attribute e.FileName =
    <SwFileAttribute
      s.Attribute
      <MR-Extent::Call 'INFO ' <Quoting e.FileName>>
      (e.FileName)
    >;

SwFileAttribute {
  s.Attribute Fails (e.FileName) =
    <MSelfDiag::Error
      'Files not found in MFileSystem::FileAttribute'
    >;

  s.Attribute Success 'N' = FileNotFound;

  DateTime Success
  s.Size s.Year s.Month s.Day s.Hour s.Minute s.Second e.LongName (e.FileName) =
    (s.Year s.Month s.Day s.Hour s.Minute s.Second);

  Size Success
  'D' s.Year s.Month s.Day s.Hour s.Minute s.Second e.LongName (e.FileName) =
    (Directory);

  Size Success
  s.Size s.Year s.Month s.Day s.Hour s.Minute s.Second e.LongName (e.FileName) =
    (s.Size);

  LongName Success
  s.Size s.Year s.Month s.Day s.Hour s.Minute s.Second e.LongName (e.FileName) =
    (e.LongName);
}

//------------------------------------------------------------------------------

/**
  <DirList e.DirectoryName>
    == Success (e.FileName)*
    == Fails
*/
$ENTRY DirList
  e.DirectoryName =
    <DirListing-SwLoad
      <MR-Extent::Call 'LIST ' <Quoting e.DirectoryName>>
    >;

DirListing-SwLoad {
  Success 'S' e.FileNames-B 'F' e.FileNames-E = Fails;

  Success 'S' e.FileNames = Success e.FileNames;

  Success 'F' = Fails;

  Fails = Fails;
}

//------------------------------------------------------------------------------

Quoting {
  e.Mask-B ' ' e.Mask-E = '"' e.Mask-B ' ' e.Mask-E '"';

  e.Mask = e.Mask;
}

//------------------------------------------------------------------------------

/**
  <ParseFileName e.FileName>
    == (e.Directory) e.FileNameNoExt (e.Ext)
  Пример:
  <ParseFileName 'c:\\Directory\\Document.doc'>
    == ('c;\\Directory\\') 'Document' ('doc')
*/
$ENTRY ParseFileName
  e.FileName =
    <DoParseExt e.FileName ()>;

DoParseExt {
  e.FileName '.' (e.Ext) =
    <DoParseDirectory (e.FileName)> (e.Ext);

  // Файл без расширения
  e.FileName '/' (e.Ext) =
    (e.FileName '/') e.Ext ();

  e.FileName '\\' (e.Ext) =
    (e.FileName '\\') e.Ext ();

  e.FileName ':' (e.Ext) =
    (e.FileName ':') e.Ext ();

  (e.Ext) =
    () e.Ext ();

  // Добавляем символ к расширению
  e.FileName s.Next (e.Ext) =
    <DoParseExt e.FileName (s.Next e.Ext)>;
}

DoParseDirectory {
  (e.Directory '/') e.Name =
    (e.Directory '/') e.Name;

  (e.Directory '\\') e.Name =
    (e.Directory '\\') e.Name;

  (e.Directory ':') e.Name =
    (e.Directory ':') e.Name;

  () e.Name = () e.Name;

  (e.Directory s.Next) e.Name =
    <DoParseDirectory (e.Directory) s.Next e.Name>;
}

//------------------------------------------------------------------------------

/**
  <CanonicalPath e.Path>
    == e.Canonical
*/
$ENTRY CanonicalPath
  e.Path = <MLambda::Map & CanonicalChar e.Path>;

CanonicalChar {
  '\\' = '/';
  s.Other = <MStrings::Lower s.Other>;
}

$END MFileSystem.
