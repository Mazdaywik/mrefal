$MODULE MParser;

$IMPORT MLexer;
$IMPORT MError;
$IMPORT MFileSystem;
$IMPORT MQualifiedName;
$IMPORT MSelfDiag;
$IMPORT MStrings;
$IMPORT MSymTable;
$IMPORT MVarTable;

/**
	<SrcModule e.SrcFileName>
		== t.Module s.ErrorResult t.ErrorList
	s.ErrorResult ::= Success | Warnings | Errors | Fatal
*/
$ENTRY SrcModule
	e.SrcFileName =
		<ErrorResult
			(e.SrcFileName)
			<NModule <StartParsing e.SrcFileName> >
		>;

/**
	<SymModule t.Context e.SymFileName>
		== t.SymTable s.ErrorResult t.ErrorList
		s.ErrorResult ::= Success | Warnings | Errors | Fatal
*/
$ENTRY SymModule
	e.SymFileName =
		<ErrorResult
			(e.SymFileName)
			<NSymModule <StartParsing e.SymFileName> >
		>;

StartParsing
	e.FullName =
		<MError::CreateErrList>
		<MSymTable::Create>
		()
		<MLexer::NextToken
			<MLexer::Create e.FullName>
		>;

ErrorResult {
	(e.FileName)
	t.ErrorList t.SymTable =
		<ErrorResult-Aux
			<CheckInternalName
				<MFileSystem::ParseFileName e.FileName>
				t.ErrorList
				(<MSymTable::FindByKind t.SymTable ModuleName>)
			>
		>;
}

CheckInternalName {
	(e.Directory) e.Name (e.Ext)
	t.ErrorList (t.SymTable (e.ModuleName)) =
		<SwCheckInternalName
			(<MStrings::Lower e.Name>)
			(<MStrings::Lower e.ModuleName>)
			(e.ModuleName)
			t.ErrorList
			<MSymTable::GetAttrib
				t.SymTable e.ModuleName Position
			>
		>;
}

SwCheckInternalName {
	(e.Name) (e.Name) (e.ModuleName)
	t.ErrorList t.SymTable Found t.SrcPos =
		t.ErrorList
		<MSymTable::UpdateAttribSet
			t.SymTable (e.ModuleName)
			(FsName e.Name)
		>;

	(e.FsName) (e.LowerInternalName) (e.ModuleName)
	t.ErrorList t.SymTable Found t.SrcPos =
		<MError::AddMismatchModuleAndFile
			t.ErrorList t.SrcPos (e.ModuleName) (e.FsName)
		>
		<MSymTable::UpdateAttribSet
			t.SymTable (e.ModuleName)
			(FsName e.FsName)
		>;

}

ErrorResult-Aux {
	t.ErrorList t.SymTable =
		<SwErrorResult
			<MError::EmptyList t.ErrorList>
			t.SymTable
		>;
}

SwErrorResult {
	t.ErrorList Empty t.Module =
		t.Module Success t.ErrorList;

	t.ErrorList NotEmpty t.Module =
		t.Module Errors t.ErrorList;
}


//------------------------------------------------------------------------------
// Добавление в таблицу символов
//------------------------------------------------------------------------------

/**
	<AddNewEntity
		t.ErrorList t.SymTable t.SrcPos (e.NewName)
		(s.Attrib e.Value)*
	> == t.ErrorList t.SymTable
*/
AddNewEntity
	t.ErrorList t.SymTable t.SrcPos (e.NewName) e.Attribs =
		<CheckRedeclaration
			t.ErrorList
			<MSymTable::AddNewName
				t.SymTable (e.NewName)
				e.Attribs (Position t.SrcPos)
			>
			t.SrcPos e.NewName
		>;

CheckRedeclaration {
	t.ErrorList t.SymTable Success t.SrcPos e.NewName =
		t.ErrorList t.SymTable;

	t.ErrorList t.SymTable Fails t.SrcPos e.NewName =
		<MError::AddRedeclaredIdentifier
			t.ErrorList t.SrcPos e.NewName
		> t.SymTable;
}

//------------------------------------------------------------------------------
// Синтаксический анализ модуля
//------------------------------------------------------------------------------

// Module = ModuleHeader ModuleBody ModuleTailer .
// Цепочка Module --> ModuleHeader --> { ModuleBody --> ModuleTailer }
NModule
	t.ErrorList t.SymTable () t.Lexer t.NextToken =
		<NModuleBody
			<NModuleHeader
				t.ErrorList t.SymTable
				() t.Lexer t.NextToken
			>
		>;

// ModuleHeader = '$module' ModuleName ';' .
// Цепочка ModuleHeader --> { ModuleHeader-ModuleName --> ExpectEndSent }
NModuleHeader {
	t.ErrorList t.SymTable ()
	t.Lexer (Directive t.SrcPos Module) =
		<NModuleHeader-ModuleName
			Regular t.ErrorList t.SymTable ()
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable ()
	t.Lexer (Directive t.SrcPos Program) =
		<NModuleHeader-ModuleName
			Main t.ErrorList t.SymTable ()
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable ()
	t.Lexer (Directive t.SrcPos ClearModule) =
		<NModuleHeader-ModuleName
			Clear t.ErrorList t.SymTable ()
			<MLexer::NextToken t.Lexer>
		>;

	/* Обработка ошибок в данном случае -- добавляем в список ошибок неожиданный
	символ, считаем, что прочли текущую лексему как '$module' и продолжаем
	дальнейший разбор.
	*/
	t.ErrorList t.SymTable ()
	t.Lexer t.OtherToken =
		<NModuleHeader-ModuleName
			<MError::AddUnexpected
				t.ErrorList t.OtherToken 'directive \'$MODULE\''
			>
			t.SymTable ()
			<MLexer::NextToken t.Lexer>
		>;
}

// ModuleHeader-ModuleName --> ExpectEndSent
NModuleHeader-ModuleName {
	s.ModuleType t.ErrorList t.SymTable ()
	t.Lexer (Identifier t.SrcPos e.Name) =
		<ExpectEndSent
			t.ErrorList
			<MSymTable::UpdateAttribSet
				t.SymTable (e.Name)
				(Kind ModuleName)
				(Position t.SrcPos)
				(ModuleType s.ModuleType)
			>
			()
			<MLexer::NextToken t.Lexer>
		>;

	/* Здесь мы пропускаем текущую неопознанную лексему до тех пор, пока
	не встретим идентификатор или конец ввода */
	s.ModuleType t.ErrorList t.SymTable ()
	t.Lexer (EndOfText t.SrcPos) =
		<MError::AddUnexpected
			t.ErrorList (EndOfText t.SrcPos) 'module name'
		>
		t.SymTable ()
		t.Lexer (EndOfText t.SrcPos);

	s.ModuleType t.ErrorList t.SymTable ()
	t.Lexer t.OtherToken =
		<NModuleHeader-ModuleName
			s.ModuleType
			<MError::AddUnexpected
				t.ErrorList t.OtherToken 'module name'
			>
			t.SymTable ()
			<MLexer::NextToken t.Lexer>
		>;
}

ExpectEndSent {
	t.ErrorList t.SymTable t.Stack
	t.Lexer (EndSent t.SrcPos) =
		t.ErrorList t.SymTable t.Stack
		<MLexer::NextToken t.Lexer>;

	/* Делаем вид, что точка с запятой была */
	t.ErrorList t.SymTable t.Stack
	t.Lexer t.OtherToken =
		<MError::AddUnexpected
			t.ErrorList t.OtherToken 'semicolon'
		>
		t.SymTable t.Stack
		t.Lexer t.OtherToken;
}

/* ModuleTailer -->
	{ ModuleTailer-ModuleName -->
		{ ModuleTailer-Dot --> ModuleTailer-EOF }
	}
*/
NModuleTailer {
	t.ErrorList t.SymTable ( e.ModuleBody )
	t.Lexer (Directive t.SrcPos End) =
		<NModuleTailer-ModuleName
			t.ErrorList
			(<MSymTable::ExtractCurrentModule t.SymTable>)
			( e.ModuleBody )
			<MLexer::NextToken t.Lexer>
		>;
}

/* ModuleTailer-ModuleName --> { ModuleTailer-Dot --> ModuleTailer-EOF } */
NModuleTailer-ModuleName {
	t.ErrorList (t.SymTable e.ModuleName)
	( e.ModuleBody )
	t.Lexer (Identifier t.SrcPos e.ModuleName) =
		<NModuleTailer-Dot
			t.ErrorList t.SymTable ( e.ModuleBody )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList (t.SymTable e.ModuleName-Head)
	( e.ModuleBody )
	t.Lexer (Identifier t.SrcPos e.ModuleName-Tail) =
		<NModuleTailer-Dot
			<MError::AddNamesMismatch
				t.ErrorList t.SrcPos
				(e.ModuleName-Head) (e.ModuleName-Tail)
			>
			t.SymTable ( e.ModuleBody )
			<MLexer::NextToken t.Lexer>
		>;

	/* Пропускаем следующую лексему, до тех пор, пока не встретим
	конец файла или идентификатор */
	t.ErrorList (t.SymTable e.ModuleName)
	( e.ModuleBody )
	t.Lexer (EndOfText t.SrcPos) =
		<MError::AddUnexpected
			t.ErrorList (EndOfText t.SrcPos) 'repeat of module name'
		>
		t.SymTable ( e.ModuleBody )
		t.Lexer (EndOfText t.SrcPos);

	t.ErrorList (t.SymTable e.ModuleName)
	( e.ModuleBody )
	t.Lexer t.OtherToken =
		<NModuleTailer-ModuleName
			<MError::AddUnexpected
				t.ErrorList t.OtherToken 'repeat of moduleName'
			>
			(t.SymTable e.ModuleName)
			( e.ModuleBody )
			<MLexer::NextToken t.Lexer>
		>;
}

// ModuleTailer-Dot --> { ModuleTailer-EOF --> _|_ }
NModuleTailer-Dot {
	t.ErrorList t.SymTable ( e.ModuleBody )
	t.Lexer (Dot t.SrcPos) =
		<NModuleTailer-EOF
			t.ErrorList t.SymTable ( e.ModuleBody )
			<MLexer::NextToken t.Lexer>
		>;

	/* Считаем, что точка была */
	t.ErrorList t.SymTable ( e.ModuleBody )
	t.Lexer t.OtherToken =
		<NModuleTailer-EOF
			<MError::AddUnexpected
				t.ErrorList t.OtherToken 'end dot'
			>
			t.SymTable ( e.ModuleBody )
			t.Lexer t.OtherToken
		>;
}

// ModuleTailer-EOF --> _|_
NModuleTailer-EOF {
	t.ErrorList t.SymTable ( /* Должно быть пусто */ )
	t.Lexer (EndOfText t.SrcPos) =
		t.ErrorList
		t.SymTable
		<MLexer::Destroy t.Lexer>;

	/* Пропускаем все другие лексемы до тех пор, пока не доберёмся до конца файла */
	t.ErrorList t.SymTable ( e.ModuleBody )
	t.Lexer t.OtherToken =
		<NModuleTailer-EOF
			<MError::AddUnexpected
				t.ErrorList t.OtherToken 'end of file'
			>
			t.SymTable ( e.ModuleBody )
			<MLexer::NextToken t.Lexer>
		>;
}


/* ModuleBody = { ImportBlock | FunctionDefinition | SwapDefinition }* .
	ModuleBody --> ModuleTailer
В случае конца файла
	ModuleBody --> _|_*/
NModuleBody {
	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer (Directive t.SrcPos Import) =
		<NModuleBody
			<NImportBlock
				t.ErrorList
				t.SymTable
				( e.Elements )
				<MLexer::NextToken t.Lexer>
			>
		>;

	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer (Directive t.SrcPos Swap) =
		<NModuleBody
			<NSwapBlock
				t.ErrorList t.SymTable
				( e.Elements )
				<MLexer::NextToken t.Lexer>
			>
		>;

	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer (Directive t.SrcPos Entry) =
		<NModuleBody
			<NFunctionDefinition
				t.ErrorList t.SymTable
				( Entry (e.Elements) )
				<MLexer::NextToken t.Lexer>
			>
		>;

	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer (Directive t.SrcPos Data) =
		<NModuleBody
			<NDataBlock
				t.ErrorList t.SymTable
				( e.Elements )
				<MLexer::NextToken t.Lexer>
			>
		>;

	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer (Identifier t.SrcPos e.Ident) =
		<NModuleBody
			<NFunctionDefinition
				t.ErrorList t.SymTable
				( Local (e.Elements) )
				t.Lexer (Identifier t.SrcPos e.Ident)
			>
		>;

	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer (EndSent t.SrcPos) =
		<NModuleBody
			t.ErrorList t.SymTable ( e.Elements )
			<MLexer::NextToken t.Lexer>
		>;

	/* Завершение рекурсии */
	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer (Directive t.SrcPos End) =
		<NModuleTailer
			t.ErrorList t.SymTable ( e.Elements )
			t.Lexer (Directive t.SrcPos End)
		>;

	/* При обнаружении конца файла завершаем анализ */
	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer (EndOfText t.SrcPos) =
		<MError::AddUnexpected
			t.ErrorList (EndOfText t.SrcPos)
			'$entry, $import, $swap or local function definition'
		>
		t.SymTable Error
		<MLexer::Destroy t.Lexer>;

	/* Любая другая лексема пропускается */
	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer t.OtherToken =
		<NModuleBody
			<MError::AddUnexpected
				t.ErrorList t.OtherToken
				'$entry, $import, $swap or local function definition'
			>
			t.SymTable ( e.Elements )
			<MLexer::NextToken t.Lexer>
		>;
}

NImportBlock {
	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer (Identifier t.SrcPos e.ModuleName) =
		<NImportBlock-AfterName
			t.ErrorList t.SymTable
			( Import e.ModuleName )
			( e.ParentStack)
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer t.OtherToken =
		<MError::AddUnexpected
			t.ErrorList t.OtherToken 'module name or module alias'
		> t.SymTable ( e.ParentStack )
		<MLexer::NextToken t.Lexer>;
}

NImportBlock-AfterName {
	t.ErrorList t.SymTable (Import e.ModuleName)
	( e.ParentStack )
	t.Lexer (EndSent t.SrcPos) =
		<AddNewEntity
			t.ErrorList t.SymTable t.SrcPos (e.ModuleName)
			(Kind ImportName)
			(Alias e.ModuleName)
		> ( e.ParentStack )
		<MLexer::NextToken t.Lexer>;

	t.ErrorList t.SymTable (Import e.ModuleName)
	( e.ParentStack )
	t.Lexer (Replaces t.SrcPos) =
		<NImportBlock-ModuleRenaming
			t.ErrorList t.SymTable
			(Alias e.ModuleName)
			( e.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable (Import e.ModuleName)
	( e.ParentStack )
	t.Lexer (Comma t.SrcPos) =
		<NImportBlock
			<AddNewEntity
				t.ErrorList t.SymTable t.SrcPos (e.ModuleName)
				(Kind ImportName)
				(Alias e.ModuleName)
			> ( e.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	// Считаем, что пользователь пропустил точку с запятой
	t.ErrorList t.SymTable (Import e.ModuleName)
	( e.ParentStack )
	t.Lexer t.OtherToken =
		<MError::AddUnexpected
			t.ErrorList t.OtherToken 'comma, semicolon or replace'
		> t.SymTable ( e.ParentStack )
		t.Lexer t.OtherToken;
}

NImportBlock-ModuleRenaming {
	t.ErrorList t.SymTable
	(Alias e.Alias) ( e.ParentStack )
	t.Lexer (Identifier t.SrcPos e.ModuleName) =
		<NImportBlock-AfterAlias
			<AddNewEntity
				t.ErrorList t.SymTable t.SrcPos (e.ModuleName)
				(Kind ImportName)
				(Alias e.Alias)
			>
			( e.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	//Считаем, что попытки переименования не было
	t.ErrorList t.SymTable
	(Alias e.Alias) ( e.ParentStack )
	t.Lexer t.OtherToken =
		<MError::AddUnexpected
			t.ErrorList t.OtherToken 'module name'
		> t.SymTable
		( e.ParentStack )
		t.Lexer t.OtherToken;
}

NImportBlock-AfterAlias {
	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer (Comma t.SrcPos) =
		<NImportBlock
			t.ErrorList t.SymTable ( e.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer (EndSent t.SrcPos) =
		t.ErrorList t.SymTable ( e.ParentStack )
		<MLexer::NextToken t.Lexer>;

	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer t.OtherToken =
		<MError::AddUnexpected
			t.ErrorList t.OtherToken 'comma or semicolon'
		> t.SymTable ( e.ParentStack )
		t.Lexer t.OtherToken;
}

/*
	SwapBlock = '$swap' SwapBlock-Chain .
	SwapBlock-Chain = IDENTIFIER SwapBlock-AfterName .
	SwapBlock-AfterName = ';' | ',' Swap-Chain .
*/
NSwapBlock {
	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer (Identifier t.SrcPos e.Ident) =
		<NSwapBlock-AfterName
			<AddNewEntity
				t.ErrorList t.SymTable t.SrcPos (e.Ident)
				(Kind Function)
				(ScopeClass Swap)
			>
			( e.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer t.OtherToken =
		<MError::AddUnexpected
			t.ErrorList t.OtherToken 'swap name'
		> t.SymTable
		( e.ParentStack )
		t.Lexer t.OtherToken;
}

NSwapBlock-AfterName {
	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer (Comma t.SrcPos) =
		<NSwapBlock
			t.ErrorList t.SymTable
			( e.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer (EndSent t.SrcPos) =
		t.ErrorList t.SymTable ( e.ParentStack )
		<MLexer::NextToken t.Lexer>;

	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer t.OtherToken =
		<MError::AddUnexpected
			t.ErrorList t.OtherToken 'comma or semicolon'
		> t.SymTable ( e.ParentStack )
		t.Lexer t.OtherToken;
}

/*
	DataBlock = '$swap' DataBlock-Chain .
	DataBlock-Chain = IDENTIFIER DataBlock-AfterName .
	DataBlock-AfterName = ';' | ',' DataBlock-Chain .
*/
NDataBlock {
	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer (Identifier t.SrcPos e.Ident) =
		<NDataBlock-AfterName
			<AddNewEntity
				t.ErrorList t.SymTable t.SrcPos (e.Ident)
				(Kind ADT)
			>
			( e.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer t.OtherToken =
		<MError::AddUnexpected
			t.ErrorList t.OtherToken 'swap name'
		> t.SymTable
		( e.ParentStack )
		t.Lexer t.OtherToken;
}

NDataBlock-AfterName {
	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer (Comma t.SrcPos) =
		<NDataBlock
			t.ErrorList t.SymTable
			( e.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer (EndSent t.SrcPos) =
		t.ErrorList t.SymTable ( e.ParentStack )
		<MLexer::NextToken t.Lexer>;

	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer t.OtherToken =
		<MError::AddUnexpected
			t.ErrorList t.OtherToken 'comma or semicolon'
		> t.SymTable ( e.ParentStack )
		t.Lexer t.OtherToken;
}

NFunctionDefinition {
	t.ErrorList t.SymTable ( s.ScopeClass t.ParentStack )
	t.Lexer (Identifier t.SrcPos e.Ident) =
		<NFunctionDefinition-Closing
			<NFunctionBody
				t.ErrorList t.SymTable
				(( (Function s.ScopeClass (e.Ident) t.SrcPos) t.ParentStack ))
				<MLexer::NextToken t.Lexer>
			>
		>;

	/* Возвращаемся в ModuleBody, как будто спецификатора $ENTRY и не было
	в помине */
	t.ErrorList t.SymTable ( s.ScopeClass (e.ParentStack) )
	t.Lexer t.UnexpectedToken =
		<MError::AddUnexpected
			t.ErrorList t.UnexpectedToken 'function name'
		>
		t.SymTable ( e.ParentStack )
		t.Lexer t.UnexpectedToken;
}

NFunctionDefinition-Closing
	t.ErrorList t.SymTable
	( t.FunctionBody ( Function s.ScopeClass (e.Name) t.SrcPos ) (e.ParentStack) )
	t.Lexer t.NextToken =
		<AddNewEntity
			t.ErrorList t.SymTable t.SrcPos (e.Name)
			(Kind Function)
			(Body t.FunctionBody)
			(ScopeClass s.ScopeClass)
			(Qualified <MQualifiedName::Create (e.Name)>)
		>
		( e.ParentStack )
		t.Lexer t.NextToken;

NFunctionBody {
	t.ErrorList t.SymTable ( t.ParentStack )
	t.Lexer (OpenBlock t.SrcPos) =
		<NBlock
			t.ErrorList t.SymTable ( t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable ( t.ParentStack )
	t.Lexer t.StartSentence =
		<NFunctionBody
			<NSentence
				t.ErrorList t.SymTable ( (OneSentence t.ParentStack) )
				t.Lexer t.StartSentence
			>
		>;

	t.ErrorList t.SymTable ( e.Sentence OneSentence (e.ParentStack) )
	t.Lexer t.NextToken =
		t.ErrorList t.SymTable ( (e.Sentence) e.ParentStack )
		t.Lexer t.NextToken;
}

NBlock {
	t.ErrorList t.SymTable ( e.Sentences (e.ParentStack) )
	t.Lexer (CloseBlock t.SrcPos) =
		t.ErrorList t.SymTable
		( (<MStrings::Reverse e.Sentences>) e.ParentStack )
		<MLexer::NextToken t.Lexer>;

	t.ErrorList t.SymTable ( e.Sentences (e.ParentStack) )
	t.Lexer (EndOfText t.SrcPos) =
		<MError::AddUnexpected
			t.ErrorList (EndOfText t.SrcPos) 'start of pattern of closing block'
		> t.SymTable
		( (<MStrings::Reverse e.Sentences>) e.ParentStack )
		<MLexer::NextToken t.Lexer>;

	t.ErrorList t.SymTable ( e.Sentences t.ParentStack )
	t.Lexer t.StartSentence =
		<NBlock
			<NSentence
				t.ErrorList t.SymTable
				( (e.Sentences t.ParentStack) )
				t.Lexer t.StartSentence
			>
		>;
}

NSentence {
	t.ErrorList t.SymTable ( (e.ParentStack) )
	t.Lexer (EndOfText t.SrcPos) =
		<MError::AddUnexpected
			t.ErrorList (EndOfText t.SrcPos) 'start of pattern'
		> t.SymTable
		( e.ParentStack )
		t.Lexer (EndOfText t.SrcPos);

	t.ErrorList t.SymTable ( t.ParentStack )
	t.Lexer (s.StartOfPattern t.SrcPos e.Info) =
		<NSentence-ExpectReplaces
			<NPatternExpr
				t.ErrorList t.SymTable
				<MVarTable::Create>
				( '$' (t.ParentStack) )
				t.Lexer (s.StartOfPattern t.SrcPos e.Info)
			>
		>;
}

NSentence-ExpectReplaces {
	t.ErrorList t.SymTable t.VarTable
	( t.Pattern t.ParentStack )
	t.Lexer (Replaces t.SrcPos) =
		<NSentence-Closing
			<NResultExpr
				t.ErrorList t.SymTable t.VarTable
				( '$' (t.Pattern t.ParentStack) )
				<MLexer::NextToken t.Lexer>
			>
		>;

	/* Игнорируем уже разобранное образцовое выражение --
	игнорируем целиком пропущенное предложение. При этом необходимо
	съесть неожиданную лексему -- эта лексема оказалась неожиданной
	для образцового выражения, а следующее предложение начинается с
	образца. */
	t.ErrorList t.SymTable t.VarTable
	( t.Pattern (e.ParentStack) )
	t.Lexer (EndOfText t.SrcPos) =
		<MError::AddUnexpected
			t.ErrorList (EndOfText t.SrcPos) '\'=\''
		> t.SymTable
		<MVarTable::Destroy t.VarTable>
		( e.ParentStack )
		<MLexer::NextToken t.Lexer>;

	t.ErrorList t.SymTable t.VarTable
	( t.Pattern (e.ParentStack) )
	t.Lexer t.UnexpectedToken =
		<MError::AddUnexpected
			t.ErrorList t.UnexpectedToken '\'=\''
		> t.SymTable
		<MVarTable::Destroy t.VarTable>
		( e.ParentStack )
		<MLexer::NextToken t.Lexer>;
}

NSentence-Closing {
	t.ErrorList t.SymTable t.VarTable
	( t.Result t.Pattern (e.ParentStack) )
	t.Lexer t.NextToken =
		<ExpectEndSent
			t.ErrorList t.SymTable
			<MVarTable::Destroy t.VarTable>
			( (t.Pattern t.Result) e.ParentStack )
			t.Lexer t.NextToken
		>;
}

AddVariable {
	t.SymTable t.ErrorList t.VarTable Success
	( e.PatternExpr t.ParentStack )
	t.Lexer (Var t.SrcPos s.VarType e.Index) =
		t.ErrorList t.SymTable t.VarTable
		( e.PatternExpr (s.VarType e.Index) t.ParentStack )
		<MLexer::NextToken t.Lexer>;

	t.SymTable t.ErrorList t.VarTable Fail
	( e.PatternExpr t.ParentStack )
	t.Lexer t.VarToken =
		t.ErrorList t.SymTable t.VarTable
		( e.PatternExpr t.ParentStack )
		<MLexer::NextToken t.Lexer>;
}

NPatternExpr {
	t.ErrorList t.SymTable t.VarTable
	( e.PatternExpr t.ParentStack )
	t.Lexer (Var t.SrcPos s.VarType e.Index) =
		<NPatternExpr
			<AddVariable
				t.SymTable
				<MVarTable::AddVariable
					t.ErrorList t.VarTable t.SrcPos s.VarType e.Index
				>
				( e.PatternExpr t.ParentStack )
				t.Lexer (Var t.SrcPos s.VarType e.Index)
			>
		>;

	t.ErrorList t.SymTable t.VarTable
	( e.PatternExpr t.ParentStack )
	t.Lexer (Identifier t.SrcPos e.Identifier) =
		<NPatternExpr
			t.ErrorList t.SymTable t.VarTable
			( e.PatternExpr (Identifier e.Identifier) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( e.PatternExpr t.ParentStack )
	t.Lexer (Literal t.SrcPos e.Content) =
		<NPatternExpr
			t.ErrorList t.SymTable t.VarTable
			(e.PatternExpr (Literal e.Content) t.ParentStack)
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( e.PatternExpr t.ParentStack )
	t.Lexer (DQWord t.SrcPos e.Content) =
		<NPatternExpr
			t.ErrorList t.SymTable t.VarTable
			(e.PatternExpr (DQWord e.Content) t.ParentStack)
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( e.PatternExpr t.ParentStack )
	t.Lexer (Macro t.SrcPos s.Value) =
		<NPatternExpr
			t.ErrorList t.SymTable t.VarTable
			(e.PatternExpr (Macro s.Value) t.ParentStack)
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( e.PatternExpr t.ParentStack )
	t.Lexer (OpenBrac t.SrcPos) =
		<NPatternExpr
			t.ErrorList t.SymTable t.VarTable
			( (')' e.PatternExpr) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( e.PatternExpr t.ParentStack )
	t.Lexer (OpenSquare t.SrcPos) =
		<NPatternExpr
			t.ErrorList t.SymTable t.VarTable
			( (']' e.PatternExpr) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	/* Сделаем осмысленную реакцию на ошибки -- будем интерпретировать
	функциональную скобку как структурную. */
	t.ErrorList t.SymTable t.VarTable
	( e.PatternExpr t.ParentStack )
	t.Lexer (OpenFnCall t.SrcPos) =
		<NPatternExpr
			<MError::AddUnexpected
				t.ErrorList (OpenFnCall t.SrcPos)
				'any correct passive term'
			> t.SymTable t.VarTable
			( (')' e.PatternExpr) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( (')' e.MultiBracket) e.InBrackets t.ParentStack)
	t.Lexer (CloseBrac t.SrcPos) =
		<NPatternExpr
			t.ErrorList t.SymTable t.VarTable
			(e.MultiBracket (Structure e.InBrackets) t.ParentStack)
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( (']' e.MultiBracket) e.InBrackets t.ParentStack)
	t.Lexer (CloseSquare t.SrcPos) =
		<NPatternExpr
			t.ErrorList t.SymTable t.VarTable
			(e.MultiBracket (Structure e.InBrackets) t.ParentStack)
			<MLexer::NextToken t.Lexer>
		>;

	/* Продолжение осмысленной реакции -- интерпретация закрывающей
	функциональной скобки как структурной*/
	t.ErrorList t.SymTable t.VarTable
	( (')' e.MultiBracket) e.InBracket t.ParentStack)
	t.Lexer (CloseFnCall t.SrcPos) =
		<NPatternExpr
			<MError::AddUnexpected
				t.ErrorList (CloseFnCall t.SrcPos)
				'any correct passive term'
			> t.SymTable t.VarTable
			(e.MultiBracket (Structure e.InBracket) t.ParentStack)
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( e.PatternExpr t.ParentStack )
	t.Lexer (CloseBrac t.SrcPos) =
		<NPatternExpr
			<MError::AddUnexpected
				t.ErrorList (CloseBrac t.SrcPos)
				'any correct term (unbalanced structure brackets)'
			> t.SymTable t.VarTable
			( e.PatternExpr t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( e.PatternExpr t.ParentStack )
	t.Lexer (CloseSquare t.SrcPos) =
		<NPatternExpr
			<MError::AddUnexpected
				t.ErrorList (CloseSquare t.SrcPos)
				'any correct term (unbalanced ADT brackets)'
			> t.SymTable t.VarTable
			( e.PatternExpr t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( '$' e.PatternExpr (e.ParentStack))
	t.Lexer (Replaces t.SrcPos) =
		t.ErrorList t.SymTable t.VarTable
		( (Pattern e.PatternExpr) e.ParentStack )
		t.Lexer (Replaces t.SrcPos);

	t.ErrorList t.SymTable t.VarTable
	( (s.BracketType e.MultiBracket) e.InBrackets t.ParentStack )
	t.Lexer (Replaces t.SrcPos) =
		<NPatternExpr
			<MError::AddUnexpected
				t.ErrorList (Replaces t.SrcPos)
				'\'' s.BracketType '\''
			> t.SymTable t.VarTable
			( e.MultiBracket (e.InBrackets) t.ParentStack )
			t.Lexer (Replaces t.SrcPos)
		>;

	t.ErrorList t.SymTable t.VarTable
	( (s.BracketType e.MultiBracket) e.InBrackets t.ParentStack )
	t.Lexer t.Unexpected =
		<NPatternExpr
			<MError::AddUnexpected
				t.ErrorList t.Unexpected
				'\'' s.BracketType '\''
			> t.SymTable t.VarTable
			( e.MultiBracket (e.InBrackets) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( '$' e.PatternExpr (e.ParentStack) )
	t.Lexer t.Unexpected =
		<MError::AddUnexpected
			t.ErrorList t.Unexpected
			'pattern expression or semicolon'
		> t.SymTable t.VarTable
		( (Pattern e.PatternExpr) e.ParentStack )
		t.Lexer t.Unexpected;
}

CheckVariable {
	t.SymTable t.ErrorList t.VarTable Success
	( e.ResultExpr t.ParentStack )
	t.Lexer (Var t.SrcPos s.VarType e.Index) =
		t.ErrorList t.SymTable t.VarTable
		( e.ResultExpr (s.VarType e.Index) t.ParentStack )
		<MLexer::NextToken t.Lexer>;

	t.SymTable t.ErrorList t.VarTable Fail
	( e.ResultExpr t.ParentStack )
	t.Lexer t.VarToken =
		t.ErrorList t.SymTable t.VarTable
		( e.ResultExpr t.ParentStack )
		<MLexer::NextToken t.Lexer>;
}

NResultExpr {
	t.ErrorList t.SymTable t.VarTable
	(e.ResultExpr t.ParentStack)
	t.Lexer (Var t.SrcPos s.VarType e.Index) =
		<NResultExpr
			<CheckVariable
				t.SymTable
				<MVarTable::CheckVariable
					t.ErrorList t.VarTable t.SrcPos s.VarType e.Index
				>
				( e.ResultExpr t.ParentStack )
				t.Lexer (Var t.SrcPos s.VarType e.Index)
			>
		>;

	t.ErrorList t.SymTable t.VarTable
	(e.ResultExpr t.ParentStack)
	t.Lexer (Identifier t.SrcPos e.Ident) =
		<NResultExpr
			t.ErrorList t.SymTable t.VarTable
			( e.ResultExpr (Identifier e.Ident) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	(e.ResultExpr t.ParentStack)
	t.Lexer (Literal t.SrcPos e.Content) =
		<NResultExpr
			t.ErrorList t.SymTable t.VarTable
			( e.ResultExpr (Literal e.Content) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	(e.ResultExpr t.ParentStack)
	t.Lexer (DQWord t.SrcPos e.Content) =
		<NResultExpr
			t.ErrorList t.SymTable t.VarTable
			( e.ResultExpr (DQWord e.Content) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	(e.ResultExpr t.ParentStack)
	t.Lexer (Macro t.SrcPos s.Value) =
		<NResultExpr
			t.ErrorList t.SymTable t.VarTable
			( e.ResultExpr (Macro s.Value) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	(e.ResultExpr t.ParentStack)
	t.Lexer (OpenBrac t.SrcPos) =
		<NResultExpr
			t.ErrorList t.SymTable t.VarTable
			( ( ')' e.ResultExpr ) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	(e.ResultExpr t.ParentStack)
	t.Lexer (OpenFnCall t.SrcPos) =
		<NResultExpr
			<NCallable
				t.ErrorList t.SymTable t.VarTable
				( ( ('>' e.ResultExpr) t.ParentStack ) )
				<MLexer::NextToken t.Lexer>
			>                        
		>;

	t.ErrorList t.SymTable t.VarTable
	(e.ResultExpr t.ParentStack)
	t.Lexer (OpenSquare t.SrcPos) =
		<NResultExpr
			t.ErrorList t.SymTable t.VarTable
			( ( ']' e.ResultExpr ) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( ( ')' e.MultiBracket ) e.InBrackets t.ParentStack )
	t.Lexer (CloseBrac t.SrcPos) =
		<NResultExpr
			t.ErrorList t.SymTable t.VarTable
			( e.MultiBracket (Structure e.InBrackets) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	(e.ResultExpr t.ParentStack)
	t.Lexer ( CloseBrac t.SrcPos ) =
		<NResultExpr
			<MError::AddUnexpected
				t.ErrorList ( CloseBrac t.SrcPos )
				'result expression or semicolon (unbalanced structure brackets)'
			> t.SymTable t.VarTable
			( e.ResultExpr t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( ( ']' e.MultiBracket ) e.InBrackets t.ParentStack )
	t.Lexer (CloseSquare t.SrcPos) =
		<NResultExpr
			t.ErrorList t.SymTable t.VarTable
			( e.MultiBracket (Structure e.InBrackets) t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	(e.ResultExpr t.ParentStack)
	t.Lexer (CloseSquare t.SrcPos) =
		<NResultExpr
			<MError::AddUnexpected
				t.ErrorList (CloseSquare t.SrcPos)
				'result expression or semicolon (unbalanced ADT brackets)'
			> t.SymTable t.VarTable
			( e.ResultExpr t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	/* В случае ошибочного callable функциональные скобки
	интерпретируем как структурные. */
	t.ErrorList t.SymTable t.VarTable
	( ('>' e.MultiBracket) InvalidCallable e.ResultExprFnArgument t.ParentStack )
	t.Lexer ( CloseFnCall t.SrcPos ) =
		<NResultExpr
			t.ErrorList t.SymTable t.VarTable
			( e.MultiBracket
				(Structure e.ResultExprFnArgument)
				t.ParentStack
			) <MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( ('>' e.MultiBracket) (FnCall t.Callable) e.ResultExprFnArgument t.ParentStack )
	t.Lexer ( CloseFnCall t.SrcPos ) =
		<NResultExpr
			<MakeFnCallTerm
				t.ErrorList t.SymTable t.VarTable
				( e.MultiBracket t.ParentStack )
				t.Callable e.ResultExprFnArgument
			>
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	( ('>' e.MultiBracket) (IndirectCall (SVar e.Index)) e.ResultExprFnArgument t.ParentStack )
	t.Lexer ( CloseFnCall t.SrcPos ) =
		<NResultExpr
			t.ErrorList t.SymTable t.VarTable
			( e.MultiBracket
				(IndirectCall (SVar e.Index) e.ResultExprFnArgument)
				t.ParentStack
			) <MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	(e.ResultExpr t.ParentStack)
	t.Lexer (CloseFnCall t.SrcPos) =
		<NResultExpr
			<MError::AddUnexpected
				t.ErrorList (CloseFnCall t.SrcPos)
				'result expression or semicolon (unbalanced function brackets)'
			> t.SymTable t.VarTable
			( e.ResultExpr t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	('$' e.ResultExpr (e.ParentStack))
	t.Lexer (EndSent t.SrcPos) =
		t.ErrorList t.SymTable t.VarTable ( (Result e.ResultExpr) e.ParentStack )
		t.Lexer (EndSent t.SrcPos);

	t.ErrorList t.SymTable t.VarTable
	( ( s.BracketType e.MultiBracket ) e.InBrackets t.ParentStack )
	t.Lexer t.Unexpected =
		<NResultExpr
			<MError::AddUnexpected
				t.ErrorList t.Unexpected
				s.BracketType ' (unbalanced brackets)'
			> t.SymTable t.VarTable
			( e.MultiBracket (e.InBrackets) t.ParentStack )
			t.Lexer t.Unexpected
		>;

	t.ErrorList t.SymTable t.VarTable
	( '$' e.ResultExpr (e.ParentStack) )
	t.Lexer t.Unexpected =
		<MError::AddUnexpected
			t.ErrorList t.Unexpected
			'result expression or \';\'.'
		> t.SymTable t.VarTable
		( (e.ResultExpr) e.ParentStack )
		t.Lexer t.Unexpected;
}

MakeFnCallTerm {
	t.ErrorList t.SymTable t.VarTable
	( e.MultiBracket t.ParentStack )
	( Qualified t.SrcPos t.QualifiedName )
	e.Argument =
		<SwMakeFnCallTerm
			t.ErrorList t.SymTable t.VarTable
			( e.MultiBracket t.ParentStack )
			( Qualified t.SrcPos <MQualifiedName::Parse-T t.QualifiedName> )
			e.Argument
		>;
}

SwMakeFnCallTerm {
	t.ErrorList t.SymTable t.VarTable
	( e.MultiBracket t.ParentStack )
	( Qualified t.SrcPos t.QualifiedName ('FnPtr') )
	e.Argument =
		<MQualifiedName::Destroy t.QualifiedName>
		<CheckArgumentFnPtr
			t.ErrorList t.SymTable
			t.VarTable
			( e.MultiBracket t.ParentStack )
			t.SrcPos e.Argument
		>;

	t.ErrorList t.SymTable t.VarTable
	( e.MultiBracket t.ParentStack )
	( Qualified t.SrcPos t.QualifiedName e.Segments )
	e.Argument =
		t.ErrorList t.SymTable t.VarTable
		( e.MultiBracket
			(Function
				( Qualified t.SrcPos t.QualifiedName )
				e.Argument
			)
			t.ParentStack
		);
}

CheckArgumentFnPtr {
	t.ErrorList t.SymTable t.VarTable
	( e.MultiBracket t.ParentStack )
	t.SrcPos e.Argument =
		<DoCheckArgumentFnPtr
			t.ErrorList t.SymTable t.VarTable
			( e.MultiBracket t.ParentStack )
			<MQualifiedName::Create>
			t.SrcPos e.Argument
		>;
}

DoCheckArgumentFnPtr {
	t.ErrorList t.SymTable t.VarTable
	( e.MultiBracket t.ParentStack )
	t.QualifiedName t.SrcPos
	(Identifier e.Content) e.Tail =
		<DoCheckArgumentFnPtr
			t.ErrorList t.SymTable t.VarTable
			( e.MultiBracket t.ParentStack )
			<MQualifiedName::AddSubName t.QualifiedName e.Content>
			t.SrcPos e.Tail
		>;

	t.ErrorList t.SymTable t.VarTable
	( e.MultiBracket t.ParentStack )
	t.QualifiedName t.SrcPos =
		t.ErrorList t.SymTable t.VarTable
		( e.MultiBracket
			(FnPtr
				(Qualified
					t.SrcPos t.QualifiedName
				)
			)
			t.ParentStack
		);

	t.ErrorList t.SymTable t.VarTable
	( e.MultiBracket t.ParentStack )
	t.QualifiedName t.SrcPos
	t.OtherTerm e.Tail =
		<DoCheckArgumentFnPtr
			<MError::FnPtrError
				t.ErrorList t.SrcPos
			>
			t.SymTable t.VarTable
			( e.MultiBracket t.ParentStack )
			t.QualifiedName t.SrcPos e.Tail
		>;
}

NCallable {
	t.ErrorList t.SymTable t.VarTable ( t.ParentStack )
	t.Lexer (Identifier t.SrcPos e.Name) =
		<NCallable-AfterName
			t.ErrorList t.SymTable t.VarTable
			( Name t.SrcPos e.Name )
			( t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable ( t.ParentStack )
	t.Lexer (Var t.SrcPos SVar e.Index) =
		<CheckCallableVariable
			t.SymTable
			<MVarTable::CheckVariable
				t.ErrorList t.VarTable t.SrcPos SVar e.Index
			> ( t.ParentStack )
			t.Lexer (Var t.SrcPos SVar e.Index)
		>;

	t.ErrorList t.SymTable t.VarTable ( (e.ResultExpr t.UpParentStack) )
	t.Lexer t.OtherToken =
		<MError::AddUnexpected
			t.ErrorList t.OtherToken 'function name or module name'
		> t.SymTable t.VarTable
 		( e.ResultExpr InvalidCallable t.UpParentStack )
		t.Lexer t.OtherToken;
}

CheckCallableVariable {
	t.SymTable t.ErrorList t.VarTable Success
	( (e.ResultExpr t.UpParentStack) )
	t.Lexer (Var t.SrcPos SVar e.Index) =
		t.ErrorList t.SymTable t.VarTable (
			e.ResultExpr
			( IndirectCall (SVar e.Index))
			t.UpParentStack
		)
		<MLexer::NextToken t.Lexer>;

	t.SymTable t.ErrorList t.VarTable Fail
	( (e.ResultExpr t.UpParentStack) )
	t.Lexer (Var t.SrcPos SVar e.Index) =
		t.ErrorList
		t.SymTable t.VarTable
		( e.ResultExpr InvalidCallable t.UpParentStack)
		<MLexer::NextToken t.Lexer>;
}

NCallable-AfterName {
	t.ErrorList t.SymTable t.VarTable
	(Name t.NamePos e.Name)
	( t.ParentStack ) t.Lexer (DoubleColon t.SrcPos) =
		<NCallable-ReadQualified
			t.ErrorList t.SymTable t.VarTable
			(Module t.NamePos e.Name)
			( t.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable t.VarTable
	(Name t.NamePos e.Name)
	( (e.ResultExpr t.UpParentStack) )
	t.Lexer t.NextToken =
		t.ErrorList t.SymTable t.VarTable (
			e.ResultExpr
			( FnCall
				(Qualified
					t.NamePos
					<MQualifiedName::Create (e.Name)>
				)
			) t.UpParentStack
		) t.Lexer t.NextToken;
}

NCallable-ReadQualified {
	t.ErrorList t.SymTable t.VarTable
	(Module t.ModNamePos e.Name)
	( (e.ResultExpr t.UpParentStack) )
	t.Lexer (Identifier t.SrcPos e.Function) =
		t.ErrorList t.SymTable t.VarTable (
			e.ResultExpr
			(FnCall
				(Qualified
					t.ModNamePos
					<MQualifiedName::Create (e.Name) (e.Function)>
				)
			) t.UpParentStack
		) <MLexer::NextToken t.Lexer>;

	t.ErrorList t.SymTable t.VarTable
	(Module t.ModNamePos e.Name)
	( (e.ResultExpr t.UpParentStack) )
	t.Lexer t.OtherToken =
		<MError::AddUnexpected
			t.ErrorList t.OtherToken 'qualified function name'
		> t.SymTable t.VarTable
		( e.ResultExpr InvalidCallable t.UpParentStack )
		t.Lexer t.OtherToken;
}


//------------------------------------------------------------------------------
// Синтаксический анализ sym-модуля
//------------------------------------------------------------------------------

NSymModule {
	t.ErrorList t.SymTable ()
	t.Lexer t.NextToken =
		<NSymModuleBody
			<NModuleHeader
				t.ErrorList t.SymTable () t.Lexer t.NextToken
			>
		>;
}

NFunctionDeclaration {
	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer (Identifier t.SrcPos e.FnName) =
		<ExpectEndSent
			<AddNewEntity
				t.ErrorList t.SymTable t.SrcPos (e.FnName)
				(Kind Function)
				(ScopeClass Entry)
			> ( e.ParentStack )
			<MLexer::NextToken t.Lexer>
		>;

	t.ErrorList t.SymTable ( e.ParentStack )
	t.Lexer t.Unexpected =
		<MError::AddUnexpected
			t.ErrorList t.Unexpected 'function name'
		> t.SymTable ( e.ParentStack )
		t.Lexer t.Unexpected;
}

NSymModuleBody {
	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer (Directive t.SrcPos Import) =
		<NSymModuleBody
			<NImportBlock
				t.ErrorList t.SymTable
				( e.Elements )
				<MLexer::NextToken t.Lexer>
			>
		>;

	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer (Directive t.SrcPos Entry) =
		<NSymModuleBody
			<NFunctionDeclaration
				t.ErrorList t.SymTable
				( e.Elements )
				<MLexer::NextToken t.Lexer>
			>
		>;

	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer (Directive t.SrcPos End) =
		<NModuleTailer
			t.ErrorList t.SymTable ( e.Elements )
			t.Lexer (Directive t.SrcPos End)
		>;

	t.ErrorList t.SymTable ( e.Elements )
	t.Lexer t.Unexpected =
		<NSymModuleBody
			<MError::AddUnexpected
				t.ErrorList t.Unexpected 'import or module declaration'
			> t.SymTable ( e.Elements )
			<MLexer::NextToken t.Lexer>
		>;
}

$END MParser.
