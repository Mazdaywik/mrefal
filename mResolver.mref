$MODULE MResolver;

$IMPORT MError;
$IMPORT MQualifiedName;
$IMPORT MQualifiedSupport;
$IMPORT MResolveTable;
$IMPORT MSymTable;
$IMPORT MSymTable-Module;

/**
	<Resolve t.Module t.ErrorList t.ResolveTable>
		== t.ResolvedModule s.ErrorStatus t.UpdatedErrorList
*/
$ENTRY Resolve
	t.SymTable t.ErrorList t.ResolveTable =
		<Resolve-Aux
			<MSymTable-Module::Module-From-SymTable t.SymTable>
			t.ResolveTable t.ErrorList
		>;

Resolve-Aux
	( t.SymTable e.ModuleContent ) t.ResolveTable t.ErrorList =
		<StartResolving
			t.ResolveTable
			<ExtractLocalInfo t.SymTable>
			(e.ModuleContent) t.ErrorList
		>;

ExtractLocalInfo
	t.SymTable =
		<ExtractLocalInfo-ADT
			<MSymTable::ExtractLocalInfo t.SymTable>
		>;

ExtractLocalInfo-ADT
	t.SymTable e.LocalFunctions =
		<DoExtractLocalInfo-ADT
			<MSymTable::FindByKind t.SymTable ADT>
			(e.LocalFunctions)
		>;

DoExtractLocalInfo-ADT {
	t.SymTable (e.ADTName) e.ADTs (e.LocalScope) =
		<DoExtractLocalInfo-ADT
			t.SymTable e.ADTs
			(e.LocalScope (ADT e.ADTName))
		>;

	t.SymTable (e.LocalScope) =
		t.SymTable (e.LocalScope);
}

StartResolving
	t.ResolveTable
	t.SymTable ( e.LocalScope )
	( e.ModuleContent )
	t.ErrorList =
		<ResolvingElements
			<FillTable
				t.ResolveTable
				( <MSymTable::ExtractCurrentModule t.SymTable> )
				(e.ModuleContent) t.ErrorList
				e.LocalScope
			>
		>;

FillTable {
	t.ResolveTable
	( t.SymTable e.CurrentModule )
	(e.ModuleContent) t.ErrorList
	e.LocalScope =
		<FillLocal t.ResolveTable (e.CurrentModule) e.LocalScope>
		t.SymTable (e.ModuleContent) t.ErrorList;
}

/*
	Инвариант: <FillLocal t.ResolveTable (e.CurrentModule) e.LocalScope>
		e.LocalScope ::= (s.ScopeClass e.FnName)*
*/
FillLocal {
	t.ResolveTable (e.CurrentModule)
	(s.ScopeClass e.Function) e.Functions =
		<FillLocal
			<MResolveTable::Add
				t.ResolveTable
				<MQualifiedName::Create (e.Function)>
				s.ScopeClass
				<MQualifiedName::Create (e.CurrentModule)(e.Function)>
			> (e.CurrentModule) e.Functions
		>;

	t.ResolveTable (e.CurrentModule) =
		t.ResolveTable;
}

ResolvingElements
	t.ResolveTable t.SymTable ( e.Elements ) t.ErrorList =
		<DoResolvingElements
			t.SymTable
			( )
			t.ErrorList
			t.ResolveTable
			e.Elements
		>;

DoResolvingElements {
	t.SymTable ( e.ResolvedElements )
	t.ErrorList
	t.ResolveTable =
		<MSymTable-Module::SymTable-From-Module
			( t.SymTable e.ResolvedElements )
		>
		<MResolveTable::Destroy t.ResolveTable>
		<CheckErrors t.ErrorList>;

	t.SymTable ( e.ResolvedElements )
	t.ErrorList t.ResolveTable
	t.NextElement e.Elements =
		<DoResolvingElements
			<AddElement
				t.SymTable ( e.ResolvedElements )
				<ResolvingOneElement
					t.NextElement
					t.ErrorList t.ResolveTable
				>
			> e.Elements
		>;
}

CheckErrors
	t.ErrorList =
		<SwCheckErrors
			<MError::EmptyList t.ErrorList>
		>;

SwCheckErrors {
	t.ErrorList Empty = Success t.ErrorList;
	t.ErrorList NotEmpty = Errors t.ErrorList;
}

AddElement
	t.SymTable ( e.ResolvedElements )
	t.Resolved t.ErrorList t.ResolveTable =
		t.SymTable
		( e.ResolvedElements t.Resolved )
		t.ErrorList t.ResolveTable;

// Модуль состоит только из функций, swaps регистрируются в таблице символов
ResolvingOneElement {
	( Function s.ScopeClass (e.FnName) t.QualifiedName (e.Sentences) )
	t.ErrorList t.ResolveTable =
		<ResolveFnName-Header
			( Function s.ScopeClass (e.FnName) t.QualifiedName (e.Sentences) )
			t.ErrorList
			<MResolveTable::Lookup t.ResolveTable t.QualifiedName>
		>;
}

ResolveFnName-Header {
	( Function s.ScopeClass (e.FnName) t.QualifiedName (e.Sentences) )
	t.ErrorList
	t.ResolveTable Found s.ScopeClass t.FunctionNameQualified =
		<DoResolvingFunction
			( Function s.ScopeClass (e.FnName) t.FunctionNameQualified )
			t.ErrorList t.ResolveTable
			() e.Sentences
		>;
}

DoResolvingFunction {
	( Function s.ScopeClass (e.FnName) t.QualifiedFNName )
	t.ErrorList t.ResolveTable
	(e.Resolved) =
		( Function s.ScopeClass (e.FnName) t.QualifiedFNName (e.Resolved) )
		t.ErrorList t.ResolveTable;

	( Function s.ScopeClass (e.FnName) t.QualifiedFNName )
	t.ErrorList t.ResolveTable
	(e.Resolved) t.NextSentence e.Tail =
		<DoResolvingFunction
			(Function s.ScopeClass (e.FnName) t.QualifiedFNName )
			<ResolvingSentence
				t.ErrorList t.ResolveTable
				(e.Resolved) t.NextSentence
			> e.Tail
		>;
}

/*
	Образцовое и результатное выражения различаются лишь набором термов.
	Считаем, что на входе имеем правильное выражение (чужих термов ни в образце,
	ни в результате нет, все переменные на месте).
	Не смотря на то, что пока поддерживается только Базисный Рефал, мы выражение
	трактуем как цепочку из нескольких образцовых и результатных выражений:
		(Pattern ...) (Result ...) (Result ...) ...
	Эту последовательность можно трактовать как одно большое длинное выражение, в кото-
	ром (Pattern e.Content) и (Result e.Content) -- просто особые типы скобок.
*/

ResolvingSentence {
	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( e.UnresolvedChain ) =
		<ResolvingChain
			t.ErrorList t.ResolveTable
			(e.ResolvedSentences)
			( '$' ) e.UnresolvedChain '$'
		>;
}

ResolvingChain {
	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( '$' e.ScannedChain ) '$' =
		t.ErrorList t.ResolveTable
		( e.ResolvedSentences
			( e.ScannedChain )
		);

	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( e.ScannedChain )
	( Pattern e.SubChain ) e.Tail =
		<ResolvingChain
			t.ErrorList t.ResolveTable
			(e.ResolvedSentences)
			( ( '!' Pattern e.ScannedChain ) )
			e.SubChain ( '!' Pattern e.Tail )
		>;

	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( e.ScannedChain )
	( Result e.SubChain ) e.Tail =
		<ResolvingChain
			t.ErrorList t.ResolveTable
			(e.ResolvedSentences)
			( ( '!' Result e.ScannedChain ) )
			e.SubChain ( '!' Result e.Tail )
		>;

	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( e.ScannedChain )
	( Structure e.InBrackets ) e.Tail =
		<ResolvingChain
			t.ErrorList t.ResolveTable
			(e.ResolvedSentences)
			( ( '!' Structure e.ScannedChain ) )
			e.InBrackets ( '!' Structure e.Tail )
		>;

	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( e.ScannedChain )
	( Abstract e.InBrackets ) e.Tail =
		<ResolvingChain
			t.ErrorList t.ResolveTable
			(e.ResolvedSentences)
			( ( '!' Abstract e.ScannedChain ) )
			e.InBrackets ( '!' Abstract e.Tail )
		>;

	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( e.ScannedChain )
	( Qualified t.SrcPos t.QualifiedName )
	e.Argument e.Tail =
		<ResolvingChain
			<ResolvingQualified
				t.ErrorList t.ResolveTable
				(e.ResolvedSentences)
				( e.ScannedChain )
				( Qualified t.SrcPos t.QualifiedName )
				e.Tail
			>
		>;

	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( e.ScannedChain )
	( Function t.Callable e.Argument ) e.Tail =
		<ResolvingChain
			t.ErrorList t.ResolveTable
			(e.ResolvedSentences)
			( ( '!' Function e.ScannedChain ) )
			t.Callable e.Argument ( '!' Function e.Tail )
		>;

	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( e.ScannedChain )
	( FnPtr t.Callable ) e.Tail =
		<ResolvingChain
			t.ErrorList t.ResolveTable
			(e.ResolvedSentences)
			( ( '!' FnPtr e.ScannedChain ) )
			t.Callable ( '!' FnPtr e.Tail )
		>;

	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( e.ScannedChain )
	( IndirectCall (SVar e.Index) e.Argument ) e.Tail =
		<ResolvingChain
			t.ErrorList t.ResolveTable
			(e.ResolvedSentences)
			( ( '!' IndirectCall e.ScannedChain ) (SVar e.Index) )
			e.Argument ('!' IndirectCall e.Tail)
		>;

	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( ( '!' s.BracketType e.LMultiBracket ) e.InBrackets )
	( '!' s.BracketType e.RMultiBracket ) =
		<ResolvingChain
			t.ErrorList t.ResolveTable
			(e.ResolvedSentences)
			( e.LMultiBracket (s.BracketType e.InBrackets) )
			e.RMultiBracket
		>;

	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( e.ScannedChain )
	t.NextTerm e.Tail =
		<ResolvingChain
			t.ErrorList t.ResolveTable
			(e.ResolvedSentences)
			( e.ScannedChain t.NextTerm )
			e.Tail
		>;
}

/*
	То, ради чего делается весь этот сложный рекурсивный просмотр --
анализ корректности вызовов. Стратегия обработки ошибок (необъявленных
функций): функциональный терм заменяем скобочным термом и заносим
информацию об ошибке в список ошибок.
*/
ResolvingQualified {
	t.ErrorList t.ResolveTable
	(e.ResolvedSentences)
	( e.ScannedChain )
	(Qualified t.SrcPosModule t.QualifiedName)
	e.Argument (e.NotScannedResult) =
		<SwResolvingQualified
			t.ErrorList
			<MResolveTable::Lookup
				t.ResolveTable
				t.QualifiedName
			> t.SrcPosModule
			(e.ResolvedSentences)
			( e.ScannedChain )
			e.Argument (e.NotScannedResult)
		>;
}

SwResolvingQualified {
	t.ErrorList t.ResolveTable
	Found s.ScopeClass t.QualifiedName t.SrcPos
	(e.ResolvedSentences)
	( e.ScannedChain )
	e.Argument (e.NotScannedResult) =
		t.ErrorList t.ResolveTable
		(e.ResolvedSentences)
		( e.ScannedChain (s.ScopeClass t.QualifiedName) )
		e.Argument (e.NotScannedResult);

	t.ErrorList t.ResolveTable
	NotFound NotFound t.UnresolvedQualified t.SrcPos
	(e.ResolvedSentences)
	( ('!' s.BracketType e.LMultiBracket) )
	e.Argument ('!' s.BracketType e.RMultiBracket) =
		<MError::AddUnresolvedFunction
			t.ErrorList t.SrcPos GenericQualified
			<MQualifiedName::Parse t.UnresolvedQualified>
		> t.ResolveTable
		(e.ResolvedSentences)
		( ('!' Structure e.LMultiBracket) )
		e.Argument ('!' Structure e.RMultiBracket);
}

$END MResolver.