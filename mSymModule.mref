$MODULE MSymModule;

/**
  Модуль инкапсулирует работу с sym-файлами: загрузку данных из них, сохранение
на диск, кеширование внутри контекста.
*/

$IMPORT Context;
$IMPORT MClusters;
$IMPORT MFileSystem;
$IMPORT MIModule;
$IMPORT MLambda;
$IMPORT Modules;
$IMPORT MQualifiedName;
$IMPORT MQualifiedSupport;
$IMPORT MSymModule_New;

LoadInfo_New
  t.hContext t.ModuleName =
    <MSymModule_New::LoadInfo t.hContext t.ModuleName>;

/**
  <LoadInfo t.Context e.ModuleName>
    == t.UpdatedContext
      ( Module e.ModuleName )
      ( Functions ((e.Qualifier)(e.FnName))* )
      ( Imports (e.ModName)* )
    == t.Context SymInfoNotFound
*/
$ENTRY LoadInfo
  t.hContext e.ModuleName =
    <CheckActual
      <MClusters::CheckNeedCompile
        t.hContext
        ( <Modules::DefaultModulePath> )
        <MakeQualified e.ModuleName>
      >
    >;

CheckActual {
  t.hContext t.ModuleName NeedRecompile =
    t.hContext SymInfoNotFound;

  t.hContext t.ModuleName Updated =
    <SymInfo-ToOld
      <ExtractSymInfo
        <LoadInfo_New t.hContext t.ModuleName>
      >
    >;

  t.hContext t.ModuleName Library =
    <SymInfo-ToOld
      <ExtractSymInfo
        <LoadInfo_New t.hContext t.ModuleName>
      >
    >;

  t.hContext t.ModuleName NotFound =
    t.hContext SymInfoNotFound;

  t.hContext t.ModuleName SuccessCompiled =
    <SymInfo-ToOld
      <ExtractSymInfo
        <LoadInfo_New t.hContext t.ModuleName>
      >
    >;

  t.hContext t.ModuleName Errors =
    t.hContext SymInfoNotFound;
}

MakeQualified
  e.SymFileName =
    <MakeQualified-Aux
      <MFileSystem::ParseFileName e.SymFileName>
    >;

MakeQualified-Aux
  (e.Directory) e.ModuleName (e.Ext) =
    <MQualifiedName::Create (e.ModuleName)>;

ExtractSymInfo {
  t.Context Success t.IModule =
    t.Context
    <ExtractSymInfo--CreateResult
      <SymTableToSymInfo-T t.IModule>
    >;

  t.Context Fails =
    t.Context SymInfoNotFound;
}

ExtractSymInfo--CreateResult
  t.IModule (CurModule e.CurModule)
  (Functions e.FnList) (Imports e.Imports) =
    <MIModule::Destroy t.IModule>
    ( Module () e.CurModule )
    ( Functions e.FnList )
    ( Imports <AddEmptyDirectory e.Imports> );

AddEmptyDirectory {
  (e.ImportName) e.Tail =
    (() e.ImportName)
    <AddEmptyDirectory e.Tail>;

  = ;
}

SymInfo-ToOld {
  t.Context
  ( Module () e.CurModule )
  ( Functions e.FnList )
  ( Imports e.Imports ) =
    t.Context
    ( Module e.CurModule )
    ( Functions <ToQualified (e.CurModule) e.FnList> )
    ( Imports <RemoveEmptyDirectory e.Imports> );

  t.Context SymInfoNotFound = t.Context SymInfoNotFound;
}

RemoveEmptyDirectory {
  (() e.ImportName) e.Tail =
    (e.ImportName) <RemoveEmptyDirectory e.Tail>;

  = ;
}


ToQualified (e.Prefix) e.Functions =
  <DoToQualified () (e.Prefix) e.Functions>;

DoToQualified {
  (e.Qualified) (e.Prefix) (e.NextName) e.Tail =
    <DoToQualified
      ( e.Qualified ((e.Prefix) (e.NextName)) )
      (e.Prefix)
      e.Tail
    >;

  (e.Qualified) (e.Prefix) = e.Qualified;
}

/*------------------------------------------------------------------------------
  Извлечение информации из таблицы символов
------------------------------------------------------------------------------*/

/**
  <SymTableToSymInfo-T t.IModule>
    == t.IModule
      ( CurModule e.ModName )
      ( Functions (e.FnName)* )
      ( Imports (e.ModName)* )
*/
SymTableToSymInfo-T
  t.IModule =
    <SymTableToSymInfo--Imports
      <MLambda::MapReduce
        & RealNameFromAlias
        <MIModule::GetImportList t.IModule>
      >
    >;

RealNameFromAlias
  t.IModule t.Alias =
    <RealNameFromAlias-Aux
      <MIModule::GetImportAttribute
        t.IModule RealName t.Alias
      >
    >;

RealNameFromAlias-Aux
  t.IModule Found t.RealName =
    t.IModule t.RealName;

SymTableToSymInfo--Imports
  t.IModule e.Imports =
    <SymTableToSymInfo--Functions
      <FilterEntry <MIModule::GetFunctionList t.IModule>>
    >
    ( Imports
      <MLambda::Map
        & UnQualifyBrackets
        e.Imports
      >
    );

UnQualifyBrackets
  t.Name = ( <MQualifiedSupport::UnQualify t.Name> );

FilterEntry
  t.IModule e.FnList =
    <DoFilterEntry
      t.IModule () e.FnList
    >;

DoFilterEntry {
  t.IModule (e.Entries) (e.NextFn) e.FnList =
    <DoFilterEntry
      <SwFilterEntry
        <MIModule::GetFunctionAttribute
          t.IModule ScopeClass e.NextFn
        > (e.Entries) e.NextFn
      > e.FnList
    >;

  t.IModule (e.Entries) = t.IModule e.Entries;
}

SwFilterEntry {
  t.IModule Found Entry (e.Entries) e.FnName =
    t.IModule (e.Entries (e.FnName));

  t.IModule Found s.OtherClass (e.Entries) e.FnName =
    t.IModule (e.Entries);
}

SymTableToSymInfo--Functions
  t.IModule e.Functions =
    <SymTableToSymInfo--CurModule
      <MIModule::GetModuleName t.IModule>
    > ( Functions e.Functions );

SymTableToSymInfo--CurModule
  t.IModule t.CurModule =
    t.IModule
    (CurModule
      <MQualifiedSupport::UnQualify t.CurModule>
    );

$END MSymModule.
