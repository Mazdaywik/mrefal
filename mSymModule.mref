$MODULE MSymModule;

/**
	Модуль инкапсулирует работу с sym-файлами: загрузку данных из них, сохранение
на диск, кеширование внутри контекста. Поиск стартовых функций должен осуществлять
линковщик.
*/

$IMPORT Context;
$IMPORT FileIO;
$IMPORT MError;
$IMPORT MIModule;
$IMPORT MLocation;
$IMPORT Modules;
$IMPORT MOrder;
$IMPORT MParser;

*-------------------------------------------------------------------------------
* Загрузка символической информации
*-------------------------------------------------------------------------------

/**
	<LoadInfo t.Context (e.Directory) e.ModuleName>
		== t.UpdatedContext
			( Module (e.Directory) e.ModuleName )
			( Functions (e.FnName)* )
			( Imports ((e.ImportDirectory) e.ImportName)* )
		== t.Context SymInfoNotFound
*/
$ENTRY LoadInfo
	t.Context (e.Directory) e.ModuleName =
		<CheckActual
			<MLocation::LookupModule-T
				t.Context (e.Directory) e.ModuleName
			>
		>;

CheckActual {
	t.Context s.Known s.Status
	(Sym e.SymFileName) t.OutFile t.SrcFile
	(e.Directory) e.ModuleName =
		<SwCheckActual
			t.Context
			<ActualStatus s.Known s.Status>
			e.SymFileName
		>;
}

ActualStatus {
	Known s.Status = Actual;

	NotKnown ModuleNotFound = NotActual;
	NotKnown NeedRecompile = NotActual;
	NotKnown Library = Actual;
	NotKnown SrcNotUpdated = Actual;
	NotKnown SystemLibrary = Actual;
}

SwCheckActual {
	t.Context Actual e.SymFileName =
		<ExtractSymInfo
			t.Context
			<MParser::SymModule e.SymFileName>
		>;

	t.Context NotActual = t.Context SymInfoNotFound;
}

/**
	<LoadInfo1 t.Context e.ModuleName>
		== t.UpdatedContext
			( Functions ((e.Qualifier)(e.FnName))* )
			( Imports (e.ModName)* )
		== t.Context SymInfoNotFound
*/
$ENTRY LoadInfo1
	t.Context e.ModuleName =
		<CheckActual-Old
			<LookupSym t.Context e.ModuleName>
		>;

/* В тех случаях, когда информация в sym-файле отсутствует
или не актуальна, возвращаем SymInfoNotFound */

CheckActual-Old {
	(e.ModuleName) t.Context Known s.Status e.SymFName =
		<SymInfo-ToOld
			<ExtractSymInfo
				t.Context
				<MParser::SymModule e.SymFName>
			>
		>;

	(e.ModuleName) t.Context NotKnown s.Status e.SymFName =
		<SwCheckActual-Old
			t.Context <ActualState-Old s.Status> e.SymFName
		>;
}

SwCheckActual-Old {
	t.Context Actual e.SymFName =
		<SymInfo-ToOld
			<ExtractSymInfo
				t.Context
				<MParser::SymModule e.SymFName>
			>
		>;

	t.Context NotActual e.SymName =
		t.Context SymInfoNotFound;
}

ActualState-Old {
	ModuleNotFound = NotActual;
	NeedRecompile = NotActual;
	Library = Actual;
	SrcNotUpdated = Actual;
	SystemLibrary = Actual;
}

ExtractSymInfo {
	t.Context t.IModule Success t.ErrorList =
		<ExtractSymInfo--CreateResult
			t.Context
			<SymTableToSymInfo-T t.IModule>
		> <MError::DestroyErrList t.ErrorList>;

	t.Context t.IModule s.ErrorResult t.ErrorList =
		t.Context
		<MIModule::Destroy t.IModule>
		<MError::PrintErrors t.ErrorList>
		SymInfoNotFound;
}

ExtractSymInfo--CreateResult
	t.Context t.IModule (CurModule e.CurModule)
	(Functions e.FnList) (Imports e.Imports) =
		t.Context
		<MIModule::Destroy t.IModule>
		( Module () e.CurModule )
		( Functions e.FnList )
		( Imports <AddEmptyDirectory e.Imports> );

AddEmptyDirectory {
	(e.ImportName) e.Tail =
		(() e.ImportName)
		<AddEmptyDirectory e.Tail>;

	= ;
}

SymInfo-ToOld {
	t.Context
	( Module () e.CurModule )
	( Functions e.FnList )
	( Imports e.Imports ) =
		t.Context
		( Functions <ToQualified (e.CurModule) e.FnList> )
		( Imports <RemoveEmptyDirectory e.Imports> );

	t.Context SymInfoNotFound =
		t.Context SymInfoNotFound;
}

RemoveEmptyDirectory {
	(() e.ImportName) e.Tail =
		(e.ImportName) <RemoveEmptyDirectory e.Tail>;

	= ;
}


ToQualified (e.Prefix) e.Functions =
	<DoToQualified () (e.Prefix) e.Functions>;

DoToQualified {
	(e.Qualified) (e.Prefix) (e.NextName) e.Tail =
		<DoToQualified
			( e.Qualified ((e.Prefix) (e.NextName)) )
			(e.Prefix)
			e.Tail
		>;

	(e.Qualified) (e.Prefix) = e.Qualified;
}

*-------------------------------------------------------------------------------
* Сохранение символической информации
*-------------------------------------------------------------------------------

/**
	<SaveInfo-T1 t.Context t.IModule>
		== t.UpdatedContext t.IModule Success
		== t.Context t.IModule Fail
*/
$ENTRY SaveInfo-T1
	t.Context t.IModule =
		<RealSaveInfo
			t.Context
			<SymTableToSymInfo-T t.IModule>
		>;

/*$ENTRY*/ SaveInfo1
	t.Context t.IModule =
		<CloseSymTable
			<SaveInfo-T1 t.Context t.IModule>
		>;

CloseSymTable
	t.Context t.IModule s.Result =
		t.Context
		<MIModule::Destroy t.IModule>
		s.Result;

RealSaveInfo
	t.Context t.IModule (CurModule e.ModuleName) t.FnList t.ImportList =
		<CheckDestination
			<LookupSym t.Context e.ModuleName>
			t.IModule t.FnList t.ImportList
		>;

CheckDestination
	(e.ModuleName) t.Context s.Known s.Status e.SymName
	t.IModule t.FnList t.ImportList =
		<SwCheckDestination
			(e.ModuleName) t.Context
			<DestStatus s.Known s.Status> e.SymName
			t.IModule t.FnList t.ImportList
		>;

DestStatus {
	Known Library = NotAvail;
	// Recompiled, Updated, InCompiling
	Known s.Other = Avail;

	NotKnown ModuleNotFound = NotAvail;
	NotKnown Library = NotAvail;
	NotKnown SystemLibrary = NotAvail;
	// NeedRecompile, SrcNotUpdated
	NotKnown s.Other = Avail;
}

SwCheckDestination {
	(e.ModuleName) t.Context NotAvail e.SymName
	t.IModule t.FnList t.ImportList =
		t.Context t.IModule Fail;

	(e.ModuleName) t.Context Avail e.SymName
	t.IModule t.FnList t.ImportList =
		t.Context t.IModule Success
		<FileIO::Save
			(e.SymName)
			<GenerateSym
				(e.ModuleName)
				t.FnList t.ImportList
			>
		>;
}

GenerateSym
	(e.ModuleName) (Functions e.FnList) (Imports e.ImportList) =
		('/* Automatically generated file, don\'t edit! */')
		('$module ' e.ModuleName ';')
		()
		<GenImports e.ImportList>
		<GenFuncDecl e.FnList>
		('$end ' e.ModuleName '.');

GenFuncDecl {
	= ;
	e.Funcs =
		<DoGenFuncDecl <MOrder::Sort e.Funcs>> ();
}

DoGenFuncDecl {
	(e.FuncName) e.Tail =
		('$entry ' e.FuncName ';')
		<DoGenFuncDecl e.Tail>;

	= ;
}

GenImports {
	= ;
	e.ImportList =
		<DoGenImports <MOrder::Sort e.ImportList>> ();
}

DoGenImports {
	(e.ModuleName) e.Tail =
		('$import ' e.ModuleName ';')
		<DoGenImports e.Tail>;

	= ;
}

*-------------------------------------------------------------------------------
* Извлечение информации из таблицы символов
*-------------------------------------------------------------------------------

/**
	<SymTableToSymInfo-T t.IModule>
		== t.IModule
			( CurModule e.ModName )
			( Functions (e.FnName)* )
			( Imports (e.ModName)* )
*/
SymTableToSymInfo-T
	t.IModule =
		<SymTableToSymInfo--Imports
			<MIModule::GetImportList t.IModule>
		>;

SymTableToSymInfo--Imports
	t.IModule e.Imports =
		<SymTableToSymInfo--Functions
			<FilterEntry <MIModule::GetFunctionList t.IModule>>
		> ( Imports e.Imports );

FilterEntry
	t.IModule e.FnList =
		<DoFilterEntry
			t.IModule () e.FnList
		>;

DoFilterEntry {
	t.IModule (e.Entries) (e.NextFn) e.FnList =
		<DoFilterEntry
			<SwFilterEntry
				<MIModule::GetFunctionAttribute
					t.IModule ScopeClass e.NextFn
				> (e.Entries) e.NextFn
			> e.FnList
		>;

	t.IModule (e.Entries) = t.IModule e.Entries;
}

SwFilterEntry {
	t.IModule Found Entry (e.Entries) e.FnName =
		t.IModule (e.Entries (e.FnName));

	t.IModule Found s.OtherClass (e.Entries) e.FnName =
		t.IModule (e.Entries);
}

SymTableToSymInfo--Functions
	t.IModule e.Functions =
		<SymTableToSymInfo--CurModule
			<MIModule::GetModuleName t.IModule>
		> ( Functions e.Functions );

SymTableToSymInfo--CurModule
	t.IModule e.CurModule =
		t.IModule (CurModule e.CurModule);

*-------------------------------------------------------------------------------
* Ищет имя sym-файла, а также возвращает его статус
*-------------------------------------------------------------------------------

/**
	<LookupSym t.Context e.ModuleName>
		== (e.ModuleName) t.Context Known s.Status e.SymName
		== (e.ModuleName) t.Context NotKnown s.Status e.SymName
*/
LookupSym
	t.Context e.ModuleName =
		<SwKnownModule
			(e.ModuleName)
			<Context::ExtractOption
				t.Context Sym e.ModuleName
			>
		>;

SwKnownModule {
	(e.ModuleName) t.Context Found e.SymFile =
		<OnKnown--CreateResult
			(e.ModuleName)
			<Context::ExtractOption
				t.Context Status e.ModuleName
			>
			e.SymFile
		>;

	(e.ModuleName) t.Context ModuleInfoNotFound =
		<OnUnknown--CreateResult
			t.Context
			<Modules::LookupModule-T e.ModuleName>
		>;
}

OnKnown--CreateResult
	(e.ModuleName) t.Context Found s.Status e.SymName =
		(e.ModuleName) t.Context Known s.Status e.SymName;

OnUnknown--CreateResult
	t.Context s.State (Sym e.SymName) t.Out t.Src e.ModuleName =
		(e.ModuleName) t.Context NotKnown s.State e.SymName;

$END MSymModule.
