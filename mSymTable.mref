$MODULE MSymTable;

$IMPORT MError;
$IMPORT MSelfDiag;
$IMPORT MStrings;

//------------------------------------------------------------------------------
// Функции для работы с таблицей символов
//------------------------------------------------------------------------------

/* Внутренний формат: 
	t.SymTable ::= [SymTable e.Names]
	e.Names ::= (Name e.Attribs)*
	e.Attribs ::= (s.Attrib e.Value)*

	Каждое имя всегда имеет атрибут Kind. По умолчанию его значение Unknown
*/

//==============================================================================
// Базовые операции
//==============================================================================

$DATA SymTable;

/**
	<Create> == t.SymTable
*/
$ENTRY Create
	= [SymTable];

/**
	<AddName t.SymTable e.Name>
		== t.SymTable
*/
$ENTRY AddName {
	[SymTable e.Names-B ((e.Name) e.Attribs) e.Names-E] e.Name =
		[SymTable
			e.Names-B ((e.Name) e.Attribs) e.Names-E
		];

	[SymTable e.Names] e.NewName =
		[SymTable e.Names ((e.NewName) (Kind Unknown))];
}

/**
	<UpdateAttrib t.SymTable (e.Name) s.Attrib e.Value>
		== t.SymTable
*/
$ENTRY UpdateAttrib {
	[SymTable e.Names-B ((e.Name) e.Attribs) e.Names-E]
	(e.Name) s.Attrib e.Value =
		[SymTable
			e.Names-B
			((e.Name) <UpdateAttrib-Aux (s.Attrib e.Value) e.Attribs>)
			e.Names-E
		];

	t.SymTable (e.Name) s.Attrib e.Value =
		<UpdateAttrib
			<AddName t.SymTable e.Name>
			(e.Name) s.Attrib e.Value
		>;
}

UpdateAttrib-Aux {
	(s.NewAttrib e.NewValue)
	(s.NewAttrib e.?OldValue) e.Tail =
		(s.NewAttrib e.NewValue) e.Tail;

	(s.NewAttrib e.NewValue)
	(s.OtherAttrib e.OtherValue) e.Tail =
		(s.OtherAttrib e.OtherValue)
		<UpdateAttrib-Aux
			(s.NewAttrib e.NewValue) e.Tail
		>;

	(s.NewAttrib e.NewValue) =
		(s.NewAttrib e.NewValue);
}

/**
	<RemoveAttrib t.SymTable e.Name s.Attrib>
		== t.SymTable Found e.Value
		== t.SymTable NoAttrib
		== t.SymTable NoName
*/
$ENTRY RemoveAttrib {
	[SymTable
		e.Names-B
		((e.Name)
			e.Attribs-B (s.Attrib e.Value) e.Attribs-E
		) e.Names-E
	] e.Name s.Attrib =
		[SymTable
			((e.Name) e.Attribs-B e.Attribs-E)
			e.Names-B e.Names-E
		] Found e.Value;

	[SymTable e.Names-B ((e.Name) e.Attribs) e.Names-E]
	e.Name s.?Attrib =
		[SymTable e.Names-B ((e.Name) e.Attribs) e.Names-E]
		NoAttrib;

	[SymTable e.Names] e.?Name s.?Attrib =
		[SymTable e.Names] NoName;
}

/**
	<GetAttrib t.SymTable e.Name s.Attrib>
		== t.SymTable Found e.Value
		== t.SymTable NoAttrib
		== t.SymTable NoName
*/
$ENTRY GetAttrib
	t.SymTable e.Name s.Attrib =
		<SwGetAttrib
			(e.Name) s.Attrib
			<RemoveAttrib t.SymTable e.Name s.Attrib>
		>;

SwGetAttrib {
	(e.Name) s.Attrib t.SymTable Found e.Value =
		<UpdateAttrib
			t.SymTable (e.Name) s.Attrib e.Value
		> Found e.Value;

	(e.Name) s.Attrib t.SymTable NoAttrib =
		t.SymTable NoAttrib;

	(e.Name) s.Attrib t.SymTable NoName =
		t.SymTable NoName;
}

/**
	<RemoveName t.SymTable e.Name>
		== t.SymTable
*/
$ENTRY RemoveName {
	[SymTable e.Names-B ((e.Name) e.?Attribs) e.Names-E]
	e.Name =
		[SymTable e.Names-B e.Names-E];

	[SymTable e.Names] e.Name =
		<MSelfDiag::Error
			'MSymTable::RemoveName: name ' e.Name ' not found'
		>;
}

/**
	<ExtractNames t.SymTable>
		== t.SymTable (e.Name)*
*/
$ENTRY ExtractNames
	[SymTable e.Names] =
		<DoExtractNames
			[SymTable] () e.Names
		>;

/*
	Инвариант:
	<DoExtractNames [SymTable e.Scanned] ( (e.Name)* ) e.NotScanned>
*/
DoExtractNames {
	[SymTable e.Scanned]
	(e.Names) ((e.NextName) e.Attribs) e.NotScanned =
		<DoExtractNames
			[SymTable e.Scanned ((e.NextName) e.Attribs)]
			(e.Names (e.NextName)) e.NotScanned
		>;

	t.SymTable (e.Names) =
		t.SymTable e.Names;
}

$ENTRY Destroy 
	[SymTable e.Names] = ;


//==============================================================================
// Производные операции
//==============================================================================

/**
	<UpdateAttribSet
		t.SymTable (e.Name)
		(s.Attrib e.Value)*
	> == t.SymTable
*/
$ENTRY UpdateAttribSet {
	t.SymTable (e.Name) (s.Attrib e.Value) =
		<UpdateAttrib
			t.SymTable (e.Name) s.Attrib e.Value
		>;

	t.SymTable (e.Name) (s.Attrib e.Value) e.Tail =
		<UpdateAttribSet
			<UpdateAttrib
				t.SymTable (e.Name) s.Attrib e.Value
			> (e.Name) e.Tail
		>;
}

/**
	<FindByKind t.SymTable s.Kind>
		== t.SymTable (e.Name)*
*/
$ENTRY FindByKind
	t.SymTable s.Kind =
		<DoFindByKind
			<ExtractNames t.SymTable>
			s.Kind
		>;

/*
	Инвариант <DoFindByKind t.SymTable e.Names s.Kind>
*/
DoFindByKind {
	t.SymTable e.Names (e.NextName) s.Kind =
		<DoFindByKind-Aux
			<GetAttrib t.SymTable e.NextName Kind>
			e.Names (e.NextName) s.Kind
		>;

	t.SymTable s.Kind =
		t.SymTable;
}

DoFindByKind-Aux {
	t.SymTable Found s.Kind e.Names (e.NextName) s.Kind =
		<DoFindByKind
			t.SymTable e.Names s.Kind
		> (e.NextName);

	t.SymTable Found s.Kind1 e.Names (e.?NextName) s.Kind2 =
		<DoFindByKind
			t.SymTable e.Names s.Kind2
		>;

	// Предполагается, что имя e.NextName есть в таблице -- ведь из таблицы
	// мы его и извлекали. Предполагаем также, что Kind всегда в таблице
	// присутствует.
}

/**
	<AddNewName t.SymTable (e.Name) (s.Attrib e.Value)*>
		== t.SymTable Success
		== t.SymTable Fails

	Если имя (e.Name) отсутствует в таблице, то оно добавляется с указанными
	атрибутами, в противном случае таблица не изменяется.
	Фукция возвращает Success при успешном добавлении имени, Fails в случае,
	если имя уже в таблице было.
*/
$ENTRY AddNewName
	t.SymTable (e.Name) e.Attribs =
		<SwAddNewName
			<GetAttrib t.SymTable e.Name Kind>
			(e.Name) e.Attribs
		>;

SwAddNewName {
	t.SymTable NoName (e.Name) e.Attribs =
		<UpdateAttribSet
			t.SymTable (e.Name) e.Attribs
		> Success;

	t.SymTable Found s.?Kind (e.?Name) e.?Attribs =
		t.SymTable Fails;
}

//==============================================================================
// Специальные операции
//==============================================================================

$ENTRY Initialize {
	t.SymTable e.ModuleName =
		<UpdateAttrib
			t.SymTable (FsName)
			LowerName <MStrings::Lower e.ModuleName>
		>;
}

/**
	<AddCurrentModule
		t.ErrorList t.SymTable t.SrcPos e.ModuleName
	> == t.ErrorList t.SymTable
*/
$ENTRY AddCurrentModule
	t.ErrorList t.SymTable t.SrcPos e.ModuleName s.ModuleType =
		<AddCurrentModule-CheckIdent
			t.ErrorList
			(<GetAttrib t.SymTable FsName LowerName>)
			t.SrcPos e.ModuleName s.ModuleType
			(<MStrings::Lower e.ModuleName>)
		>;

AddCurrentModule-CheckIdent {
	t.ErrorList (t.SymTable Found e.LowerName)
	t.SrcPos e.ModuleName s.ModuleType (e.LowerName) =
		t.ErrorList
		<UpdateAttribSet
			<RemoveName t.SymTable FsName>
			(e.ModuleName)
			(Kind ModuleName)
			(Position t.SrcPos)
			(FsName e.LowerName)
			(ModuleType s.ModuleType)
		>;

	t.ErrorList (t.SymTable Found e.LowerFsName)
	t.SrcPos e.ModuleName (e.?LowerModuleName) =
		<MError::AddMismatchModuleAndFile
			t.ErrorList t.SrcPos (e.ModuleName) (e.LowerFsName)
		> <UpdateAttribSet
			<RemoveName t.SymTable FsName>
			(e.ModuleName)
			(Kind ModuleName)
			(Position t.SrcPos)
			(FsName e.LowerFsName)
		>;
}

/**
	<ExtractCurrentModule t.SymTable>
		== t.SymTable e.ModuleName
*/
$ENTRY ExtractCurrentModule
	t.SymTable =
		<ExtractCurrentModule-Aux
			<FindByKind t.SymTable ModuleName>
		>;

ExtractCurrentModule-Aux {
	t.SymTable (e.ModuleName) =
		t.SymTable e.ModuleName;

	t.SymTable =
		<MSelfDiag::Error
			'MSymTable::ExtractCurrentModule: name of module not found in symtable'
		>;
}

/**
	<CheckCurrentModule t.ErrorList t.SymTable t.SrcPos e.ModuleName>
		== t.ErrorList t.SymTable
		== t.UpdatedErrorList t.SymTable
*/
$ENTRY CheckCurrentModule
	t.ErrorList t.SymTable t.SrcPos e.ModuleName =
		<CheckCurrentModule-Aux
			t.ErrorList
			(<ExtractCurrentModule t.SymTable>)
			t.SrcPos e.ModuleName
		>;

CheckCurrentModule-Aux {
	t.ErrorList (t.SymTable e.ModuleName) t.SrcPos e.ModuleName =
		t.ErrorList t.SymTable;

	t.ErrorList (t.SymTable e.ModuleName-Head)
	t.SrcPos-Tail e.ModuleName-Tail =
		<MakeError-MismatchModuleName
			t.ErrorList
			<GetAttrib t.SymTable e.ModuleName-Head Position>
			(e.ModuleName-Head) t.SrcPos-Tail e.ModuleName-Tail
		>;
}

MakeError-MismatchModuleName
	t.ErrorList t.SymTable t.SrcPos-Head
	(e.ModuleName-Head) t.SrcPos-Tail e.ModuleName-Tail =
		<MError::AddNamesMismatch
			t.ErrorList
			( t.SrcPos-Head e.ModuleName-Head )
			( t.SrcPos-Tail e.ModuleName-Tail )
		> t.SymTable;

/**
	<AddNewEntity
		t.ErrorList t.SymTable t.SrcPos (e.Name)
		(s.Attribute e.Value)*
	> == t.ErrorList t.SymTable
*/
$ENTRY AddNewEntity
	t.ErrorList t.SymTable t.SrcPos (e.Name) e.Attribs =
		<CheckRedeclaration
			t.ErrorList
			<AddNewName
				t.SymTable (e.Name) e.Attribs
			>
			t.SrcPos e.Name
		>;

CheckRedeclaration {
	t.ErrorList t.SymTable Success t.SrcPos e.Name =
		t.ErrorList
		t.SymTable;

	t.ErrorList t.SymTable Fails t.SrcPos e.Name =
		<MError::AddRedeclaredIdentifier
			t.ErrorList t.SrcPos e.Name
		> t.SymTable;
}

/**
	<ExtractImportList t.SymTable>
		== t.SymTable (e.ImportName)*
*/
$ENTRY ExtractImportList
	t.SymTable =
		<FindByKind t.SymTable ImportName>;

/**
	<AddADT t.ErrorList t.SymTable t.SrcPos e.ADTName>
		== t.ErrorList t.SymTable
*/
$ENTRY AddADT
	t.ErrorList t.SymTable t.SrcPos e.ADTName =
		<AddNewEntity
			t.ErrorList t.SymTable t.SrcPos (e.ADTName)
			(Kind ADT)
			(Position t.SrcPos)
		>;

/**
	<ExtractLocalInfo t.SymTable>
		== t.SymTable (s.ScopeClass e.EntityName)*
	s.ScopeClass ::= Entry | Local | Swap
*/
$ENTRY ExtractLocalInfo
	t.SymTable =
		<DoAddScopeClass
			<FindByKind t.SymTable Function>
		>;

/*
	Инвариант: <DoAddScopeClass t.SymTable (e.FnName)*>
*/
DoAddScopeClass {
	t.SymTable e.Functions (e.FnName) =
		<DoAddScopeClass-Aux
			<GetAttrib t.SymTable e.FnName ScopeClass>
			e.Functions (e.FnName)
		>;

	t.SymTable = t.SymTable;
}

DoAddScopeClass-Aux {
	t.SymTable Found s.ScopeClass e.Functions (e.FnName) =
		<DoAddScopeClass
			t.SymTable e.Functions
		> (s.ScopeClass e.FnName);

	t.SymTable NoAttrib e.Functions (e.FnName) =
		<MSelfDiag::Error
			'MSymTable::DoAddScopeClass: '
			'attribute ScopeClass for name '
			e.FnName ' not found'
		>;
}

/**
	<ExtractEntryFunctions t.SymTable>
		== t.SymTable (e.FnName)*
*/
$ENTRY ExtractEntryFunctions
	t.SymTable =
		<DoExtractEntryFunctions
			<ExtractLocalInfo t.SymTable> ()
		>;

/*
	Инвариант
	<DoExtractEntryFunctions t.SymTable e.Names (e.Entries)>
*/
DoExtractEntryFunctions {
	t.SymTable e.Names (Entry e.Name) (e.Entries) =
		<DoExtractEntryFunctions
			t.SymTable e.Names ((e.Name) e.Entries)
		>;

	t.SymTable e.Names (s.?ScopeClass e.?Name) (e.Entries) =
		<DoExtractEntryFunctions
			t.SymTable e.Names (e.Entries)
		>;

	t.SymTable (e.Entries) =
		t.SymTable e.Entries;
}

$END MSymTable.
