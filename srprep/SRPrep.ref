

* Starter
$ENTRY Go{=<E><E0><Br 'Finalizers='E1><Br 'Finalizers='E2><E3
><E4 0>;}

* Entry::FileIO::Init
E{=<S 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18>;}

* Entry::MR-Extent::Init
E0{=<E5'echo %random%>~suf.tmp'><S0<E6'TEMP'>'\\~dirlist_'
<E7<E8'~suf.tmp'>>'.tmp'><E5'del ~suf.tmp'><L>;}

* Entry::MR-Extent::__Finalizer
E1{=<E9>;}

* Entry::InOut::__Finalizer
E2{=<EA>;}

* Entry::SRPrep::Go
E3{=<L0<EB>>;}

* Entry::MRefalRTS::Exit
E4{s.i=<L1 s.i<Dg'Finalizers'>>;}

* Swap::FileIO::G_Handles
S{e.i0=<Dg('::FileIO::G_Handles')><Br('::FileIO::G_Handles')
'=' e.i0>;}

* Entry::MOS::System
E5{e.i1=<L2<System e.i1>>;}

* Swap::MR-Extent::G_TempFileName
S0{e.i0=<Dg('::MR-Extent::G_TempFileName')><Br('::MR-Extent::'
'G_TempFileName')'=' e.i0>;}

* Entry::MOS::Env
E6{e.i2=<GetEnv e.i2>;}

* Entry::MLambda::UnBracket
E7{(T e.i3)=e.i3;}

* Entry::FileIO::Load
E8{e.i4=<L3<EC<ED'r' e.i4>>>;}

* Local::MR-Extent::MR-Extent-CheckVersion
L{=<L4<E5'mr-extent VERSION >'<L5>><EE<L5>>>;}

* Entry::MR-Extent::Final
E9{=<E5'del \"'<L5>'\" >nul 2>nul'>;}

* Entry::InOut::Final
EA{=<L6>;}

* Local::SRPrep::Main
L0{(T e.i5)=<EF(T'Command line error')(T'Use: ' e.i5 
' mainsrc [optsrc1 [optsrc2 ...]]')>;(T e.i5)(T e.i6)e.i7=
<EG EH e.i7><EI e.i6><E5'compile_mr '<EJ e.i6>>;}

* Entry::MOS::ArgList
EB{=<L7 1<EK 0>>;}

* Local::MRefalRTS::Exit-Aux
L1{s.i=<Exit s.i>;s.i s.i8=<Mu s.i8><E4 s.i>;}

* Local::MOS::Nil
L2{e.i9=;}

* Local::FileIO::DoLoad
L3{t.iA 0=<EL t.iA>;t.iA e.iB 0=(T e.iB)<EL t.iA>;t.iA e.iB
=(T e.iB)<L3<EC t.iA>>;}

* Entry::FileIO::ReadLine
EC{(T0 s.iC e.i4)=(T0 s.iC e.i4)<EM s.iC>;}

* Entry::FileIO::Open
ED{'r' e.i4=<L8<EN e.i4>e.i4>;'w' e.i4=<L9<LA>'w' e.i4>
;s.iD e.i4=<EO s.iD' -- unknown open file mode (file \'' e.i4
'\')'>;}

* Local::MR-Extent::SwMR-Extent-CheckVersion
L4{W'mr-extent' 0 1=;W e.iE=<EO'Invalid version of uti'
'lity mr-extent'>;W0=<EO'Utility mr-exxtent not found'>;}

* Local::MR-Extent::TempName
L5{=<EP S0>;}

* Entry::MXXIO::Load
EE{e.i4=<LB<EG LC<E8 e.i4>>>;}

* Local::InOut::FlushBuffer
L6{=<LD<S1>>;}

* Entry::InOut::WriteText
EF{(T e.iB)e.iF=<EQ e.iB><EF e.iF>;=;}

* Entry::MLambda::Map
EG{t.iG t.iH e.iF=<ER t.iG t.iH><EG t.iG e.iF>;t.iG=;}

* Entry::MPreprocessor::Unit
EH{(T e.i4)=<LE W1 e.i4>;}

* Entry::MPreprocessor::Program
EI{e.i4=<LE W2 e.i4>;}

* Entry::MLocation::OutName
EJ{e.i4=<ES e.i4>'.mref';}

* Local::MOS::DoArgList
L7{s.iI=;s.iI e.iJ=(T e.iJ)<L7<ET s.iI><EK s.iI>>;}

* Entry::MOS::Arg
EK{s.iK=<Arg s.iK>;}

* Entry::FileIO::NulClose
EL{(T0 s.iC e.i4)=<EU'r' s.iC'nul'><LF s.iC>;}

* Entry::MRefalRTS::Get
EM{s.Channel=<Get s.Channel>;}

* Local::FileIO::CheckExistAndOpenForRead
L8{W3 e.i4=<L9<LA>'r' e.i4>;W4 e.i4=<EO'Can\'t open f'
'ile \'' e.i4'\' for reading'>;}

* Entry::MRefalRTS::ExistFile
EN{e.FileName=<LG e.FileName>;}

* Local::FileIO::SwOpen
L9{W s.iC s.iL e.i4=(T0 s.iC e.i4)<EU s.iL s.iC e.i4>
;W0 s.iL e.i4=<EO'Can\'t open file ' e.i4': no free hand'
'les'>;}

* Local::FileIO::GetHandle
LA{=<EV S>;}

* Entry::MSelfDiag::Error
EO{e.iM=<EW'INTERNAL ERROR: ' e.iM><EX'INTERNAL ERROR: ' e.iM
><E4 1>;}

* Entry::MSwapSupport::Read
EP{s.iN=<LH s.iN<Mu s.iN>>;}

* Local::MXXIO::ParseXXIO
LB{e.iO=<LI'$'(T)e.iO>;}

* Local::MXXIO::UnBracket
LC{(T e.iP)=e.iP;}

* Local::InOut::SwFlushBuffer
LD{=;e.iB=<EW<EY e.iB>>;}

* Swap::InOut::G_Buffer
S1{e.i0=<Dg('::InOut::G_Buffer')><Br('::InOut::G_Buffer')'=' e.i0
>;}

* Entry::InOut::WriteLine
EQ{e.iB=<EW<EY<S1>e.iB>>;}

* Entry::MLambda::Apply
ER{(T1 t.iG e.iQ)e.iJ=<ER t.iG e.iQ e.iJ>;(T2 t.iG e.iQ
)t.iC e.iJ=<ER t.iG t.iC e.iQ e.iJ>;(T3 t.iG e.iR)e.iJ=
<ER t.iG e.iJ e.iR>;(T4 t.iS t.iT)e.iJ=<ER t.iT<ER t.iS
e.iJ>>;(T5 t.iG)t.iC e.iJ=t.iC<ER t.iG e.iJ>;(T6 t.iU t.iV
)e.iJ=<ER t.iU e.iJ><ER t.iV e.iJ>;(T7 e.iW)t.iC e.iJ=
<LJ<EZ LK(T t.iC e.iJ)e.iW>>;(T8 e.iX)e.iJ=e.iX;s.iY e.iJ
=<Mu s.iY e.iJ>;}

* Local::MPreprocessor::CommonUnit
LE{s.iZ e.i4=<EQ'SCAN FILE ' e.i4><E10(T<EJ e.i4>)<LL(
T s.iZ<ES e.i4>)<E11<E12 e.i4>>>>;}

* Entry::MLocation::ModuleName
ES{e.i4=<LM<E13 e.i4>>;}

* Entry::Math::Inc
ET{s.iK=<E14 s.iK 1>;}

* Entry::MRefalRTS::Open
EU{s.Mode s.Channel e.FName=<Open s.Mode s.Channel e.FName>;}

* Local::FileIO::ReleaseHandle
LF{s.iC=<E15 S s.iC>;}

* Local::MRefalRTS::ExistFileAux
LG{e.FileName=<LN<ExistFile e.FileName>>;}

* Entry::MSwapSupport::PopFront
EV{s.iN=<LO s.iN<Mu s.iN>>;}

* Entry::MRefalRTS::Prout
EW{e.Arg=<Prout e.Arg>;}

* Entry::MSelfDiag::Log
EX{e.iM=<LP><E16 19 e.iM>;}

* Local::MSwapSupport::ReadAndReturn
LH{s.iN e.i10=<Mu s.iN e.i10>e.i10;}

* Local::MXXIO::DoParse
LI{t.i11(T e.i12)'#(' e.iO=<LI t.i11(T e.i12'(')e.iO>;t.i11
(T e.i12)'#)' e.iO=<LI t.i11(T e.i12')')e.iO>;t.i11(T e.i12
)'##' e.iO=<LI t.i11(T e.i12'#')e.iO>;t.i11(T e.i12)'#' e.iO
=<LQ t.i11(T e.i12)e.iO>;t.i11(T e.i12)'(' e.iO=<LI(T t.i11
e.i12)(T)e.iO>;(T t.i11 e.i12)(T e.i13)')' e.iO=<LI t.i11(
T e.i12(T e.i13))e.iO>;t.i11(T e.i12)'\\' e.iO=<LR t.i11(
T e.i12)e.iO>;'$'(T e.i12)')' e.iO=W0;t.i14(T e.i12)s.i15 e.iO
=<LI t.i14(T e.i12 s.i15)e.iO>;'$'(T e.i12)=W e.i12;t.i11(
T e.i12)=W0;}

* Entry::MDosWinRecoder::WinToDos
EY{e.iB=<LS(T<LT>)e.iB>;}

* Local::MLambda::Apply-PH-Finish
LJ{(T t.iC e.iJ)e.i16=t.iC e.i16;}

* Entry::MLambda::MapReduce
EZ{t.iG t.i17 e.i18=<E7<E17<E18 LU t.iG>(T t.i17)e.i18>>;}

* Local::MLambda::Applies-PH
LK{(T t.iC e.iJ)t.iG=<LV(T e.iJ)<ER t.iG t.iC e.iJ>
>;}

* Entry::MUnLexer::Write
E10{(T e.i4)e.i19=<E19(T e.i4)(T<EG LW e.i19>)>;}

* Local::MPreprocessor::Preprocess
LL{(T s.iZ e.i1A)e.i19=(T W5(T)s.iZ)(T W6(T' ')
'Cpp-SR-BE::' e.i1A)(T W7(T)';')<LX e.i19>(T W5(T)W8)
(T W6(T' ')'Cpp-SR-BE::' e.i1A)(T W7(T)'.');}

* Entry::MLexer::Tokens
E11{e.i4=<LY<LZ<L10 e.i4>>>;}

* Entry::MLocation::SrcName
E12{e.i4=<L11<E13 e.i4>>;}

* Local::MLocation::ModuleName-Aux
LM{(T e.i1B)e.i4(T e.i1C)=e.i4;}

* Entry::MFileSystem::ParseFileName
E13{e.i4=<L12 e.i4(T)>;}

* Entry::Math::Add
E14{e.i9=<Add e.i9>;}

* Entry::MSwapSupport::PushFront
E15{s.iN t.i1D=<Mu s.iN t.i1D<Mu s.iN>>;}

* Local::MRefalRTS::SwExistFileAux
LN{True=W3;False=W4;}

* Local::MSwapSupport::ReturnPopFront
LO{s.iN t.iX e.iF=<Mu s.iN e.iF>W t.iX;s.iN=W0;}

* Local::MSelfDiag::OpenLog
LP{=<L13(T<S2 W9>)>;}

* Entry::MRefalRTS::Putout
E16{s.Channel e.Line=<Putout s.Channel e.Line>;}

* Local::MXXIO::ParseNumber
LQ{t.i11(T e.i12)e.iO=<L14(T'0123456789')t.i11(T e.i12)
e.iO>;}

* Local::MXXIO::Escape
LR{t.i11(T e.i12)'n' e.iO=<LI t.i11(T e.i12'\n')e.iO>;t.i11
(T e.i12)'t' e.iO=<LI t.i11(T e.i12'\t')e.iO>;t.i11(T e.i12
)'\\' e.iO=<LI t.i11(T e.i12'\\')e.iO>;t.i11(T e.i12)'d'
e.iO=<L15 t.i11(T e.i12)e.iO>;t.i11(T e.i12)e.iO=W0;}

* Local::MDosWinRecoder::DoWinToDos
LS{(T e.i1E(T s.i1F s.i1G)e.i1H)s.i1G e.iF=s.i1F<LS(T e.i1E
(T s.i1F s.i1G)e.i1H)e.iF>;(T e.i1I)s.iH e.iF=s.iH<LS(T e.i1I
)e.iF>;(T e.i1I)(T e.i1J)e.iF=(T<LS(T e.i1I)e.i1J>)<LS(
T e.i1I)e.iF>;(T e.i1I)=;}

* Local::MDosWinRecoder::Table
LT{=(T'Ä¿')(T'Å¡')(T'Ç¬')(T'É√')(T'Ñƒ')(T'Ö≈'
)(T'®')(T'Ü∆')(T'á«')(T'à»')(T'â…')(T'ä ')(T 
'ãÀ')(T'åÃ')(T'çÕ')(T'éŒ')(T'èœ')(T'ê–')(T'ë—'
)(T'í“')(T'ì”')(T'î‘')(T'ï’')(T'ñ÷')(T'ó◊')(T 
'òÿ')(T'ôŸ')(T'ö⁄')(T'õ€')(T'ú‹')(T'ù›')(T'ûﬁ'
)(T'üﬂ')(T'†‡')(T'°·')(T'¢‚')(T'£„')(T'§‰')(T 
'•Â')(T'Ò∏')(T'¶Ê')(T'ßÁ')(T'®Ë')(T'©È')(T'™Í'
)(T'´Î')(T'¨Ï')(T'≠Ì')(T'ÆÓ')(T'ØÔ')(T'‡')(T 
'·Ò')(T'‚Ú')(T'„Û')(T'‰Ù')(T'Âı')(T'Êˆ')(T'Á˜'
)(T'Ë¯')(T'È˘')(T'Í˙')(T'Î˚')(T'Ï¸')(T'Ì˝')(T 
'Ó˛')(T'Ôˇ');}

* Entry::MLambda::Reduce
E17{t.iG t.i17 t.iH e.iF=<E17 t.iG<L16<ER t.iG t.i17 t.iH>
>e.iF>;t.iG t.i17=t.i17;}

* Entry::MLambda::BindLeft
E18{(T1 t.iG e.i1K)e.i1L=(T1 t.iG e.i1K e.i1L);t.iG e.i1M=(
T1 t.iG e.i1M);}

* Local::MLambda::MapReducer
LU{t.i1N(T t.i17 e.i12)t.iH=<L17(T<ER t.i1N t.i17 t.iH>)
e.i12>;}

* Local::MLambda::Applies-PH-Aux
LV{(T e.iJ)t.iC e.i1O=(T t.iC e.iJ)e.i1O;}

* Entry::FileIO::Save
E19{(T e.i4)e.i10=<L18<ED'w' e.i4>e.i10>;}

* Local::MUnLexer::TokenToText
LW{(T s.i1P(T e.i1Q)e.iX)=e.i1Q<L19 s.i1P e.iX>;}

* Local::MPreprocessor::PreprocessBody
LX{e.i19=<L1A<E1A>(T)e.i19>;}

* Local::MLexer::ConcatFreeAndValue
LY{(T WA e.i1R)(T WA e.i1S)e.i19=<LY(T WA e.i1R e.i1S)
e.i19>;(T WA e.i1Q)(T s.i1T e.iX)e.i19=(T s.i1T(T e.i1Q)
e.iX)<LY e.i19>;(T s.i1T e.iX)e.i19=(T s.i1T(T)e.iX)<LY e.i19
>;=;}

* Local::MLexer::BaseTokens
LZ{=(T WB);e.iO=<L1B(T<L1C WC>(T<E1B>)<E1B>)(T<L1C WA>
(T' \n\t')' \n\t')(T<L1C W7>(T'();{},=<>'))(T L1D(T<E1C
>)<E1C><E1D><E1B>'_-')(T L1E(T'/'))(T L1F(T'\''))(T L1G
(T'$')<E1C>)(T L1H(T'set'))(T e.iO)>;}

* Local::MLexer::LoadFile
L10{e.i4=<EG L1I<E8 e.i4>>;}

* Local::MLocation::SrcName-Aux
L11{(T e.i1B)e.i4(T)=<L11(T e.i1B)e.i4(T'sref')>;(T)
e.i4(T e.i1C)=e.i4'.' e.i1C;(T e.i1B)e.i4(T e.i1C)=e.i1B 
'\\' e.i4'.' e.i1C;}

* Local::MFileSystem::DoParseExt
L12{e.i4'.'(T e.i1C)=<L1J(T e.i4)>(T e.i1C);e.i4'/'(T e.i1C
)=(T e.i4'/')e.i1C(T);e.i4'\\'(T e.i1C)=(T e.i4'\\'
)e.i1C(T);e.i4':'(T e.i1C)=(T e.i4':')e.i1C(T);(T e.i1C
)=(T)e.i1C(T);e.i4 s.iH(T e.i1C)=<L12 e.i4(T s.iH e.i1C
)>;}

* Local::MSelfDiag::SwOpenLog
L13{(T W9)=;(T)=<EU'w' 19'__log'>;}

* Swap::MSelfDiag::G_LogOpened
S2{e.i0=<Dg('::MSelfDiag::G_LogOpened')><Br('::MSelfDiag::G_L'
'ogOpened')'=' e.i0>;}

* Local::MXXIO::ParseNumber-FirstDigit
L14{(T e.i1U s.iK e.i1V)t.i11(T e.i12)s.iK e.iO=<L1K(T e.i1U
s.iK e.i1V)t.i11(T e.i12)(T s.iK)e.iO>;(T e.iK)t.i11(T e.i12
)e.iO=W0;}

* Local::MXXIO::ParseASCIICode
L15{t.i11(T e.i12)s.i1W s.i1X s.i1Y e.iO=<L1L t.i11(T e.i12)
<L1M s.i1W><L1M s.i1X><L1M s.i1Y>e.iO>;t.i11(T e.i12)e.iO=W0;}

* Local::MLambda::GuardTerm
L16{t.i1Z=t.i1Z;}

* Local::MLambda::MapReducer-Aux
L17{(T t.i17 e.i1O)e.i12=(T t.i17 e.i12 e.i1O);}

* Local::FileIO::DoSave
L18{t.iA(T e.i20)e.iF=<L18<E1E t.iA e.i20>e.iF>;t.iA=<EL t.iA
>;}

* Local::MUnLexer::SwTokenToText
L19{WC e.i21=e.i21;W6 e.i2=e.i2;W7 s.i22=s.i22;WD e.i23=
'/*' e.i23'*/';WE e.i24='//' e.i24'\n';WF e.i24='/*' e.i24
'*/';WG e.i25='\'' e.i25'\'';W5 s.i26=<L1N s.i26>;WH e.i27=e.i27
;WI=;WB=;}

* Local::MPreprocessor::DoPreprocessBody
L1A{t.i28 t.i29(T WD t.i1Q e.i23)e.i19=<E1F e.i23>(T WI t.i1Q
)<L1A t.i28 t.i29 e.i19>;t.i28(T e.i2A(T e.i2B)e.i2C)(T W5 t.i2D
WJ)(T W6 t.i2E e.i2B)(T W5 t.i2F WK)e.i19=(T WI<L1O t.i2D
t.i2E t.i2F>)<L1P t.i28(T e.i2A(T e.i2B)e.i2C)(T e.i2B)e.i19>
;t.i28(T e.i29)(T W5 t.i2D WJ)(T W6 t.i2E e.i2B)(T W5 t.i2F
WK)e.i19=(T W5 t.i2D WL)(T W6 t.i2E'Cpp-SR-BE::' e.i2B)
(T W7(T)';')(T WI t.i2F)<L1P t.i28(T e.i29(T e.i2B))
(T e.i2B)e.i19>;t.i28 t.i29(T W5 t.i2F WK)e.i19=(T WI t.i2F
)<L1Q t.i28 t.i29 e.i19>;t.i28 t.i29(T W5 t.i2G WM)e.i19=(T WI
t.i2G)<L1R WN t.i28 t.i29 e.i19>;t.i28 t.i29(T W5 t.i2G WO)
e.i19=(T WI t.i2G)<L1R WP t.i28 t.i29 e.i19>;t.i28 t.i29(T W6
t.i2E e.i2H)(T W7 t.i2I'{')e.i19=(T W6 t.i2E e.i2H)(T W7 t.i2I
'{')<L1S<L1T t.i28 e.i2H>t.i29 e.i19>;t.i28 t.i29(T WB t.i2J)
=<E1G t.i28>(T WI t.i2J);t.i28 t.i29=<E1G t.i28>;t.i28 t.i29 t.i2K
e.i19=t.i2K<L1A t.i28 t.i29 e.i19>;}

* Entry::MSymTable::Create
E1A{=(T9);}

* Local::MLexer::SwBaseTokens
L1B{e.i2L(T t.i2M(T e.i2N s.iH e.i2O))e.i2P(T s.iH e.iO)
=<L1U<ER t.i2M(T s.iH)e.iO>>;e.i2L(T t.i2M(T e.i2N s.iH e.i2O
)e.i2Q)e.i2P(T s.iH e.iO)=<L1U<L1V t.i2M(T e.i2Q)(T s.iH)
e.iO>>;e.i2R(T s.iH e.iO)=<L1U(T WD s.iH)e.iO>;}

* Local::MLexer::Default
L1C{s.i2=<E18 L1W s.i2>;}

* Entry::Types::Digits
E1B{='01234567890';}

* Local::MLexer::FinishName
L1D{(T e.i2)e.iO=(T W6<L1X e.i2>)e.iO;}

* Entry::Types::UpAlph
E1C{='ABCDEFGHIJKLMNOPQRSTUVWXYZ';}

* Entry::Types::LoAlph
E1D{='abcdefghijklmnopqrstuvwxyz';}

* Local::MLexer::FinishComment
L1E{(T'/')'/' e.i2S'\n' e.iO=<L1Y(T e.i2S)e.iO>;(T'/'
)'/' e.iO=(T WE e.iO);(T'/')'*' e.i2S'*/' e.iO=(T WF e.i2S
)e.iO;(T'/')'*' e.iO=(T WF e.iO);(T'/')e.iO=(T WD 
'/')e.iO;}

* Local::MLexer::FinishLiteral
L1F{(T'\'')'\'' e.iO=(T WG'\\\'')e.iO;(T'\'')e.iO=<L1Z
(T)e.iO>;}

* Local::MLexer::FinishDirective
L1G{(T'$ENTRY')e.iO=(T W5 WP)e.iO;(T'$EXTERN')e.iO=
(T W5 WK)e.iO;(T'$FORWARD')e.iO=(T W5 WK)e.iO;(T 
'$ENUM')e.iO=(T W5 WM)e.iO;(T'$EENUM')e.iO=(T W5 WO)
e.iO;(T'$SWAP')e.iO=(T W5 WQ)e.iO;(T e.i1T)e.iO=(T WD
e.i1T)e.iO;}

* Local::MLexer::FinishVariable
L1H{(T s.i1P)'.' e.iO=<L20(T s.i1P'.')e.iO>;(T s.i1P)e.iO
=(T WD s.i1P)e.iO;}

* Local::MLexer::ToPlain
L1I{(T e.iB)=e.iB'\n';}

* Local::MFileSystem::DoParseDirectory
L1J{(T e.i1B'/')e.i2=(T e.i1B'/')e.i2;(T e.i1B'\\')e.i2
=(T e.i1B'\\')e.i2;(T e.i1B':')e.i2=(T e.i1B':')e.i2;
(T)e.i2=(T)e.i2;(T e.i1B s.iH)e.i2=<L1J(T e.i1B)s.iH e.i2
>;}

* Local::MXXIO::DoParseNumber
L1K{(T e.i1U s.iK e.i1V)t.i11(T e.i12)(T e.i21)s.iK e.iO=
<L1K(T e.i1U s.iK e.i1V)t.i11(T e.i12)(T e.i21 s.iK)e.iO>
;(T e.iK)t.i11(T e.i12)(T e.i21)' ' e.iO=<LI t.i11(T e.i12
<E1H e.i21>)e.iO>;(T e.iK)t.i11(T e.i12)(T e.i21)e.iO=<LI
t.i11(T e.i12<E1H e.i21>)e.iO>;}

* Local::MXXIO::SwParseASCIICode
L1L{t.i11(T e.i12)(T W3 s.i1W)(T W3 s.i1X)(T W3 s.i1Y)
e.iO=<LI t.i11(T e.i12<E1I<E1H s.i1W s.i1X s.i1Y>>)e.iO>;t.i11
(T e.i12)t.i2T t.i2U t.i2V e.iO=W0;}

* Local::MXXIO::IsDigit
L1M{s.i2W=<L21 s.i2W'0123456789'>;}

* Entry::FileIO::WriteLine
E1E{(T0 s.iC e.i4)e.iB=(T0 s.iC e.i4)<E16 s.iC e.iB>;}

* Local::MUnLexer::Directive
L1N{WP='$ENTRY';WL='$IMPORT';W1='$MODULE';W2='$PROGRAM';W8=
'$END';WQ='$SWAP';WJ='//FROM ';}

* Entry::MError::Unexpected
E1F{e.i23=<E1J'Unexpected <' e.i23'>'>;}

* Local::MPreprocessor::ConcatSpace
L1O{e.i2X=<E17 L22(T)e.i2X>;}

* Local::MPreprocessor::ExportFunctions
L1P{t.i28 t.i29(T e.i2B)(T W6 t.i2E e.i2H)(T W7 t.i2Y
',')e.i19=(T WI<L1O t.i2E t.i2Y>)<L1P<L23 t.i28(T e.i2H)e.i2B>
t.i29(T e.i2B)e.i19>;t.i28 t.i29(T e.i2B)(T W6 t.i2E e.i2H)
(T W7 t.i2Z';')e.i19=(T WI<L1O t.i2E t.i2Z>)<L1A<L23 t.i28(
T e.i2H)e.i2B>t.i29 e.i19>;t.i28 t.i29(T e.i2B)e.i19=<E1J
'Expected comma-separated function names'><L1A t.i28 t.i29 e.i19>
;}

* Local::MPreprocessor::ForwardFunctions
L1Q{t.i28 t.i29(T W6 t.i2E e.i2H)(T W7 t.i2Y',')e.i19=(T WI
<L1O t.i2E t.i2Y>)<L1Q<L1T t.i28 e.i2H>t.i29 e.i19>;t.i28 t.i29(
T W6 t.i2E e.i2H)(T W7 t.i2Z';')e.i19=(T WI<L1O t.i2E t.i2Z
>)<L1A<L1T t.i28 e.i2H>t.i29 e.i19>;t.i28 t.i29 e.i19=<E1J'Exp'
'ected comma-separated function names'><L1A t.i28 t.i29 e.i19>;}

* Local::MPreprocessor::EmptyFunctions
L1R{s.i30 t.i28 t.i29(T W6 t.i2E e.i2H)(T W7 t.i2Y',')e.i19=
<L24 s.i30 t.i2E e.i2H>(T WI t.i2Y)<L1R s.i30<L1T t.i28 e.i2H>
t.i29 e.i19>;s.i30 t.i28 t.i29(T W6 t.i2E e.i2H)(T W7 t.i2Z 
';')e.i19=<L24 s.i30 t.i2E e.i2H>(T WI t.i2Z)<L1A<L1T t.i28 e.i2H
>t.i29 e.i19>;s.i30 t.i28 t.i29 e.i19=<E1J'Expected comma-sepa'
'rated function names'><L1A t.i28 t.i29 e.i19>;}

* Local::MPreprocessor::ScanFunctionBody
L1S{t.i28 t.i2B(T W6 t.i2E e.i2)e.i19=<L25(T<E1K t.i28 e.i2>
)t.i2B(T W6 t.i2E e.i2)e.i19>;t.i28 t.i2B(T W7 t.i2I'}')
e.i19=(T W7 t.i2I'}')<L1A t.i28 t.i2B e.i19>;t.i28 t.i2B t.i2K e.i19
=t.i2K<L1S t.i28 t.i2B e.i19>;t.i28 t.i2B=<L1A t.i28 t.i2B>;}

* Local::MPreprocessor::AddForward
L1T{t.i28 e.i2=<L26<E1L t.i28 e.i2>(T e.i2)>;}

* Entry::MSymTable::Destroy
E1G{(T9 e.i31)=;}

* Local::MLexer::PrepareNextLoop
L1U{t.i32 e.iO=t.i32<LZ e.iO>;}

* Local::MLexer::ScanTokenBody
L1V{t.i2M(T e.i33 s.iH e.i34)(T e.i35)s.iH e.iO=<L1V t.i2M(
T e.i33 s.iH e.i34)(T e.i35 s.iH)e.iO>;t.i2M(T e.i36)(T e.i35
)e.iO=<ER t.i2M(T e.i35)e.iO>;}

* Local::MLexer::DefaultFinisher
L1W{s.i37(T e.i12)e.iO=(T s.i37 e.i12)e.iO;}

* Local::MLexer::Replace-_
L1X{e.i38'-' e.i39=e.i38'_'<L1X e.i39>;e.iB=e.iB;}

* Local::MLexer::CppComment
L1Y{(T'FROM' e.i2)e.iO=(T W5 WJ)e.i2'\n' e.iO;(T e.i1T
)e.iO=(T WE e.i1T)e.iO;}

* Local::MLexer::DoScanLiteral
L1Z{(T e.i12)'\\' s.i3A e.iO=<L1Z(T e.i12'\\' s.i3A)e.iO>
;(T e.i12)'\'\'' e.iO=<L1Z(T e.i12'\\\'')e.iO>;(T e.i12)
'\'' e.iO=(T WG e.i12)e.iO;(T e.i12)'\n' e.iO=(T WG e.i12
)e.iO;(T e.i12)s.i1T e.iO=<L1Z(T e.i12 s.i1T)e.iO>;(T e.i12
)=(T WG e.i12);}

* Local::MLexer::ReadIndex
L20{(T e.i3B)e.iO=<L27(T e.i3B)(T<E1C><E1D><E1B>'-_')e.iO>
;}

* Entry::MStrings::Numb
E1H{e.i21=<Numb e.i21>;}

* Entry::MStrings::Chr
E1I{e.iB=<Chr e.iB>;}

* Local::MXXIO::SwIsDigit
L21{s.i3C e.i3D s.i3C e.i3E=(T W3 s.i3C);s.i2W e.i3C=(T W4)
;}

* Entry::MError::Error
E1J{e.iO=<EQ' ERROR: ' e.iO>;}

* Local::MPreprocessor::ConcatSpace2
L22{(T e.i1R)(T e.i1S)=(T e.i1R e.i1S);}

* Local::MPreprocessor::AddExport
L23{t.i28(T e.i2)e.i3F=<L28<E1M t.i28(T e.i2)e.i3F>(T e.i2
)(T e.i3F)>;}

* Local::MPreprocessor::GenerateEmpty
L24{WP t.i2E e.i2H=(T W5 t.i2E WP)(T W6(T' ')e.i2H)(T W7
(T' ')'{')(T W7(T' ')'}');WN t.i2E e.i2H=(T W6 t.i2E e.i2H
)(T W7(T' ')'{')(T W7(T' ')'}');}

* Local::MPreprocessor::ScanFunctionBody-SwRename
L25{(T t.i28 W e.i3G)t.i2B(T W6 t.i2E e.i2)e.i19=(T W6 t.i2E
e.i3G)<L1S t.i28 t.i2B e.i19>;(T t.i28 W0 WR)t.i2B(T W6 t.i2E
e.i2)e.i19=(T W6 t.i2E e.i2)<E1J'Undeclared name ' e.i2><L1S
t.i28 t.i2B e.i19>;}

* Entry::MSymTable::ConvertName
E1K{(T9 e.i3H(T e.i2(T e.i3I))e.i3J)e.i2=(T9 e.i3H(T e.i2
(T e.i3I))e.i3J)W'& ' e.i3I;t.i28 e.i2=t.i28 W0 WR;}

* Local::MPreprocessor::SwAddForward
L26{t.i28 W(T e.i2)=t.i28;t.i28 W0 WS(T e.i2)=<E1J'C'
'an\'t declare name ' e.i2' -- identifier redeclared'>t.i28;}

* Entry::MSymTable::AddForward
E1L{t.i28 e.i2=<L29 t.i28(T e.i2)e.i2>;}

* Local::MLexer::DoReadIndex
L27{(T e.i12)(T e.i3K s.iH e.i3L)s.iH e.iO=<L27(T e.i12 s.iH
)(T e.i3K s.iH e.i3L)e.iO>;(T e.i12)(T e.i3M)e.iO=(T WH
<L1X e.i12>)e.iO;}

* Local::MPreprocessor::SwAddExport
L28{t.i28 W(T e.i2)(T e.i3F)=t.i28;t.i28 W0 WS(T e.i2)
(T e.i3F)=<E1J'Can\'t import names from ' e.i3F': identifie'
'r ' e.i2' redeclared.'>t.i28;}

* Entry::MSymTable::AddExport
E1M{t.i28(T e.i2)e.i1A=<L29 t.i28(T e.i2)'Cpp-SR-BE.' e.i1A 
'.' e.i2>;}

* Local::MSymTable::SwAddDeclaration
L29{(T9 e.i3H(T e.i2(T e.i3N))e.i3J)(T e.i2)e.i3N=(T9 e.i3H
(T e.i2(T e.i3N))e.i3J)W;(T9 e.i3H(T e.i2(T e.i3O))
e.i3J)(T e.i2)e.i3P=(T9 e.i3H(T e.i2(T e.i3O))e.i3J)W0 WS
;(T9 e.i31)(T e.i2)e.i3N=(T9 e.i31(T e.i2(T e.i3N)))W;}
