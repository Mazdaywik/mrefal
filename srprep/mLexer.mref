$MODULE MLexer;

$IMPORT FileIO;
$IMPORT MLambda;
$IMPORT Types;

$ENTRY Tokens
  e.FileName =
    <ConcatFreeAndValue
      <BaseTokens
        <LoadFile e.FileName>
      >
    >;

ConcatFreeAndValue {
  (Space e.Space1) (Space e.Space2) e.Tokens =
    <ConcatFreeAndValue (Space e.Space1 e.Space2) e.Tokens>;

  (Space e.Space) (s.Other e.Value) e.Tokens =
    (s.Other (e.Space) e.Value) <ConcatFreeAndValue e.Tokens>;

  (s.Other e.Value) e.Tokens =
    (s.Other () e.Value) <ConcatFreeAndValue e.Tokens>;

  = ;
}

LoadFile
  e.FileName =
    <MLambda::Map &ToPlain <FileIO::Load e.FileName>>;

ToPlain
  (e.Line) = e.Line '\n';

BaseTokens {
  = (EOF);

  e.Text =
    <SwBaseTokens
      ( <Default Number> ( <Types::Digits> ) <Types::Digits> )
      ( <Default Space> (' \n\t') ' \n\t' )
      ( <Default Punctuation> ('();{},=<>') )
      ( & FinishName  (<Types::UpAlph>) <Types::UpAlph> <Types::LoAlph> <Types::Digits> '_-' )
      ( & FinishComment ('/') )
      ( & FinishLiteral ('\'') )
      ( & FinishDirective ('$') <Types::UpAlph> )
      ( & FinishVariable ('set') )
      ( e.Text )
    >;
}

Default
  s.Name = <MLambda::BindLeft & DefaultFinisher s.Name>;

DefaultFinisher
  s.L_Name (e.Scanned) e.Text =
    (s.L_Name e.Scanned) e.Text;

SwBaseTokens {
  e.TokenMakers-B
  ( t.FnFinisher (e.Start-B s.Next e.Start-E) )
  e.TokenMakers-E
  (s.Next e.Text) =
    <PrepareNextLoop
      <MLambda::Apply t.FnFinisher (s.Next) e.Text>
    >;

  e.TokenMakers-B
  ( t.FnFinisher (e.Start-B s.Next e.Start-E) e.BodyToken )
  e.TokenMakers-E
  (s.Next e.Text) =
    <PrepareNextLoop
      <ScanTokenBody t.FnFinisher (e.BodyToken) (s.Next) e.Text>
    >;

  e.TokenMakers (s.Next e.Text) =
    <PrepareNextLoop
      (Unexpected s.Next) e.Text
    >;
}

PrepareNextLoop
  t.Token e.Text = t.Token <BaseTokens e.Text>;

ScanTokenBody {
  t.FnFinisher (e.BodySet-B s.Next e.BodySet-E) (e.Body) s.Next e.Text =
    <ScanTokenBody
      t.FnFinisher (e.BodySet-B s.Next e.BodySet-E)
      (e.Body s.Next) e.Text
    >;

  t.FnFinisher (e.BodySet) (e.Body) e.Text =
    <MLambda::Apply t.FnFinisher (e.Body) e.Text>;
}

FinishName
  (e.Name) e.Text = (Name <Replace-_ e.Name>) e.Text;

// Заменяет '-' на '_'.
Replace-_ {
  e.Line-B '-' e.Line-E =
    e.Line-B '_' <Replace-_ e.Line-E>;

  e.Line = e.Line;
}

FinishComment {
  ('/') '/' e.InComment '\n' e.Text =
    <CppComment (e.InComment) e.Text>;

  ('/') '/' e.Text = (CppComment e.Text);

  ('/') '*' e.InComment '*/' e.Text =
    (CComment e.InComment) e.Text;

  ('/') '*' e.Text = (CComment e.Text);

  ('/') e.Text = (Unexpected '/') e.Text;
}

CppComment {
  ('FROM' e.Name) e.Text = (Directive From) e.Name '\n' e.Text;

  (e.Other) e.Text = (CppComment e.Other) e.Text;
}

FinishLiteral {
  ('\'') '\'' e.Text = (Literal '\\\'') e.Text;

  ('\'') e.Text = <DoScanLiteral () e.Text>;
}

DoScanLiteral {
  (e.Scanned) '\\' s.Hidden e.Text =
    <DoScanLiteral (e.Scanned '\\' s.Hidden) e.Text>;

  (e.Scanned) '\'\'' e.Text =
    <DoScanLiteral (e.Scanned '\\\'') e.Text>;

  (e.Scanned) '\'' e.Text = (Literal e.Scanned) e.Text;

  (e.Scanned) '\n' e.Text = (Literal e.Scanned) e.Text;

  (e.Scanned) s.Other e.Text =
    <DoScanLiteral (e.Scanned s.Other) e.Text>;

  (e.Scanned) = (Literal e.Scanned);
}

FinishDirective {
  ('$ENTRY') e.Text = (Directive Entry) e.Text;
  ('$EXTERN') e.Text = (Directive Extern) e.Text;
  ('$FORWARD') e.Text = (Directive Extern) e.Text;
  ('$ENUM') e.Text = (Directive Enum) e.Text;
  ('$EENUM') e.Text = (Directive EEnum) e.Text;
  ('$SWAP') e.Text = (Directive Swap) e.Text;
  (e.Other) e.Text = (Unexpected e.Other) e.Text;
}

FinishVariable {
  (s.Type) '.' e.Text = <ReadIndex (s.Type '.') e.Text>;

  (s.Type) e.Text = (Unexpected s.Type) e.Text;
}

ReadIndex
  (e.VarStart) e.Text =
    <DoReadIndex
      (e.VarStart)
      (<Types::UpAlph> <Types::LoAlph> <Types::Digits> '-_')
      e.Text
    >;

DoReadIndex {
  (e.Scanned) (e.Set-B s.Next e.Set-E) s.Next e.Text =
    <DoReadIndex
      (e.Scanned s.Next) (e.Set-B s.Next e.Set-E) e.Text
    >;

  (e.Scanned) (e.Set) e.Text = (Var <Replace-_ e.Scanned>) e.Text;
}

$END MLexer.